<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>单一迁移轨迹</title>
    <!--引入Echarts-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/mapv/mapv.js"></script>
    <!--引入Mapboxgl库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/mapboxgl/mapbox-gl.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/mapboxgl/mapbox-gl.css"/>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-mapboxgl-plugin.min.js"></script>
    <!--引入jquery-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/jquery/jquery-3.7.1.min.js"></script>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <script>
      const { SpatialReference } = zondy
      const { WebTileLayer, MapVLayer } = zondy.layer
      const { initializeOptions } = zondy.mapboxgl.util

      // 初始地图视图
      function initViewer() {
        view = new mapboxgl.Map({
          // 容器ID
          container: 'mapgis-viewer',
          // 地图视图坐标系ID
          crs: 'EPSG:3857',
          // 初始化中心点
          center: [112.45, 31.09],
          // 初始化级数
          zoom: 3
        })
      }

      // 添加MapV图层
      function addMapV() {
        $.get('http://webclient.smaryun.com:8200/Vector/json/simpleMigrate/china.json', function (data) {
          if (typeof data === 'string') {
            data = JSON.parse(data);
          }
          var geojsonOptions = {
            gradient: {
              0: 'rgba(55, 50, 250, 0.4)',
              1: 'rgba(55, 50, 250, 1)'
            },
            max: 354551,
            draw: 'intensity'
          };

          var geojsonDataSet = mapv.geojson.getDataSet(data);

          var to = '北京';

          var qianxi = new mapv.DataSet([{
            from: '河北',
            count: 354551,
            to: to
          },
            {
              from: '天津',
              count: 97323,
              to: to
            },
            {
              from: '山东',
              count: 28664,
              to: to
            },
            {
              from: '山西',
              count: 16650,
              to: to
            },
            {
              from: '辽宁',
              count: 14379,
              to: to
            },
            {
              from: '河南',
              count: 10980,
              to: to
            },
            {
              from: '内蒙古',
              count: 9603,
              to: to
            },
            {
              from: '江苏',
              count: 4536,
              to: to
            },
            {
              from: '上海',
              count: 3556,
              to: to
            },
            {
              from: '广东',
              count: 2600,
              to: to
            }
          ]);

          var qianxiData = qianxi.get();

          var lineData = [];
          var pointData = [];
          var textData = [];
          var timeData = [];

          var citys = {};

          for (var i = 0; i < qianxiData.length; i++) {
            var fromCenter = mapv.utilCityCenter.getCenterByCityName(qianxiData[i].from);
            var toCenter = mapv.utilCityCenter.getCenterByCityName(qianxiData[i].to);
            if (!fromCenter || !toCenter) {
              continue;
            }
            citys[qianxiData[i].from] = qianxiData[i].count;
            citys[qianxiData[i].to] = 100;
            pointData.push({
              geometry: {
                type: 'Point',
                coordinates: [fromCenter.lng, fromCenter.lat]
              }
            });
            pointData.push({
              geometry: {
                type: 'Point',
                coordinates: [toCenter.lng, toCenter.lat]
              }
            });
            textData.push({
              geometry: {
                type: 'Point',
                coordinates: [fromCenter.lng, fromCenter.lat]
              },
              text: qianxiData[i].from
            });
            textData.push({
              geometry: {
                type: 'Point',
                coordinates: [toCenter.lng, toCenter.lat]
              },
              text: qianxiData[i].to
            });

            var curve = mapv.utilCurve.getPoints([fromCenter, toCenter]);

            for (j = 0; j < curve.length; j++) {
              timeData.push({
                geometry: {
                  type: 'Point',
                  coordinates: curve[j]
                },
                count: 1,
                time: j
              });
            }

            lineData.push({
              geometry: {
                type: 'LineString',
                coordinates: curve
                //coordinates: [[fromCenter.lng, fromCenter.lat], [toCenter.lng, toCenter.lat]]
              },
              count: 30 * Math.random()
            });

          }

          var data = geojsonDataSet.get({
            filter: function(item) {

              if (!citys[item.name]) {
                return false;
              }

              item.count = citys[item.name];
              return true;
            }
          });
          geojsonDataSet = new mapv.DataSet(data);

          // 构造MapV图层
          const mapVLayer = new zondy.layer.MapVLayer({
            data: geojsonDataSet,
            mapVOptions: geojsonOptions
          });
          // 添加mapV图层
          new zondy.mapboxgl.layer.MapVLayer(view, mapVLayer.data, mapVLayer.mapVOptions)

          var textDataSet = new mapv.DataSet(textData);

          var textOptions = {
            context: '2d',
            draw: 'text',
            font: '14px Arial',
            fillStyle: 'white',
            shadowColor: 'yellow',
            shadowBlue: 10,
            zIndex: 11,
            shadowBlur: 10
          };

          // 构造MapV图层
          const mapVLayer2 = new zondy.layer.MapVLayer({
            data: textDataSet,
            mapVOptions: textOptions
          });
          // 添加mapV图层
          new zondy.mapboxgl.layer.MapVLayer(view, mapVLayer2.data, mapVLayer2.mapVOptions)

          var lineDataSet = new mapv.DataSet(lineData);

          var lineOptions = {
            context: '2d',
            strokeStyle: 'rgba(255, 250, 50, 0.8)',
            shadowColor: 'rgba(255, 250, 50, 1)',
            shadowBlur: 20,
            lineWidth: 2,
            zIndex: 100,
            draw: 'simple'
          };

          // 构造MapV图层
          const mapVLayer3 = new zondy.layer.MapVLayer({
            data: lineDataSet,
            mapVOptions: lineOptions
          });
          // 添加mapV图层
          new zondy.mapboxgl.layer.MapVLayer(view, mapVLayer3.data, mapVLayer3.mapVOptions)

          var pointOptions = {
            context: '2d',
            fillStyle: 'rgba(254,175,3,0.7)',
            shadowColor: 'rgba(55, 50, 250, 0.5)',
            shadowBlur: 10,
            size: 5,
            zIndex: 10,
            draw: 'simple'
          };

          var pointDataSet = new mapv.DataSet(pointData);

          // 构造MapV图层
          const mapVLayer4 = new zondy.layer.MapVLayer({
            data: pointDataSet,
            mapVOptions: pointOptions
          });
          // 添加mapV图层
          new zondy.mapboxgl.layer.MapVLayer(view, mapVLayer4.data, mapVLayer4.mapVOptions)


          var timeDataSet = new mapv.DataSet(timeData);

          var timeOptions = {
            context: '2d',
            fillStyle: 'rgba(255, 250, 250, 0.5)',
            zIndex: 200,
            size: 2.5,
            animation: {
              type: 'time',
              stepsRange: {
                start: 0,
                end: 50
              },
              trails: 10,
              duration: 2
            },
            draw: 'simple'
          };

          // 构造MapV图层
          const mapVLayer5 = new zondy.layer.MapVLayer({
            data: timeDataSet,
            mapVOptions: timeOptions
          });
          // 添加mapV图层
          new zondy.mapboxgl.layer.MapVLayer(view, mapVLayer5.data, mapVLayer5.mapVOptions)
        });
      }

      // 添加瓦片图层
      function addLayer() {
        const layer = new WebTileLayer({
          // 加载经纬度的影像地图
          url: "http://t1.tianditu.com/DataServer?T=img_w&x={col}&y={row}&l={level}",
          // 天地图必须加token，且token名为tk
          tokenKey: "tk",
          // token请在天地图官网申请
          tokenValue: "63c5c4f101d68229494bb45d3bf60277",
          // 指定坐标系
          spatialReference: new SpatialReference({ wkid: 3857 })
        })
        // 加载图层元数据
        layer.load().then(() => {
          // 构建mapboxgl引擎需要的样式
          const style = initializeOptions(layer)
          // 添加到mapboxgl地图对象中
          addStyleToMapboxglMap(style)
        })
      }

      // 添加到mapboxgl地图对象中
      function addStyleToMapboxglMap(style) {
        const { sources, layers } = style
        const sourcesArr = Object.entries(sources)
        for (let i = 0; i < sourcesArr.length; i++) {
          const sourceArr = sourcesArr[i]
          view.addSource(sourceArr[0], sourceArr[1])
        }
        for (let j = 0; j < layers.length; j++) {
          view.addLayer(layers[j])
        }
        return true
      }

      // 地图初始化函数
      function init() {
        // 初始地图视图
        initViewer()
        // 添加地图图片图层
        addLayer()
        // 添加MapV图层
        addMapV()
      }
    </script>
</head>
<body onload="init()">
<div id="mapgis-viewer">
    <div id="mouse-position">
    </div>
</div>
</body>
</html>
