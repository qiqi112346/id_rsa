<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>模型坐标网格显示</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/tool.css"/>
    <script>
      'use strict'
      // 定义三维视图的主要类
      let map, sceneView, viewer
      // 图形图层
      let graphicsLayer
      // 模型网格边界四个点坐标
      let southWestBottom, southWestTop, southEastBottom, northWestBottom
      // 单位向量
      let normalizeX, normalizeY, normalizeZ
      // 刻度长度
      let scaleLength = 150
      // text拉伸高度
      let extrudedHeight = 500

      //绘制线
      function addGraphicPolyline(positions) {
        let polylineGraphic = new zondy.cesium.Graphic({
          //类型
          type: 'polyline',
          //几何数组
          positions: positions,
          //样式
          style: {
            //颜色
            color: Cesium.Color.AQUA,
            //宽度
            width: 1,
            //深度测试
            depthTest: true
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(polylineGraphic)
      }

      //绘制带箭头的线
      function addGraphicPolylineArrow(positions) {
        let polylineGraphic = new zondy.cesium.Graphic({
          //类型
          type: 'polyline',
          //几何数组
          positions: positions,
          //样式
          style: {
            //箭头线材质
            material: Cesium.Material.fromType('PolylineArrow', {
              //颜色
              color: Cesium.Color.AQUA
            }),
            //宽度
            width: 4,
            //深度测试
            depthTest: true
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(polylineGraphic)
      }

      // 绘制文本
      function addGraphicText(positions, text) {
        let textGraphic = new zondy.cesium.Graphic({
          //类型
          type: 'wall',
          //几何点数组
          positions: positions,
          //样式
          style: {
            extrudedHeight: extrudedHeight,
            height: Cesium.Cartographic.fromCartesian(positions[1]).height,
            //材质类型
            materialType: 'text',
            //材质
            material: {
              //文字
              text: text,
              //文字颜色
              fillColor: Cesium.Color.AQUA,
              font: 'bolder 40px MicroSoft YaHei'
            }
          }
        })
        //将标绘点添加入标绘图层
        graphicsLayer.addGraphic(textGraphic)
      }

      // 添加原点(0,0,0)text
      function addOriginalPoint() {
        let OriginalPointPosition1 = southWestBottom
        let OriginalPointPosition2 = Cesium.Cartesian3.subtract(
          Cesium.Cartesian3.add(
            OriginalPointPosition1,
            Cesium.Cartesian3.multiplyByScalar(
              normalizeX,
              extrudedHeight,
              new Cesium.Cartesian3()
            ),
            new Cesium.Cartesian3()
          ),
          Cesium.Cartesian3.multiplyByScalar(
            normalizeZ,
            extrudedHeight,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        addGraphicText(
          [OriginalPointPosition1, OriginalPointPosition2],
          '(0,0,0)'
        )
      }

      // 通过原点坐标和偏移量添加X方向刻度线和刻度值
      function addLineAndTextX(startPosition, value) {
        // 计算刻度线两点坐标
        let linePosition1 = Cesium.Cartesian3.add(
          startPosition,
          Cesium.Cartesian3.multiplyByScalar(
            normalizeX,
            value,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        let linePosition2 = Cesium.Cartesian3.subtract(
          linePosition1,
          Cesium.Cartesian3.multiplyByScalar(
            normalizeZ,
            scaleLength,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        // 计算刻度值两点坐标
        let textPosition1 = Cesium.Cartesian3.subtract(
          linePosition2,
          Cesium.Cartesian3.multiplyByScalar(
            normalizeX,
            extrudedHeight / 2,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        let textPosition2 = Cesium.Cartesian3.subtract(
          Cesium.Cartesian3.add(
            textPosition1,
            Cesium.Cartesian3.multiplyByScalar(
              normalizeX,
              extrudedHeight,
              new Cesium.Cartesian3()
            ),
            new Cesium.Cartesian3()
          ),
          Cesium.Cartesian3.multiplyByScalar(
            normalizeZ,
            extrudedHeight,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        addGraphicPolyline([linePosition1, linePosition2])
        addGraphicText([textPosition1, textPosition2], value)
      }

      // 通过原点坐标和偏移量添加Y方向刻度线和刻度值
      function addLineAndTextY(startPosition, value) {
        // 计算刻度线两点坐标
        let linePosition1 = Cesium.Cartesian3.add(
          startPosition,
          Cesium.Cartesian3.multiplyByScalar(
            normalizeY,
            value,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        let linePosition2 = Cesium.Cartesian3.add(
          linePosition1,
          Cesium.Cartesian3.multiplyByScalar(
            normalizeZ,
            scaleLength,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        // 计算刻度值两点坐标
        let textPosition1 = Cesium.Cartesian3.add(
          Cesium.Cartesian3.subtract(
            linePosition2,
            Cesium.Cartesian3.multiplyByScalar(
              normalizeX,
              extrudedHeight / 2,
              new Cesium.Cartesian3()
            ),
            new Cesium.Cartesian3()
          ),
          Cesium.Cartesian3.multiplyByScalar(
            normalizeZ,
            extrudedHeight,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        let textPosition2 = Cesium.Cartesian3.subtract(
          Cesium.Cartesian3.add(
            textPosition1,
            Cesium.Cartesian3.multiplyByScalar(
              normalizeX,
              extrudedHeight,
              new Cesium.Cartesian3()
            ),
            new Cesium.Cartesian3()
          ),
          Cesium.Cartesian3.multiplyByScalar(
            normalizeZ,
            extrudedHeight,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        addGraphicPolyline([linePosition1, linePosition2])
        addGraphicText([textPosition1, textPosition2], value)
      }

      // 通过原点坐标和偏移量添加Z方向刻度线和刻度值
      function addLineAndTextZ(startPosition, value) {
        // 计算刻度线两点坐标
        let linePosition1 = Cesium.Cartesian3.add(
          startPosition,
          Cesium.Cartesian3.multiplyByScalar(
            normalizeZ,
            value,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        let linePosition2 = Cesium.Cartesian3.add(
          linePosition1,
          Cesium.Cartesian3.multiplyByScalar(
            normalizeX,
            scaleLength,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        // 计算刻度值两点坐标
        let textPosition1 = Cesium.Cartesian3.add(
          linePosition2,
          Cesium.Cartesian3.multiplyByScalar(
            normalizeZ,
            extrudedHeight / 2,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        let textPosition2 = Cesium.Cartesian3.add(
          Cesium.Cartesian3.subtract(
            textPosition1,
            Cesium.Cartesian3.multiplyByScalar(
              normalizeZ,
              extrudedHeight,
              new Cesium.Cartesian3()
            ),
            new Cesium.Cartesian3()
          ),
          Cesium.Cartesian3.multiplyByScalar(
            normalizeX,
            extrudedHeight,
            new Cesium.Cartesian3()
          ),
          new Cesium.Cartesian3()
        )
        addGraphicPolyline([linePosition1, linePosition2])
        addGraphicText([textPosition1, textPosition2], value)
      }

      // 坐标网格风格1，通过两个点和线段数，绘制坐标网格
      function drawGridStyle1(startPosition, endPosition, direction) {
        // 通过网格线步长绘制（样式1）
        const gridLengthX = 1000,
          gridLengthY = 1000,
          gridLengthZ = 500
        // 绘制轴线
        addGraphicPolylineArrow([startPosition, endPosition])
        // 两点间的距离
        let distance = Cesium.Cartesian3.distance(endPosition, startPosition)
        // 绘制刻度线和刻度值
        switch (direction) {
          case 'x':
            for (let i = 1; i < Math.ceil(distance / gridLengthX); i++) {
              // 绘制X刻度线和刻度值
              addLineAndTextX(startPosition, i * gridLengthX)
            }
            break
          case 'y':
            for (let i = 1; i < Math.ceil(distance / gridLengthY); i++) {
              // 绘制Y刻度线和刻度值
              addLineAndTextY(startPosition, i * gridLengthY)
            }
            break
          case 'z':
            for (let i = 1; i < Math.ceil(distance / gridLengthZ); i++) {
              // 绘制Z刻度线和刻度值
              addLineAndTextZ(startPosition, i * gridLengthZ)
            }
            break
        }
      }

      // 坐标网格风格2，绘制平面网格
      function drawGridStyle2(
        centerPosition,
        position1,
        position2,
        gridNum1,
        gridNum2
      ) {
        // position1每一份坐标向量
        let averagePosition1 = Cesium.Cartesian3.divideByScalar(
          Cesium.Cartesian3.subtract(
            position1,
            centerPosition,
            new Cesium.Cartesian3()
          ),
          gridNum1,
          new Cesium.Cartesian3()
        )
        // position2每一份坐标向量
        let averagePosition2 = Cesium.Cartesian3.divideByScalar(
          Cesium.Cartesian3.subtract(
            position2,
            centerPosition,
            new Cesium.Cartesian3()
          ),
          gridNum2,
          new Cesium.Cartesian3()
        )
        for (let i = 0; i <= gridNum1; i++) {
          let linePosition1 = Cesium.Cartesian3.add(
            centerPosition,
            Cesium.Cartesian3.multiplyByScalar(
              averagePosition1,
              i,
              new Cesium.Cartesian3()
            ),
            new Cesium.Cartesian3()
          )
          for (let j = 0; j <= gridNum2; j++) {
            let linePosition2 = Cesium.Cartesian3.add(
              position2,
              Cesium.Cartesian3.multiplyByScalar(
                averagePosition1,
                i,
                new Cesium.Cartesian3()
              ),
              new Cesium.Cartesian3()
            )
            // 绘制线
            addGraphicPolyline([linePosition1, linePosition2])
            let linePositionNew1 = Cesium.Cartesian3.add(
              centerPosition,
              Cesium.Cartesian3.multiplyByScalar(
                averagePosition2,
                j,
                new Cesium.Cartesian3()
              ),
              new Cesium.Cartesian3()
            )
            let linePositionNew2 = Cesium.Cartesian3.add(
              position1,
              Cesium.Cartesian3.multiplyByScalar(
                averagePosition2,
                j,
                new Cesium.Cartesian3()
              ),
              new Cesium.Cartesian3()
            )
            // 绘制线
            addGraphicPolyline([linePositionNew1, linePositionNew2])
          }
        }
      }

      // 坐标网格风格1
      function coordinateGridStyle1() {
        // 绘制x线
        drawGridStyle1(southWestBottom, southEastBottom, 'x')
        // 绘制y线
        drawGridStyle1(southWestBottom, northWestBottom, 'y')
        // 绘制z线
        drawGridStyle1(southWestBottom, southWestTop, 'z')
        // 添加(0,0)text
        addOriginalPoint()
      }

      // 坐标网格风格2
      function coordinateGridStyle2() {
        // 通过网格线段数绘制（样式2），X轴网格线段数，Y轴网格线段数，Z轴网格线段数
        const gridNumX = 15,
          gridNumY = 6,
          gridNumZ = 10
        drawGridStyle2(
          southWestBottom,
          southEastBottom,
          northWestBottom,
          gridNumX,
          gridNumY
        )
        drawGridStyle2(
          southWestBottom,
          southEastBottom,
          southWestTop,
          gridNumX,
          gridNumZ
        )
        drawGridStyle2(
          southWestBottom,
          northWestBottom,
          southWestTop,
          gridNumY,
          gridNumZ
        )
      }

      // 绘制坐标网格
      function drawCoordinateGrid(type) {
        if (type === 'style1') {
          coordinateGridStyle1() // 风格1
        } else {
          coordinateGridStyle2() // 风格2
        }
      }

      // 获取模型坐标
      function getPositions(layer) {
        // 获取模型原点坐标和其他三个方向坐标
        let center = layer.root.boundingVolume.boundingVolume.center
        let halfAxes = layer.root.boundingVolume.boundingVolume.halfAxes

        let halfAxesX = Cesium.Matrix3.getColumn(
          halfAxes,
          0,
          new Cesium.Cartesian3()
        )
        let halfAxesY = Cesium.Matrix3.getColumn(
          halfAxes,
          1,
          new Cesium.Cartesian3()
        )
        let halfAxesZ = Cesium.Matrix3.getColumn(
          halfAxes,
          2,
          new Cesium.Cartesian3()
        )

        // 单位法向量
        normalizeX = Cesium.Cartesian3.normalize(
          halfAxesX,
          new Cesium.Cartesian3()
        )
        normalizeY = Cesium.Cartesian3.normalize(
          halfAxesY,
          new Cesium.Cartesian3()
        )
        normalizeZ = Cesium.Cartesian3.normalize(
          halfAxesZ,
          new Cesium.Cartesian3()
        )

        southWestBottom = Cesium.Cartesian3.subtract(
          center,
          halfAxesX,
          new Cesium.Cartesian3()
        )
        Cesium.Cartesian3.subtract(southWestBottom, halfAxesY, southWestBottom)
        Cesium.Cartesian3.subtract(southWestBottom, halfAxesZ, southWestBottom)

        southWestTop = Cesium.Cartesian3.subtract(
          center,
          halfAxesX,
          new Cesium.Cartesian3()
        )
        Cesium.Cartesian3.subtract(southWestTop, halfAxesY, southWestTop)
        Cesium.Cartesian3.add(southWestTop, halfAxesZ, southWestTop)

        southEastBottom = Cesium.Cartesian3.add(
          center,
          halfAxesX,
          new Cesium.Cartesian3()
        )
        Cesium.Cartesian3.subtract(southEastBottom, halfAxesY, southEastBottom)
        Cesium.Cartesian3.subtract(southEastBottom, halfAxesZ, southEastBottom)

        northWestBottom = Cesium.Cartesian3.subtract(
          center,
          halfAxesX,
          new Cesium.Cartesian3()
        )
        Cesium.Cartesian3.add(northWestBottom, halfAxesY, northWestBottom)
        Cesium.Cartesian3.subtract(northWestBottom, halfAxesZ, northWestBottom)
      }

      // 初始化标绘图层
      function addGraphicLayer() {
        graphicsLayer = new zondy.cesium.GraphicsLayer(viewer, {})
      }

      // 移除所有graphic
      function removeAllGraphicLayers() {
        if (graphicsLayer) {
          graphicsLayer.removeAllGraphic()
        }
      }

      // 添加M3d缓存图层
      function addModel() {
        let M3DModelCacheLayer = new zondy.layer.M3DModelCacheLayer({
          url: 'http://webclient.smaryun.com:8200/3DData/ModelCache/M3D/1.0/钻孔分层点_Sur_000_Ent/钻孔分层点_Sur_000_Ent.mcj',
          // 初始化参数
          extensionOptions: {
            // 开启自动跳转
            autoReset: true
          }
        })
        map.add(M3DModelCacheLayer)
        // 图层加载完毕
        M3DModelCacheLayer.on('layerview-created', function (result) {
          // 获取真实图层
          let layer = sceneView.getInnerLayer(result.layer)
          // 获取模型坐标
          getPositions(layer)
          // 绘制坐标网格
          drawCoordinateGrid('style1')
        })
      }

      // 构造三维视图类（视图容器div的id，三维视图设置参数）
      function initViewer() {
        // 初始化图层管理容器
        map = new zondy.Map()
        // 初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          // 视图id
          viewId: 'mapgis-3d-viewer',
          // 图层管理容器
          map: map
        })
        // 获取视图对象
        viewer = sceneView.getInnerView()
        //开启抗锯齿
        viewer.scene.fxaa = true
        viewer.scene.postProcessStages.fxaa.enabled = true
        //地下模式
        viewer.scene.screenSpaceCameraController.enableCollisionDetection = false
        // 设置球体初始透明度
        viewer.scene.globe.show = false
        // 针对cesium10.7.4.10版本隐藏大气环境光
        if (viewer.scene.skyAtmosphere) {
          viewer.scene.skyAtmosphere.show = false;
        }
        if (viewer.scene.sun.show) {
          viewer.scene.sun.show = false;
        }
        if (viewer.scene.moon.show) {
          viewer.scene.moon.show = false;
        }
        if (viewer.scene.globe.showGroundAtmosphere) {
          viewer.scene.globe.showGroundAtmosphere = false;
        }
      }

      //初始化示例UI操作
      function initUI() {
        layui.use(function () {
          //切换类型
          layui.form.on('select(type)', function (data) {
            // 清除网格
            removeAllGraphicLayers()
            // 绘制网格
            drawCoordinateGrid(data.value)
          })
        })
      }

      // 地图初始化函数
      function init() {
        // 初始化球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        // 添加模型
        addModel()
        // 几何图形图层
        addGraphicLayer()
        // 初始化示例UI操作
        initUI()
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right">
      <form class="layui-form" action="">
        <div class="layui-form-item">
          <label class="layui-form-label" style="width: 85px"
            >坐标网格类型</label
          >
          <div class="layui-input-block layui-input-block-select">
            <select id="type" name="type" lay-filter="type">
              <option value="style1">坐标网格1</option>
              <option value="style2">坐标网格2</option>
            </select>
          </div>
        </div>
      </form>
    </div>
  </body>
</html>
