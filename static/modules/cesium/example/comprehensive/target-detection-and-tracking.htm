<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>目标检测与跟踪</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/leaflet/leaflet.css"/>
    <script src="http://webclient.smaryun.com/static/libs/cdn/leaflet/leaflet.js"></script>
    <!-- videojs -->
    <link rel="stylesheet" type="text/css" href="http://webclient.smaryun.com/static/libs/cdn/videojs/video-js.min.css"/>
    <script src="http://webclient.smaryun.com/static/libs/cdn/videojs/video.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/videojs/videojs-flash.min.js"></script>
    <!--引入echarts-->
    <script type="text/javascript" src="http://webclient.smaryun.com/static/libs/cdn/echarts/echarts.min.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-leaflet-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-video-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/tool.css"/>
    <script>
      'use strict'
      //定义三维视图的主要类
      let map, sceneView, viewer,videoLayer
      let videoMapView, mockData, graphicsLayer, echartsLayer
      let featureList = {},
        detectData
      let videoZoomFactor = 480 / 1920 // 视频缩放倍数
      let showHeatMap = true
      //
      const {
        Map,
        Color,
        Feature,
        SketchStyle,
        SketchEditorLeaflet,
        SketchEditorCesium,
        SpatialReference
      } = zondy
      const { VideoLayer } =
        zondy.layer
      //取得jquery对象
      let $ = layui.$

      let handler

      // 初始化视频标定数据mockData
      function initMockData() {
        mockData = {
          videoID: 'xxxx-xxxx-xxxx-xxxx', // 视频id
          videoName: 'vehicle_identification', // 视频名称
          // 视频源信息
          videoSource: {
            protocol: 'mp4', // 视频传输协议
            videoUrl:
              'http://webclient.smaryun.com:8200/NoneSpatialData/video/vehicle_identification.mp4' // 视频服务地址
          },
          // 视频配准参数
          videoRegistrationParam: {
            videoRegistrationType: '', // 视频配准的类型：几何多项式模型、有理函数数学模型、局部区域校正模型、卫星传感器模型
            calibrationParam: {
              // 标定配准参数
              groundControlPointList: [
                {
                  id: 'GCP1', // 控制点标识
                  description: '匝道入口1', // 控制点描述
                  pixelX: 80, // 控制点在图像上的像素坐标x分量
                  pixelY: 1080, // 控制点在图像上的像素坐标y分量
                  x: 114.39691043153113, // 控制点的地理坐标x分量
                  y: 30.46445753214203, // 控制点的地理坐标y分量
                  z: 0 // 控制点的地理坐标的高程
                },
                {
                  id: 'GCP2', // 控制点标识
                  description: '匝道入口2', // 控制点描述
                  pixelX: 1130, // 控制点在图像上的像素坐标x分量
                  pixelY: 1080, // 控制点在图像上的像素坐标y分量
                  x: 114.39691607002382, // 控制点的地理坐标x分量
                  y: 30.464345472836595, // 控制点的地理坐标y分量
                  z: 0 // 控制点的地理坐标的高程
                },
                {
                  id: 'GCP3', // 控制点标识
                  description: '匝道入口3', // 控制点描述
                  pixelX: 870, // 控制点在图像上的像素坐标x分量
                  pixelY: 305, // 控制点在图像上的像素坐标y分量
                  x: 114.39707102871883, // 控制点的地理坐标x分量
                  y: 30.464242883559827, // 控制点的地理坐标y分量
                  z: 0 // 控制点的地理坐标的高程
                },
                {
                  id: 'GCP4', // 控制点标识
                  description: '花园内道路2', // 控制点描述
                  pixelX: 870, // 控制点在图像上的像素坐标x分量
                  pixelY: 304, // 控制点在图像上的像素坐标y分量
                  x: 114.40094736608475, // 控制点的地理坐标x分量
                  y: 30.464955586186317, // 控制点的地理坐标y分量
                  z: 0 // 控制点的地理坐标的高程
                },
                {
                  id: 'GCP5', // 控制点标识
                  description: '花园内道路1', // 控制点描述
                  pixelX: 576, // 控制点在图像上的像素坐标x分量
                  pixelY: 304, // 控制点在图像上的像素坐标y分量
                  x: 114.40089293538307, // 控制点的地理坐标x分量
                  y: 30.46516425443505, // 控制点的地理坐标y分量
                  z: 0 // 控制点的地理坐标的高程
                }
              ]
            },
            // 相机内外参数（预留，用于实现通过相机参数配准）
            cameraParam: {
              cameraPosition: ['x', 'y', 'z'], // 相机位置
              // 相机姿态
              orientation: {
                heading: '', // 方向角
                pitch: '', // 俯仰角
                roll: '' // 滚动角
              },
              hFOV: '', // 水平视场角
              vFOV: '' // 垂直视场角
            }
          },
          version: '' // 元数据的版本，用于实现版本的兼容。
        }
      }

      // 打开视频调绘

      // 在地图上用绘制区域
      function addArea() {

        // 监听视频变化
        eventTimeupdate()
        // 用虚线绘制视频范围
        let positions = [
          Cesium.Cartesian3.fromDegrees(114.4012, 30.4653, 1),
          Cesium.Cartesian3.fromDegrees(114.4012, 30.4649, 1),
          Cesium.Cartesian3.fromDegrees(114.39624, 30.464006, 1),
          Cesium.Cartesian3.fromDegrees(114.3962, 30.4643, 1),
          Cesium.Cartesian3.fromDegrees(114.4012, 30.4653, 1)
        ]
        addRectangleTrailPolyline(positions)

      }

      //绘制虚线
      function addRectangleTrailPolyline(positions) {
        let graphicsLayerLine = new zondy.cesium.GraphicsLayer(viewer, {})
        let polylineGraphic = new zondy.cesium.Graphic({
          //类型
          type: 'polyline',
          //线几何
          positions: positions,
          //样式
          style: {
            //线宽
            width: 1,
            //虚线材质
            material: Cesium.Material.fromType('PolylineDash', {
              //线颜色
              color: new Cesium.Color(1.0, 1.0, 1.0, 0),
              //间隔颜色
              gapColor: new zondy.Color(255, 0, 0, 1),
              //间隔长度
              dashPattern: 240
            })
          }
        })
        //将标绘点添加入标绘图层
        graphicsLayerLine.addGraphic(polylineGraphic)
      }

      // 添加要素
      function addFeature(geometry, symbol) {
        let feature = new zondy.Feature({
          //构建范围对象
          geometry: geometry,
          //设置样式
          symbol: symbol
        })
        // 添加要素图层
        graphicsLayer.add(feature)
        return feature
      }

      // 更新要素
      function updateFeature(geometry, symbol, feature) {
        feature.geometry = geometry
        feature.symbol = symbol
      }

      // 通过box获取geometry
      function getGeometryByBox(name, box) {
        // box 转地理坐标
        // 视频像素不一致，需要乘以视频缩放倍数
        // 通过中心点估算范围
        // 根据不同name类型设置图形大小
        let num = name === 'truck' ? 3 : name === 'bus' ? 2 : 1.5
        let geoCoordMin = pixelCoordToGeoCoord(
          Number((box[0] + box[2]) / 2) * videoZoomFactor - 10,
          Number((box[1] + box[3]) / 2) * videoZoomFactor - num
        )
        let geoCoordMax = pixelCoordToGeoCoord(
          Number((box[0] + box[2]) / 2) * videoZoomFactor + 10,
          Number((box[1] + box[3]) / 2) * videoZoomFactor + num
        )
        let geometry = new zondy.geometry.Extent({
          xmin: geoCoordMin.coordinates[0],
          ymin: geoCoordMin.coordinates[1],
          xmax: geoCoordMax.coordinates[0],
          ymax: geoCoordMax.coordinates[1]
        })
        return geometry
      }

      // 通过名称得到不同的symbol
      function getSymbolByName(name) {
        let color
        switch (name) {
          case 'bus':
            color = new zondy.Color(49, 211, 0, 0.7)
            break
          case 'truck':
            color = new zondy.Color(0, 190, 188, 0.7)
            break
          case 'car':
          default:
            color = new zondy.Color(255, 120, 22, 0.7)
            break
        }
        return new zondy.symbol.SimpleFillSymbol({
          //设置颜色
          color: color
        })
      }

      // 监听每秒视频时间更新
      function eventTimeupdate() {
        let myVideo = document.querySelector('#mapgis-video-viewer video')
        //使用事件监听方式捕捉事件， 此事件可作为实时监测video 播放状态
        myVideo.addEventListener('timeupdate', function () {
          let timeDisplay = Math.floor(myVideo.currentTime)
          if (timeDisplay === 0) {
            // 清空
            graphicsLayer.removeAll()
            featureList = {}
          } else {
            let dataList = detectData[`time_${timeDisplay}`]
              ? detectData[`time_${timeDisplay}`].annotations
              : []
            dataList.forEach((item, index) => {
              let geometry = getGeometryByBox(item.name, item.box)
              let symbol = getSymbolByName(item.name)
              if (item.track_id === null) {
                // 前40秒的视频无null，处理没有track_id的情况
                let feature = addFeature(geometry, symbol)
                featureList[`null${index}`] = feature
              } else {
                if (featureList.hasOwnProperty(item.track_id)) {
                  updateFeature(geometry, symbol, featureList[item.track_id])
                } else {
                  let feature = addFeature(geometry, symbol)
                  featureList[item.track_id] = feature
                }
              }
            })
          }
          if (showHeatMap) {
            initEcharts()
          }
        })
      }

      // 像素坐标转地理坐标
      function pixelCoordToGeoCoord(x, y) {
        let geoCoord = videoMapView.toMap(
          {x, y}
        )
        return geoCoord
      }

      // 初始化mapV热力图
      function initEcharts() {
        let data = []
        // 构造数据 将数据处理成对应的geojson格式
        for (let key of Object.keys(featureList)) {
          data.push({
            value: [
              (featureList[key].geometry.xmin +
                featureList[key].geometry.xmax) /
              2 +
              Math.random() * 0.0000001,
              (featureList[key].geometry.ymin +
                featureList[key].geometry.ymax) /
              2 +
              Math.random() * 0.0000001
            ]
          })
        }
        let option = {
          title: {
            text: '全国主要城市PM 2.5热力图',
            textStyle: {
              color: '#eee'
            },
            subtext: 'data from PM25.in',
            sublink: 'http://www.pm25.in',
            left: 'center'
          },
          cesium: {
            // 热力图必须设置该属性
            roam: false
          },
          animation: false,
          postRender: true,
          // postRenderFrame: 1,
          visualMap: {
            show: false,
            top: 'top',
            min: 0,
            max: 5,
            seriesIndex: 0,
            calculable: true,
            inRange: {
              color: [
                'rgb(0,0,255)',
                'rgb(0,255,0)',
                'rgb(255,255,0)',
                'rgb(255,0,0)',
                'rgb(255,182,193)'
              ]
            }
          },
          series: [
            {
              name: '热力图',
              type: 'heatmap',
              coordinateSystem: 'cesium', // 设置cesium坐标系
              data: data, // 转换数据
              pointSize: 20,
              blurSize: 24
            }
          ]
        }
        // 声明cesium的echarts图层并将其显示到三维球上
        if (!echartsLayer) {
          echartsLayer = new zondy.layer.EchartsLayer({
            echartsOptions: option
          })
          map.add(echartsLayer)
        } else {
          echartsLayer.echartsOptions = option
          echartsLayer.refresh()
        }
      }

      // 添加几何图形图层
      function addGraphicsLayer() {
        graphicsLayer = new zondy.layer.GraphicsLayer()
        sceneView._graphicsLayers.add(graphicsLayer)
      }

      // 获取结果JSON数据
      function getResultJson() {
        $.ajax({
          url: 'http://webclient.smaryun.com:8200/NoneSpatialData/video/vehicle_identification_result.json',
          type: 'GET',
          dataType: 'json',
          success: function (data) {
            detectData = data
            // 打开视频调绘
            initMockData()
            initVideoViewer()
            addVideoLayer()

            setTimeout(() => {
              addArea()
              videoZoomFactor = Number($('#mapgis-video-viewer').width() / data.info.width);
            }, 3000);
          }
        })
      }

      function addVideoLayer() {
        videoLayer = new VideoLayer({
          source: mockData
        })
        map.add(videoLayer)
      }

      function initVideoViewer() {
        //初始化地图视图对象
        videoMapView = new zondy.video.MapView({
          //视图id
          viewId: 'mapgis-video-viewer',
          //图层管理容器
          map: map
        })
      }

      //飞到指定视角
      function flyTo() {
        sceneView.flyTo({
          center: [114.39452175291534, 30.463570944379768, 518.4439332108705],
          duration: 1, // 持续时间
          orientation: {
            heading: Cesium.Math.toRadians(85.7022), //方位角
            pitch: Cesium.Math.toRadians(-52.834), //俯仰角
            roll: Cesium.Math.toRadians(0) //翻滚角
          },
          complete: () => {
            getResultJson()
          }
        })
      }

      // 初始化示例UI操作
      function initUI() {
        // 热力图
        layui.form.on('switch(heatMap)', function (data) {
          showHeatMap = data.elem.checked
          // 增加热力图
          if (!showHeatMap) {
            map.remove(echartsLayer)
          }
        })
      }

      //添加天地图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      //初始化球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
        // 打开深度检测
        viewer.scene.globe.depthTestAgainstTerrain = true
      }

      //地图初始化函数
      function init() {
        //初始化球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //加载天地图
        addTDT()
        //添加几何图形图层
        addGraphicsLayer()
        //初始化示例UI操作
        initUI()
        //飞到指定视角
        flyTo()
      }
    </script>
</head>

<body onload="init()">
<div id="mapgis-3d-viewer"></div>
<div class="layui-panel layui-panel-right">
    <form class="layui-form" action="">
        <div class="layui-form-item">
            <label class="layui-form-label">交通热力图</label>
            <div class="layui-input-block">
                <input
                        type="checkbox"
                        id="heatMap"
                        lay-filter="heatMap"
                        lay-skin="switch"
                        lay-text="显示|隐藏"
                        checked
                />
            </div>
        </div>
    </form>
</div>
<div id="mapgis-video-viewer"></div>
<style>
    .layui-form-switch {
        margin-top: 6px;
    }

    #mapgis-video-viewer {
        width: 500px;
        height: 281px;
        position: absolute;
        left: 0px;
        bottom: 0px;
        border: 2px solid #ff0000;
        z-index: 10000;
    }

    .vjs-seeking .vjs-loading-spinner,
    .vjs-waiting .vjs-loading-spinner {
        display: none;
    }

    .vjs-waiting .vjs-loading-spinner:before {
        display: none;
    }

    .vjs-seeking .vjs-loading-spinner:after,
    .vjs-waiting .vjs-loading-spinner:after {
        display: none;
    }
</style>
</body>
</html>
