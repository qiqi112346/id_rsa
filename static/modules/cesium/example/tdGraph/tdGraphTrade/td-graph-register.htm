<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>符号库使用</title>
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha384-SOnAn/m2fVJCwnbEYgD4xzrPtvsXdElhOVvR8ND1YjB5nhGNwwf7nBQlhfAwHAZC" crossorigin="anonymous"/>
    <!-- jquery -->
    <script src="http://webclient.smaryun.com/static/libs/cdn/jquery/jquery-3.7.1.min.js"></script>
    <!-- cesium -->
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!-- plot -->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-plot.min.js"></script>
    <!-- panel -->
    <script src="http://webclient.smaryun.com/static/libs/cdn/exampleThirdParty/plot-profess/PlotPanel/index.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/exampleThirdParty/plot-profess/PlotPanel/index.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <script>
      'use strict'

      //定义三维视图的主要类
      let map,
        sceneView,
        viewer,
        plotLayer,
        plotLayer3DGroup,
        manager,
        rewriteSymbolId,
        registerSymbolId
      // 获取Zondy类
      const zondy = window.zondy
      // 获取标绘类
      const plot = zondy.plot
      const {
        // 标绘库工具类
        PlotUtilBase,
        // 三维图层
        PlotLayer3D,
        // 三维图层组
        PlotLayer3DGroup,
        // 符号管理器
        SymbolManager,
        // 注册类
        PlotRegister
      } = plot

      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //添加天地图
        addTDT()
        //视图跳转
        flyTo()
        //初始化标绘管理器
        initPlotManager(function () {
          //注册新的标绘算法
          initPlotRegister()
          //初始化标绘图层
          initPlotLayer()
        })
      }

      //初始化三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
        //显示鼠标位置
        viewer.showPosition()
        //抗锯齿处理
        viewer.scene.fxaa = true
        viewer.scene.postProcessStages.fxaa.enabled = true
      }

      //加载天地图底图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      //视图跳转
      function flyTo() {
        const result = {
          heading: 349.75686515982795,
          pitch: -51.57215822463274,
          roll: 0.0451289120656001,
          x: 117.33565566718012,
          y: 33.86796911358947,
          z: 35612.554485602785
        }
        //飞到指定视角
        sceneView.flyTo({
          center: [result.x, result.y, result.z],
          duration: 2,
          orientation: {
            heading: Cesium.Math.toRadians(result.heading), //方位角
            pitch: Cesium.Math.toRadians(result.pitch), //俯仰角
            roll: Cesium.Math.toRadians(result.roll) //翻滚角
          }
        })
      }

      /**
       * 初始化标绘符号管理器
       * @param callback 回调函数
       * */
      function initPlotManager(callback) {
        // 符号库路径
        const symbolUrl = `http://webclient.smaryun.com:8200/Plot/plot-sample/symbolLibs/标号库a/symbolLib.json`
        const symbolOptions = {
          // 符号库字体路径
          fontURL: `http://webclient.smaryun.com:8200/Plot/plot-sample/fonts/`,
          // 静态资源路径
          baseUrl: `http://webclient.smaryun.com:8200/Plot/plot-sample/symbolLibs/标号库a/`
        }

        // #创建符号管理器
        // 可传入符号库url链接
        manager = new SymbolManager(symbolUrl, symbolOptions)
        // #请求获取符号库
        manager.getSymbols().then(() => {
          //获取符号库后执行回调
          callback()
        })
      }

      //注册新的标绘算法
      function initPlotRegister() {
        // 算法注册
        const plotRegister = new PlotRegister(manager)
        // 以kidney算法为基础,改写生成带空隙的区域方法
        rewriteSymbolId = plotRegister.rewrite(
          'kidney',
          'kidney1',
          (proto) => {
            return {
              constructor(node) {
                proto(node)
              },
              applyFuncToStorkeGeometry(coords) {
                let v = coords.map((t) =>
                  t.map((s) => new PlotUtilBase.Point(s.x, s.y))
                )
                let s = []
                for (let i = 0; i < coords.length; i = i + 2) {
                  const vt = coords[i].map(
                    (t) => new PlotUtilBase.Point(t.x, t.y)
                  )
                  delete v[i]
                  const v1 = vt.slice(0, 20)
                  const v2 = vt.slice(25, 45)
                  const v3 = vt.slice(50)
                  s.unshift(v3, v2, v1)
                }
                s = s.filter((t) => t.length !== 0)
                v = v.filter((t) => t)
                s = s.concat(v)
                return s
              }
            }
          },
          {
            path: '常用符号库/算法符号/区域.svg'
          }
        )
        // 注册符号类型为newclass的算法
        registerSymbolId = plotRegister.register(
          'newclass',
          (proto) => {
            return {
              _insertGeometry(points) {
                return [points]
              }
            }
          },
          {
            path: '常用符号库/算法符号/区域.svg'
          }
        )
        console.log('rewriteSymbolId: ', rewriteSymbolId)
        console.log('registerSymbolId: ', registerSymbolId)
      }

      //初始化标绘图层
      function initPlotLayer() {
        //创建三维图层组
        plotLayer3DGroup = new PlotLayer3DGroup(viewer)
        // 创建三维图层
        plotLayer = new PlotLayer3D(Cesium, viewer, {
          //设置为贴地模式
          classificationType: 0
        })
        // 设置图层标绘元素缩放比，默认为1
        plotLayer.setPlotSize(0.5)
        // 将三维图层添加到图层组内
        plotLayer3DGroup.addLayer(plotLayer)
        // 添加标绘元素
        plotLayer.addGeoJSONObject({
          type: 'Feature',
          properties: {
            show: true,
            symbolId: rewriteSymbolId,
            symbolName: '区域'
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [
              [117.3701360274617, 34.15566255198262],
              [117.26718426641384, 34.103216223599446],
              [117.1508839238758, 34.08738778399195],
              [117.1508839238758, 34.09738778399195]
            ]
          }
        })
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer">
      <div id="content" style="position: relative"></div>
    </div>
  </body>
</html>
