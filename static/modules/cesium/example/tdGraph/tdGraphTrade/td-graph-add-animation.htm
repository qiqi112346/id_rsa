<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>三维标绘图层使用</title>
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/6.2.0/css/all.min.css" integrity="sha384-SOnAn/m2fVJCwnbEYgD4xzrPtvsXdElhOVvR8ND1YjB5nhGNwwf7nBQlhfAwHAZC" crossorigin="anonymous"/>
    <!-- jquery -->
    <script src="http://webclient.smaryun.com/static/libs/cdn/jquery/jquery-3.7.1.min.js"></script>
    <!-- cesium -->
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!-- plot -->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-plot.min.js"></script>
    <!-- panel -->
    <script src="http://webclient.smaryun.com/static/libs/cdn/exampleThirdParty/plot-profess/PlotPanel/index.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/exampleThirdParty/plot-profess/PlotPanel/index.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/plot/plot3d-layer-use.css"/>
    <script>
      'use strict'

      //定义三维视图的主要类
      let map,
        sceneView,
        viewer,
        plotLayer,
        plotLayer3DGroup,
        plotEditor,
        currentPlot,
        timeline
      // 获取Zondy类
      const zondy = window.zondy
      // 获取标绘类
      const plot= zondy.plot
      const {
        // 三维图层
        PlotLayer3D,
        // 三维图层组
        PlotLayer3DGroup,
        // 符号管理器
        SymbolManager,
        // 绘制工具
        DrawTool,
        // 时间轴
        TimeLine
      } = plot

      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //添加天地图
        addTDT()
        //视图跳转
        flyTo()
        //初始化标绘符号管理器
        initPlotManager(SymbolManager, function () {
          //确保符号获取完毕后，初始化标绘图层
          initPlotLayer(PlotLayer3D, PlotLayer3DGroup, TimeLine)
          //初始化UI
          initUI()
        })
      }

      //初始化三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
        //显示鼠标位置
        viewer.showPosition()
        //抗锯齿处理
        viewer.scene.fxaa = true
        viewer.scene.postProcessStages.fxaa.enabled = true
      }

      //加载天地图底图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      //视角跳转
      function flyTo() {
        const result = {
          heading: 6.625892018788056,
          pitch: -26.493810053117333,
          roll: 359.99986217919337,
          x: 117.18881690023976,
          y: 33.59444832479832,
          z: 30090.156475192594
        }

        //飞到指定视角
        sceneView.flyTo({
          center: [result.x, result.y, result.z],
          duration: 2,
          orientation: {
            heading: Cesium.Math.toRadians(result.heading), //方位角
            pitch: Cesium.Math.toRadians(result.pitch), //俯仰角
            roll: Cesium.Math.toRadians(result.roll) //翻滚角
          }
        })
      }

      /**
       * 初始化标绘符号管理器
       * @param SymbolManager 标绘符号管理器
       * @param callback 回调函数
       * */
      function initPlotManager(SymbolManager, callback) {
        // 符号库路径
        const symbolUrl = `http://webclient.smaryun.com:8200/Plot/plot-sample/symbolLibs/标号库a/symbolLib.json`
        const symbolOptions = {
          // 符号库字体路径
          fontURL: `http://webclient.smaryun.com:8200/Plot/plot-sample/fonts/`,
          // 静态资源路径
          baseUrl: `http://webclient.smaryun.com:8200/Plot/plot-sample/symbolLibs/标号库a/`
        }
        // 创建符号管理器
        const manager = new SymbolManager(symbolUrl, symbolOptions)
        // 请求获取符号库
        manager.getSymbols().then(() => {
          //获取符号库后执行回调
          callback()
        })
      }

      /**
       * 初始化标绘图层
       * @param PlotLayer3D 标绘图层构造函数
       * @param PlotLayer3DGroup 标绘图层组构造函数
       * @param TimeLine 态势推演工具构造函数
       * */
      function initPlotLayer(PlotLayer3D, PlotLayer3DGroup, TimeLine) {
        // 创建图层组
        plotLayer3DGroup = new PlotLayer3DGroup(viewer)
        // 创建三维图层
        plotLayer = new PlotLayer3D(Cesium, viewer, {})
        // 添加图层
        plotLayer3DGroup.addLayer(plotLayer)
        // 创建时间轴
        timeline = new TimeLine(plotLayer3DGroup, {})
        // 开启图层可编辑
        plotLayer.editable = true

        // 添加标绘元素
        const rePlot = plotLayer.addGeoJSONObject({
          type: 'Feature',
          properties: {
            show: true,
            featureId: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
            symbolId: '39',
            symbolName: '撤离线'
          },
          geometry: {
            type: 'MultiPoint',
            coordinates: [
              [117.3701360274617, 34.15566255198262],
              [117.26718426641384, 34.103216223599446],
              [117.1508839238758, 34.08738778399195]
            ]
          }
        })
        // 获取当前标绘物
        rePlot.then((plot) => {
          currentPlot = plot
          addAnimation()
        })
      }

      // 添加闪烁动画
      function addAnimation1(uuid) {
        timeline.addAnimationObject({
          animationName: '动画2',
          featureIds: uuid,
          duration: 500,
          easing: 'Linear',
          delay: 0,
          endDelay: 0,
          loop: 10000,
          timelineOffset: 0,
          animationType: 'blink-animation'
        })
      }

      // 添加显隐动画
      function addAnimation2(uuid) {
        timeline.addAnimationObject({
          animationName: '动画2',
          featureIds: uuid,
          duration: 500,
          easing: 'Linear',
          delay: 0,
          endDelay: 0,
          loop: 10000,
          timelineOffset: 0,
          animationType: 'visible-animation'
        })
      }

      // 添加属性动画
      function addAnimation3(uuid) {
        timeline.addAnimationObject({
          animationName: '动画2',
          featureIds: uuid,
          duration: 4000,
          easing: 'Linear',
          delay: 0,
          endDelay: 0,
          loop: 10000,
          timelineOffset: 0,
          animationType: 'attribute-animation',
          attrsItem: {
            attrName: 'dimModHeight',
            value: [3000, 2000, 6000, 3000]
          }
        })
      }

      // 添加路径动画
      function addAnimation4(uuid) {
        timeline.addAnimationObject({
          animationName: '动画2',
          featureIds: uuid,
          duration: 3000,
          easing: 'Linear',
          delay: 0,
          endDelay: 0,
          loop: 10000,
          timelineOffset: 0,
          animationCoords: [
            [117.3701360274617, 34.15566255198262],
            [117.26718426641384, 34.103216223599446],
            [117.1508839238758, 34.08738778399195]
          ],
          animationType: 'path-animation'
        })
      }

      // 添加比例动画
      function addAnimation5(uuid) {
        timeline.addAnimationObject({
          animationName: '动画2',
          featureIds: uuid,
          duration: 500,
          easing: 'Linear',
          delay: 0,
          endDelay: 0,
          loop: 10000,
          timelineOffset: 0,
          animationType: 'scale-animation'
        })
      }

      // 添加生长动画
      function addAnimation6(uuid) {
        timeline.addAnimationObject({
          animationName: '动画2',
          featureIds: uuid,
          duration: 3000,
          easing: 'Linear',
          delay: 0,
          endDelay: 0,
          loop: 10000,
          timelineOffset: 0,
          animationType: 'grow-animation'
        })
      }

      //初始化示例UI
      function initUI() {
        const panel = new window.webclientPlot.PlotPanel('plot-show-table', {
          titleText: '动效设置',
          panelWidth: 320
        })

        const contentBody = panel.getBody()
        contentBody.style.display = 'flex'
        contentBody.style.flexDirection = 'column'

        // 继续动画/暂停动画，按钮切换
        const fBtnSwitch = (showStopBtn) => {
          if (showStopBtn) {
            $(".list-item[name='继续动画']").parent().hide()
            $(".list-item[name='暂停动画']").parent().show()
          } else {
            $(".list-item[name='继续动画']").parent().show()
            $(".list-item[name='暂停动画']").parent().hide()
          }
        }

        const items = [
          {
            children: [
              {
                name: '添加闪烁动画',
                action: () => {
                  if (currentPlot) {
                    // 获取uuid
                    const uuid = currentPlot.getElement().getFeatureId()
                    addAnimation1(uuid)
                    fBtnSwitch(true)
                    timeline.restore()
                    timeline.play()
                  }
                }
              },
              {
                name: '添加显隐动画',
                action: () => {
                  if (currentPlot) {
                    // 获取uuid
                    const uuid = currentPlot.getElement().getFeatureId()
                    addAnimation2(uuid)
                    fBtnSwitch(true)
                    timeline.restore()
                    timeline.play()
                  }
                }
              }
            ]
          },
          {
            children: [
              {
                name: '添加属性动画',
                action: () => {
                  if (currentPlot) {
                    // 获取uuid
                    const uuid = currentPlot.getElement().getFeatureId()
                    addAnimation3(uuid)
                    fBtnSwitch(true)
                    timeline.restore()
                    timeline.play()
                  }
                }
              },
              {
                name: '添加路径动画',
                action: () => {
                  if (currentPlot) {
                    // 获取uuid
                    const uuid = currentPlot.getElement().getFeatureId()
                    addAnimation4(uuid)
                    fBtnSwitch(true)
                    timeline.restore()
                    timeline.play()
                  }
                }
              }
            ]
          },
          {
            children: [
              {
                name: '添加比例动画',
                action: () => {
                  if (currentPlot) {
                    // 获取uuid
                    const uuid = currentPlot.getElement().getFeatureId()
                    addAnimation5(uuid)
                    fBtnSwitch(true)
                    timeline.restore()
                    timeline.play()
                  }
                }
              },
              {
                name: '添加生长动画',
                action: () => {
                  if (currentPlot) {
                    // 获取uuid
                    const uuid = currentPlot.getElement().getFeatureId()
                    addAnimation6(uuid)
                    fBtnSwitch(true)
                    timeline.restore()
                    timeline.play()
                  }
                }
              }
            ]
          },
          {
            name: '继续动画',
            action: () => {
              fBtnSwitch(true)
              timeline.play()
            }
          },
          {
            name: '暂停动画',
            action: () => {
              fBtnSwitch(false)
              timeline.pause()
            }
          },
          {
            name: '重置动画',
            action: () => {
              fBtnSwitch(false)
              timeline.restore()
            }
          },
          {
            name: '清空动画',
            action: () => {
              fBtnSwitch(true)
              timeline.pause()
              timeline.restore()
              timeline.clear()
            }
          }
        ]

        items.forEach((item, index) => {
          const f = (v, direction) => {
            const div = document.createElement('div')
            if (direction === 'left') {
              div.setAttribute('class', 'list-item list-item-left')
            } else if (direction === 'right') {
              div.setAttribute('class', 'list-item list-item-right')
            } else {
              div.setAttribute('class', 'list-item')
            }
            div.innerText = v.name
            div.setAttribute('name', v.name)
            div.addEventListener('click', v.action.bind(this))
            return div
          }
          const list = document.createElement('div')
          list.setAttribute('class', 'listdom')
          if (item.children) {
            item.children.forEach((t, index) => {
              if (index % 2 === 0) {
                list.appendChild(f(t, 'left'))
              } else {
                list.appendChild(f(t, 'right'))
              }
            })
          } else {
            list.appendChild(f(item))
          }
          contentBody.appendChild(list)
        })
        fBtnSwitch(true)
      }

      //预先添加一个动画
      function addAnimation() {
        if (currentPlot) {
          // 获取uuid
          const uuid = currentPlot.getElement().getFeatureId()
          // 添加动画object
          addAnimation1(uuid)
          // 重置动画
          timeline.restore()
          // 开始动画
          timeline.play()
        }
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer">
      <div id="content">
        <div id="plot-show-table"></div>
      </div>
    </div>
  </body>
</html>
