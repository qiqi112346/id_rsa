<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>圆球</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--html2canvas库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/html2canvas/html2canvas.min.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/css/graphic.css"
    />
    <script>
      'use strict'
      //定义三维视图的主要类
      let map, sceneView, viewer, graphicsLayer, sphere
      //取得jquery对象
      let $ = layui.$
      //颜色管理器对象
      let colorpicker = layui.colorpicker

      //地图初始化函数
      function init() {
        //初始化球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //初始化标绘图层
        addGraphicLayer()
        //圆球1
        addColorSphere1()
        //圆球2
        addSemiSphere2()
        //圆球3 html材质
        addSemiSphere3()
        //圆球4
        addSemiSphere4()
        //圆球5
        addSemiSphere5()
        //圆球6
        addSemiSphere6()
        //圆球7
        addSemiSphere7()
        //圆球8
        addSemiSphere8()
        //圆球9
        addSemiSphere9()
        //圆球10
        addSemiSphere10()
        //圆球11
        addSemiSphere11()
        //圆球12
        addSemiSphere12()
        //圆球13
        addSemiSphere13()
        //圆球14
        addSemiSphere14()
        //圆球15
        addSemiSphere15()
        //圆球16
        addTrailSphere16()
        //圆球17
        addTrailSphere17()
        //圆球18
        addEllipsoid18()
        //加载天地图底图
        addTDT()
        //视点跳转
        flyTo()
        //初始化示例UI
        initUI()
      }

      //初始化球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
      }

      //初始化标绘图层
      function addGraphicLayer() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/GraphicsLayer.html
        graphicsLayer = new zondy.cesium.GraphicsLayer(viewer, {
          clickGraphic: function (graphic) {
            if (!graphic) return
            sphere = graphic
            console.log(sphere)

            //更新样式面板
            let radius = sphere.style.radius // 半径
            let innerRadius = sphere.style.maximumClock // 内部半径
            let height = sphere.style.height // 离地高度
            let color = sphere.style.color // 颜色
            let minimumCone = sphere.style.minimumCone // 最小锥角
            let maximumCone = sphere.style.maximumCone // 最大锥角
            let minimumClock = sphere.style.minimumClock // 最小时钟角
            let maximumClock = sphere.style.maximumClock // 最大时钟角

            // 材质参数
            let materialColor = sphere.style.color // 材质颜色
            let image = '' // 材质底图
            let duration = 1000 // 速度
            let direction = 1 // 方向
            let cellAlpha = 1 // 透明度

            // 椭球新增参数
            let radiusX = 3000
            let radiusY = 2000
            let radiusZ = 1000
            let offsetHeight = 600

            //隐藏非公共参数
            $('#sphere-color').parents('.layui-form-item').hide()
            $('#sphere-materialColor').parents('.layui-form-item').hide()
            $('#sphere-image').parents('.layui-form-item').hide()
            $('#sphere-duration').parents('.layui-form-item').hide()
            $('#sphere-direction').parents('.layui-form-item').hide()
            $('#sphere-cellAlpha').parents('.layui-form-item').hide()

            $('#sphere-height').parents('.layui-form-item').hide()
            $('#sphere-radius').parents('.layui-form-item').hide()
            $('#sphere-innerRadius').parents('.layui-form-item').hide()
            $('#sphere-minimumCone').parents('.layui-form-item').hide()
            $('#sphere-maximumCone').parents('.layui-form-item').hide()
            $('#sphere-minimumClock').parents('.layui-form-item').hide()
            $('#sphere-maximumClock').parents('.layui-form-item').hide()

            $('#sphere-radiusX').parents('.layui-form-item').hide()
            $('#sphere-radiusY').parents('.layui-form-item').hide()
            $('#sphere-radiusZ').parents('.layui-form-item').hide()
            $('#sphere-offsetHeight').parents('.layui-form-item').hide()

            // 不同类型，不同材质，参数不一样
            if (sphere.type === 'ellipsoid') {
              $('#sphere-color').parents('.layui-form-item').show()
              radiusX = sphere.style.radiusX
              $('#sphere-radiusX').parents('.layui-form-item').show()
              radiusY = sphere.style.radiusY
              $('#sphere-radiusY').parents('.layui-form-item').show()
              radiusZ = sphere.style.radiusZ
              $('#sphere-radiusZ').parents('.layui-form-item').show()
              offsetHeight = sphere.style.offsetHeight
              $('#sphere-offsetHeight').parents('.layui-form-item').show()
            } else {
              $('#sphere-height').parents('.layui-form-item').show()
              $('#sphere-radius').parents('.layui-form-item').show()
              $('#sphere-innerRadius').parents('.layui-form-item').show()
              $('#sphere-minimumCone').parents('.layui-form-item').show()
              $('#sphere-maximumCone').parents('.layui-form-item').show()
              $('#sphere-minimumClock').parents('.layui-form-item').show()
              $('#sphere-maximumClock').parents('.layui-form-item').show()

              if (typeof sphere.style.material !== 'undefined') {
                if (typeof sphere.style.material.uniforms !== 'undefined') {
                  switch (sphere.style.material.type) {
                    case Cesium.Material.ImageType:
                      if (
                        typeof sphere.style.material.uniforms.image !==
                        'undefined'
                      ) {
                        image = sphere.style.material.uniforms.image
                        $('#sphere-image').parents('.layui-form-item').show()
                      }
                      break
                    case Cesium.Material.GridType:
                      if (
                        typeof sphere.style.material.uniforms.color !==
                        'undefined'
                      ) {
                        materialColor = sphere.style.material.uniforms.color
                        $('#sphere-materialColor')
                          .parents('.layui-form-item')
                          .show()
                      }
                      if (
                        typeof sphere.style.material.uniforms.cellAlpha !==
                        'undefined'
                      ) {
                        cellAlpha = sphere.style.material.uniforms.cellAlpha
                        $('#sphere-cellAlpha')
                          .parents('.layui-form-item')
                          .show()
                      }
                      break
                    case Cesium.Material.PolylineTrailLinkType:
                      if (
                        typeof sphere.style.material.uniforms.color !==
                        'undefined'
                      ) {
                        materialColor = sphere.style.material.uniforms.color
                        $('#sphere-materialColor')
                          .parents('.layui-form-item')
                          .show()
                      }
                      if (
                        typeof sphere.style.material.uniforms.image !==
                        'undefined'
                      ) {
                        image = sphere.style.material.uniforms.image
                        $('#sphere-image').parents('.layui-form-item').show()
                      }
                      if (
                        typeof sphere.style.material.uniforms.duration !==
                        'undefined'
                      ) {
                        duration = sphere.style.material.uniforms.duration
                        $('#sphere-duration').parents('.layui-form-item').show()
                      }
                      if (
                        typeof sphere.style.material.uniforms.direction !==
                        'undefined'
                      ) {
                        direction = sphere.style.material.uniforms.direction
                        $('#sphere-direction')
                          .parents('.layui-form-item')
                          .show()
                      }
                      break
                    default:
                      break
                  }
                }
              } else {
                $('#sphere-color').parents('.layui-form-item').show()
              }
            }

            let formParam = {
              color: color.toCssHexString(),
              radius: radius,
              innerRadius: innerRadius,
              height: height,
              minimumCone: minimumCone,
              maximumCone: maximumCone,
              minimumClock: minimumClock,
              maximumClock: maximumClock,
              materialColor: materialColor.toCssHexString(),
              image: image,
              duration: duration,
              direction: direction,
              cellAlpha: cellAlpha,
              radiusX: radiusX,
              radiusY: radiusY,
              radiusZ: radiusZ,
              offsetHeight: offsetHeight
            }
            layui.form.val('example', formParam)

            colorpicker.render({
              elem: '#sphere-color',
              color: color.toCssHexString(),
              done: function (color) {
                $('#sphere-color-input').val(color)
                sphere.style.color = Cesium.Color.fromCssColorString(color)
              }
            })
            colorpicker.render({
              elem: '#sphere-materialColor',
              color: materialColor.toCssHexString(),
              done: function (color) {
                $('#sphere-materialColor-input').val(color)
                if (
                  typeof sphere.style.material !== 'undefined' &&
                  typeof sphere.style.material.uniforms !== 'undefined'
                ) {
                  sphere.style.material.uniforms.color =
                    Cesium.Color.fromCssColorString(color)
                }
              }
            })
            //这个时候展开编辑面板
            $('#editPanel').show()
          },
          getGraphic: function () {
            graphicsLayer.stopDrawing()
          }
        })
      }

      //圆球1
      function addColorSphere1() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic1 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(113.9853, 29.9939, 0)],
          style: {
            color: Cesium.Color.SPRINGGREEN,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic1)
      }

      //圆球2
      function addSemiSphere2() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic2 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.0853, 29.9939, 0)],
          style: {
            radius: 3000,
            height: 100,
            // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/Material.html
            material: Cesium.Material.fromType(Cesium.Material.ImageType, {
              image:
                'http://webclient.smaryun.com:8200/NoneSpatialData/image/earth.jpg',
              repeat: new Cesium.Cartesian2(1.0, 1.0)
            })
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic2)
      }

      //圆球3，html材质
      function addSemiSphere3() {
        //先将html可见
        document.getElementById('htmlGraph').style.display = 'block'
        //再利用html2canvas转换成图片
        html2canvas(document.getElementById('htmlGraph'), {
          //canvas宽度
          width: 200,
          //canvas高度
          height: 200,
          //canvas分辨率，越大越清晰
          scale: 2
        }).then(function (canvas) {
          document.getElementById('htmlGraph').style.display = 'none'
          //在这里可以拿到base64编码的图片
          let dataUrl = canvas.toDataURL('image/png', 1.0)
          // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
          let sphereGraphic = new zondy.cesium.Graphic({
            type: 'sphere',
            positions: [Cesium.Cartesian3.fromDegrees(114.1853, 29.9939, 0)],
            style: {
              // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/Material.html
              material: Cesium.Material.fromType(Cesium.Material.ImageType, {
                //图片路径
                image: dataUrl,
                //x、y轴重复次数
                repeat: new Cesium.Cartesian2(1.0, 1.0)
              }),
              radius: 3000,
              height: 100
            }
          })
          //将标绘点添加入标绘图层
          graphicsLayer.addGraphic(sphereGraphic)
        })
      }

      //圆球4
      function addSemiSphere4() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic4 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.2853, 29.9939, 0)],
          style: {
            color: Cesium.Color.LIGHTBLUE,
            maximumCone: Math.PI / 2,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic4)
      }

      //圆球5
      function addSemiSphere5() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic5 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.3853, 29.9939, 0)],
          style: {
            color: Cesium.Color.BLUEVIOLET,
            minimumCone: (Math.PI * 2) / 3,
            maximumCone: Math.PI,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic5)
      }

      //圆球6
      function addSemiSphere6() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic6 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.4853, 29.9939, 0)],
          style: {
            color: Cesium.Color.CADETBLUE,
            maximumClock: Math.PI,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic6)
      }

      //圆球7
      function addSemiSphere7() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic7 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.5853, 29.9939, 0)],
          style: {
            color: Cesium.Color.CHOCOLATE,
            minimumClock: Math.PI,
            maximumClock: Math.PI * 2,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic7)
      }

      //圆球8
      function addSemiSphere8() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic8 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(113.9953, 29.8939, 0)],
          style: {
            color: Cesium.Color.INDIANRED,
            //最大锥角
            maximumCone: Math.PI / 2,
            //最小时钟角
            minimumClock: Math.PI / 2,
            //最大时钟角
            maximumClock: Math.PI + 3,
            radius: 3000,
            innerRadius: 1,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic8)
      }

      //圆球9
      function addSemiSphere9() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic9 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.0853, 29.8939, 0)],
          style: {
            color: Cesium.Color.DARKCYAN,
            minimumCone: Math.PI / 3,
            maximumCone: Math.PI / 2,
            minimumClock: Math.PI - 0.4,
            maximumClock: Math.PI + 0.4,
            innerRadius: 1,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic9)
      }

      //圆球10
      function addSemiSphere10() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic10 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.1853, 29.8939, 0)],
          style: {
            color: Cesium.Color.FUCHSIA,
            minimumCone: Math.PI / 2,
            maximumCone: Math.PI / 2,
            minimumClock: Math.PI / 2,
            maximumClock: Math.PI / 2 + 1.2,
            radius: 3000,
            innerRadius: 1,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic10)
      }

      //圆球11
      function addSemiSphere11() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic11 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.2853, 29.8939, 0)],
          style: {
            color: Cesium.Color.RED,
            minimumCone: Math.PI / 2,
            maximumCone: Math.PI / 2,
            minimumClock: Math.PI / 2,
            maximumClock: Math.PI * 1.5,
            innerRadius: 2000,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic11)
      }

      //圆球12
      function addSemiSphere12() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic12 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.3853, 29.8939, 0)],
          style: {
            color: Cesium.Color.DARKORCHID,
            minimumCone: Math.PI / 2,
            maximumCone: Math.PI / 2,
            innerRadius: 1000,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic12)
      }

      //圆球13
      function addSemiSphere13() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic13 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.4853, 29.8939, 0)],
          style: {
            color: Cesium.Color.AQUAMARINE,
            minimumCone: Math.PI / 3,
            maximumCone: (Math.PI * 2) / 3,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic13)
      }

      //圆球14
      function addSemiSphere14() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic14 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.5853, 29.8939, 0)],
          style: {
            color: Cesium.Color.CRIMSON,
            minimumCone: Math.PI / 3,
            maximumCone: (Math.PI * 2) / 3,
            innerRadius: 2000,
            radius: 3000,
            height: 100
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic14)
      }

      //圆球15
      function addSemiSphere15() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic15 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(113.9853, 29.7939, 0)],
          style: {
            color: Cesium.Color.FUCHSIA,
            maximumCone: Math.PI / 2,
            radius: 3000,
            height: 100,
            // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/Material.html
            material: Cesium.Material.fromType(Cesium.Material.GridType, {
              color: Cesium.Color.CORNFLOWERBLUE,
              cellAlpha: 0.2,
              lineCount: new Cesium.Cartesian2(8.0, 8.0),
              lineThickness: new Cesium.Cartesian2(1.0, 1.0),
              lineOffset: new Cesium.Cartesian2(0.0, 0.0)
            })
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic15)
      }

      //圆球16
      function addTrailSphere16() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic16 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.0853, 29.7939, 0)],
          style: {
            color: Cesium.Color.DEEPSKYBLUE,
            maximumCone: Math.PI / 2,
            radius: 3000,
            height: 100,
            // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Cesium.Material.html
            material: Cesium.Material.fromType(
              Cesium.Material.PolylineTrailLinkType,
              {
                image:
                  'http://webclient.smaryun.com:8200/NoneSpatialData/image/arrowhead.png',
                duration: 1000,
                direction: 2.0,
                color: Cesium.Color.YELLOW,
                repeat: new Cesium.Cartesian2(20.0, 1.0)
              }
            )
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic16)
      }

      //圆球17
      function addTrailSphere17() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic17 = new zondy.cesium.Graphic({
          type: 'sphere',
          positions: [Cesium.Cartesian3.fromDegrees(114.1853, 29.7939, 0)],
          style: {
            color: Cesium.Color.RED,
            maximumCone: Math.PI / 2,
            radius: 3000,
            height: 100,
            material: Cesium.Material.fromType(
              Cesium.Material.PolylineTrailLinkType,
              {
                image:
                  'http://webclient.smaryun.com:8200/NoneSpatialData/image/lineClr.png',
                duration: 1000,
                direction: 4.0,
                color: Cesium.Color.AQUA,
                repeat: new Cesium.Cartesian2(1.0, 1.0)
              }
            )
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic17)
      }

      //圆球18
      function addEllipsoid18() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Graphic.html
        let sphereGraphic18 = new zondy.cesium.Graphic({
          type: 'ellipsoid',
          positions: [Cesium.Cartesian3.fromDegrees(114.2853, 29.7939, 0)],
          style: {
            color: Cesium.Color.RED,
            radiusX: 3000,
            radiusY: 2000,
            radiusZ: 1000,
            offsetHeight: 600
          }
        })
        //将标绘添加入标绘图层
        graphicsLayer.addGraphic(sphereGraphic18)
      }

      //添加天地图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      //视角跳转
      function flyTo() {
        //飞到指定视角
        sceneView.flyTo({
          center: [114.3028, 29.8737, 92000]
        })
      }

      //初始化示例UI
      function initUI() {
        //半径
        $('#sphere-radius').bind('input propertychange', function () {
          sphere.style.radius = clampNumberValue($('#sphere-radius').val(), [0])
        })

        //内部半径
        $('#sphere-innerRadius').bind('input propertychange', function () {
          sphere.style.innerRadius = clampNumberValue(
            $('#sphere-innerRadius').val(),
            [0]
          )
        })

        //离地高度
        $('#sphere-height').bind('input propertychange', function () {
          sphere.style.height = clampNumberValue($('#sphere-height').val())
        })

        //最小锥角
        $('#sphere-minimumCone').bind('input propertychange', function () {
          sphere.style.minimumCone = clampNumberValue(
            $('#sphere-minimumCone').val()
          )
        })

        //最大锥角
        $('#sphere-maximumCone').bind('input propertychange', function () {
          sphere.style.maximumCone = clampNumberValue(
            $('#sphere-maximumCone').val()
          )
        })

        //最小时钟角
        $('#sphere-minimumClock').bind('input propertychange', function () {
          sphere.style.minimumClock = clampNumberValue(
            $('#sphere-minimumClock').val()
          )
        })

        //最大时钟角
        $('#sphere-maximumClock').bind('input propertychange', function () {
          sphere.style.maximumClock = clampNumberValue(
            $('#sphere-maximumClock').val()
          )
        })

        //材质底图
        $('#sphere-image').bind('input propertychange', function () {
          sphere.style.material.uniforms.image = $('#sphere-image').val()
        })

        //流动速度
        $('#sphere-duration').bind('input propertychange', function () {
          sphere.style.material.uniforms.duration = clampNumberValue(
            $('#sphere-duration').val(),
            [0]
          )
        })

        //流动方向
        $('#sphere-direction').bind('input propertychange', function () {
          sphere.style.material.uniforms.direction = clampNumberValue(
            $('#sphere-direction').val(),
            [0]
          )
        })

        //透明度
        $('#sphere-cellAlpha').bind('input propertychange', function () {
          sphere.style.material.uniforms.cellAlpha = clampNumberValue(
            $('#sphere-cellAlpha').val(),
            [0]
          )
        })

        //X半径
        $('#sphere-radiusX').bind('input propertychange', function () {
          sphere.style.radiusX = clampNumberValue($('#sphere-radiusX').val(), [
            0
          ])
        })

        //Y半径
        $('#sphere-radiusY').bind('input propertychange', function () {
          sphere.style.radiusY = clampNumberValue($('#sphere-radiusY').val(), [
            0
          ])
        })

        //Z半径
        $('#sphere-radiusZ').bind('input propertychange', function () {
          sphere.style.radiusZ = clampNumberValue($('#sphere-radiusZ').val(), [
            0
          ])
        })

        //椭球离地高度
        $('#sphere-offsetHeight').bind('input propertychange', function () {
          sphere.style.offsetHeight = clampNumberValue(
            $('#sphere-offsetHeight').val()
          )
        })

        layui.use('colorpicker', function () {
          //填充颜色
          colorpicker.render({
            elem: '#sphere-color',
            color: '#9dfafe',
            done: function (color) {
              $('#sphere-color-input').val(color)
              sphere.style.color = Cesium.Color.fromCssColorString(color)
            }
          })
          //材质填充颜色
          colorpicker.render({
            elem: '#sphere-materialColor',
            color: '#9dfafe',
            done: function (color) {
              $('#sphere-materialColor-input').val(color)
              sphere.style.material.uniforms.color =
                Cesium.Color.fromCssColorString(color)
            }
          })
        })
      }

      //开始绘制
      function startDrawing() {
        $('#editPanel').hide()
        graphicsLayer.startDrawing({
          type: 'sphere',
          style: {
            color: Cesium.Color.fromCssColorString(
              $('#sphere-color-input').val()
            ),
            height: clampNumberValue($('#sphere-height').val(), [0])
          }
        })
      }

      //删除
      function deleteLabel() {
        sphere.remove()
        $('#editPanel').hide()
      }
      // 获取合法的number数据输入
      function clampNumberValue(inputValue, limits) {
        let max, min
        if (Array.isArray(limits) && limits.length > 0) {
          if (limits.length === 1) {
            min = limits[0]
          } else {
            max = limits[1]
          }
        }
        let value = Number(inputValue)
        if (Number.isNaN(value)) {
          if (typeof min === 'number') {
            return min
          } else {
            return 0
          }
        }
        if (typeof min === 'number' && value <= min) {
          return min
        }
        if (typeof max === 'number' && value >= max) {
          return max
        }
        return value
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div
      class="layui-panel layui-panel-right"
      style="text-align: center; width: 140px; padding: 10px"
    >
      <button
        onclick="startDrawing()"
        style="margin: 0 auto !important"
        type="button"
        class="layui-btn layui-btn-normal graphic-button-margin"
      >
        添加圆球
      </button>
    </div>
    <div
      class="layui-panel layui-panel-right"
      id="editPanel"
      style="display: none; top: 70px"
    >
      <form class="layui-form" action="" lay-filter="example">
        <div class="sample-main-panel">
          <div class="layui-form-item">
            <label class="layui-form-label">填充颜色</label>
            <div
              class="layui-input-inline"
              style="width: 145px; margin-left: 10px"
            >
              <input
                disabled
                type="text"
                name="color"
                value="#00ffff"
                placeholder="填充颜色"
                class="layui-input"
                id="sphere-color-input"
              />
            </div>
            <div class="layui-inline">
              <div id="sphere-color"></div>
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">半径</label>
            <div class="layui-input-block" style="width: 183px">
              <input
                id="sphere-radius"
                value="1000"
                type="text"
                name="radius"
                autocomplete="off"
                placeholder="40"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">内部半径</label>
            <div class="layui-input-block" style="width: 183px">
              <input
                id="sphere-innerRadius"
                value="1000"
                type="text"
                name="innerRadius"
                autocomplete="off"
                placeholder="40"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">离地高度</label>
            <div class="layui-input-block" style="width: 183px">
              <input
                id="sphere-height"
                type="text"
                value="100"
                name="height"
                autocomplete="off"
                placeholder="100"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">最小锥角</label>
            <div class="layui-input-block" style="width: 183px">
              <input
                id="sphere-minimumCone"
                type="text"
                value=""
                name="minimumCone"
                autocomplete="off"
                placeholder="100"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">最大锥角</label>
            <div class="layui-input-block" style="width: 183px">
              <input
                id="sphere-maximumCone"
                type="text"
                value=""
                name="maximumCone"
                autocomplete="off"
                placeholder="100"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">最小时钟角</label>
            <div class="layui-input-block" style="width: 183px">
              <input
                id="sphere-minimumClock"
                type="text"
                value=""
                name="minimumClock"
                autocomplete="off"
                placeholder="100"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">最大时钟角</label>
            <div class="layui-input-block" style="width: 183px">
              <input
                id="sphere-maximumClock"
                type="text"
                value=""
                name="maximumClock"
                autocomplete="off"
                placeholder="100"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">材质颜色</label>
            <div
              class="layui-input-inline"
              style="width: 145px; margin-left: 10px"
            >
              <input
                disabled
                type="text"
                value="#00ffff"
                placeholder="材质颜色"
                class="layui-input"
                id="sphere-materialColor-input"
                name="materialColor"
              />
            </div>
            <div class="layui-inline">
              <div id="sphere-materialColor"></div>
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">材质底图</label>
            <div class="layui-input-block" style="width: 183px">
              <input
                id="sphere-image"
                value=""
                type="text"
                name="image"
                autocomplete="off"
                placeholder="40"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">流动速度</label>
            <div class="layui-input-block">
              <input
                id="sphere-duration"
                value="1000"
                type="text"
                name="duration"
                lay-verify="duration"
                autocomplete="off"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">流动方向</label>
            <div class="layui-input-block">
              <input
                id="sphere-direction"
                value="1"
                type="text"
                name="direction"
                lay-verify="direction"
                autocomplete="off"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">透明度</label>
            <div class="layui-input-block">
              <input
                id="sphere-cellAlpha"
                value="1"
                type="text"
                name="cellAlpha"
                autocomplete="off"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">X半径</label>
            <div class="layui-input-block">
              <input
                id="sphere-radiusX"
                value=""
                type="text"
                name="radiusX"
                autocomplete="off"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">Y半径</label>
            <div class="layui-input-block">
              <input
                id="sphere-radiusY"
                value=""
                type="text"
                name="radiusY"
                autocomplete="off"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">Z半径</label>
            <div class="layui-input-block">
              <input
                id="sphere-radiusZ"
                value=""
                type="text"
                name="radiusZ"
                autocomplete="off"
                class="layui-input"
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">离地高度</label>
            <div class="layui-input-block">
              <input
                id="sphere-offsetHeight"
                value=""
                type="text"
                name="offsetHeight"
                autocomplete="off"
                class="layui-input"
              />
            </div>
          </div>
        </div>
        <div class="sample-button-panel">
          <button
            onclick="$('#editPanel').hide()"
            style="float: right; width: auto; margin-right: 0 !important"
            type="button"
            class="layui-btn layui-btn-normal graphic-button-margin"
          >
            关闭面板
          </button>
          <span
            onclick="deleteLabel()"
            style="
              cursor: pointer;
              float: right;
              line-height: 32px;
              margin-right: 15px;
            "
            >删除标绘</span
          >
        </div>
      </form>
    </div>
    <div id="htmlGraph">我是html元素</div>
  </body>
  <style>
    #htmlGraph {
      width: 200px;
      height: 200px;
      background: linear-gradient(
        -45deg,
        #0acf00 25%,
        #78c9db 0,
        #78c9db 50%,
        #0acf00 0,
        #0acf00 75%,
        #78c9db 0
      );
      background-size: 30px 30px;
      display: none;
      font-size: 28px;
      font-weight: bold;
      line-height: 200px;
      color: red;
      text-align: center;
    }
  </style>
</html>
