<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>地表透明度独立控制</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/tool.css"/>
    <script>
      'use strict'
      // 定义三维视图的主要类
      let map, sceneView, viewer, independentTranslucency, transformEditor
      // 图层layer
      let tdtLayer, hbLayer, dztLayer
      // UI滑块实例
      let tdtSlider, hbSlider
      let $ = layui.jquery
      // 透明度默认值
      let defaultAlpha = 0.5,
        defaultAlphaOfTdt = 0.5,
        defaultAlphaOfHb = 0.5

      /**
       * 实例化地表透明度对象
       * 单独控制地表透明度和影像图层的透明度，能够在开启地表透明后使部分影像图层不受地表透明的影响
       * 1、imageryLayers 不为空数组时，使用该类的地表透明方式，设置参数如下：
       * globeFaceAlpha：地表的透明度，若设置该参数则globeFaceAlphaByDistance不生效；
       * globeFaceAlphaByDistance：地表的透明度根据视点距离的变化范围，当globeFaceAlpha为undefined时生效；
       * 2、imageryLayers 为空数组时，使用原生的地表透明方式，设置参数如下：
       * frontFaceAlpha：地表正面的透明度；
       * frontFaceAlphaByDistance ：地表正面的透明度根据视点距离的变化范围；
       * backFaceAlpha：地表背面的透明度；
       * backFaceAlphaByDistance：地表背面的透明度根据视点距离的变化范围；
       * rectangle：将地表透明的区域限制在一个矩形范围内。
       */
      function initIndependentTranslucency() {
        independentTranslucency = new zondy.cesium.GlobeIndependentTranslucency(
          viewer
        )
        // 设置不受地表透明影响的影像图层
        independentTranslucency.imageryLayers = [hbLayer]
        // 设置地表透明度，hbLayer不受影响
        independentTranslucency.globeFaceAlpha = defaultAlpha
        // 开启地表透明
        independentTranslucency.enabled = true
      }

      // 通过checked的值更新允许单独控制透明度的图层列表imageryLayers
      function updateImageryLayers() {
        let imageryLayers = []
        if (document.querySelector('input[name=tdtImg]').checked) {
          tdtLayer.alpha = defaultAlphaOfTdt
          imageryLayers.push(tdtLayer)
        } else {
          tdtLayer.alpha = 1
        }

        if (document.querySelector('input[name=hbImg]').checked) {
          hbLayer.alpha = defaultAlphaOfHb
          imageryLayers.push(hbLayer)
        } else {
          hbLayer.alpha = 1
        }

        independentTranslucency.imageryLayers = imageryLayers
        // 判断imageryLayers是否空数组，不同方式设置地表透明度
        if (imageryLayers.length > 0) {
          independentTranslucency.globeFaceAlpha = defaultAlpha
        } else {
          independentTranslucency.frontFaceAlpha = defaultAlpha
        }
      }

      // 初始化编辑工具
      function initModelTransformTool(layer) {
        //初始化js编辑工具
        transformEditor = new Cesium.ModelTransformTool(layer)
        //初始化图形化编辑工具
        transformEditor.initModelEditor(viewer)
      }

      // 移动、缩放模型
      function moveAndScala() {
        // 移动
        transformEditor.setTranslation(112.21, 31.1, -50000)
        // 放大
        transformEditor.setScala(100, 100, 100)
      }

      //飞到指定视角
      function flyTo() {
        sceneView.flyTo({
          center: [112.21, 31.1, 700000]
        })
      }

      // 添加地质体模型
      function addModel() {
        const igsSceneLayer = new zondy.layer.IGSSceneLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Scene/地质体模型/SceneServer',
          duration: 2,
          fillClip: true,
          autoReset: false,
          maximumScreenSpaceError: 16
        })
        map.add(igsSceneLayer)
        // 图层加载完毕
        igsSceneLayer.on('layerview-created', function (result) {
          dztLayer = sceneView.getInnerLayer(result.layer)[0]
          // 使用模型编辑工具把地质体模型移动到湖北区域
          initModelTransformTool(dztLayer)
          // 移动、缩放模型
          moveAndScala()
        })
      }

      // 添加IGS瓦片图层
      function addIgsTileLayer() {
        const igsTileLayer = new zondy.layer.IGSTileLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Tile/湖北省_4326_normal_3-10/TileServer',
          autoReset: false
        })
        map.add(igsTileLayer)
        //注册图层添加完毕事件
        igsTileLayer.on('layerview-created', function (result) {
          hbLayer = sceneView.getInnerLayer(result.layer)
          hbLayer.alpha = defaultAlphaOfHb
          // 实例化地表透明度对象
          initIndependentTranslucency()
          // 视角跳转
          flyTo()
        })
      }

      // 天地图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
        //注册图层添加完毕事件
        TDTLayer.on('layerview-created', function (result) {
          tdtLayer = sceneView.getInnerLayer(result.layer)
          if (independentTranslucency) {
            independentTranslucency.imageryLayers = [hbLayer]
          }
        })
      }

      //初始化示例UI操作
      function initUI() {
        layui.use(function () {
          // 地表透明
          layui.form.on('switch(enabled)', function (data) {
            let value = data.elem.checked
            independentTranslucency.enabled = value
            if (value) {
              $('.control-area').show()
            } else {
              $('.control-area').hide()
            }
          })

          //地表透明度
          layui.slider.render({
            elem: '#globeFaceAlpha',
            value: defaultAlpha * 10,
            min: 0.0,
            max: 10.0,
            theme: 'rgb(102 147 251)',
            //自定义提示文本
            setTips: function (value) {
              return value / 10
            },
            change: function (value) {
              independentTranslucency.globeFaceAlpha = value / 10
              independentTranslucency.frontFaceAlpha = value / 10
              defaultAlpha = value / 10
            }
          })

          //是否单独控制天地图透明度
          layui.form.on('checkbox(tdtImg)', function (data) {
            if (data.elem.checked) {
              $('.tdt-slider').show()
            } else {
              $('.tdt-slider').hide()
            }
            updateImageryLayers()
          })

          //是否单独控制湖北影像图层透明度
          layui.form.on('checkbox(hbImg)', function (data) {
            if (data.elem.checked) {
              $('.hb-slider').show()
            } else {
              $('.hb-slider').hide()
            }
            updateImageryLayers()
          })

          //天地图透明度
          tdtSlider = layui.slider.render({
            elem: '#tdtAlpha',
            value: defaultAlphaOfTdt * 10,
            min: 0.0,
            max: 10.0,
            theme: 'rgb(102 147 251)',
            setTips: function (value) {
              return value / 10
            },
            change: function (value) {
              tdtLayer.alpha = value / 10
              defaultAlphaOfTdt = value / 10
            }
          })

          //湖北影像图层透明度
          hbSlider = layui.slider.render({
            elem: '#hbAlpha',
            value: defaultAlphaOfHb * 10,
            min: 0.0,
            max: 10.0,
            theme: 'rgb(102 147 251)',
            setTips: function (value) {
              return value / 10
            },
            change: function (value) {
              hbLayer.alpha = value / 10
              defaultAlphaOfHb = value / 10
            }
          })
        })
      }

      //地图初始化函数
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
        //开启地形深度测试
        viewer.scene.globe.depthTestAgainstTerrain = true
      }

      //地图初始化函数
      function init() {
        //初始化球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //加载天地图
        addTDT()
        //加载影像图层
        addIgsTileLayer()
        //加载地质体
        addModel()
        //初始化示例UI操作
        initUI()
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right">
      <form class="layui-form" action="">
        <div class="layui-form-item">
          <label class="layui-form-label">地表透明</label>
          <div class="layui-input-block">
            <input
              type="checkbox"
              name="enabled"
              id="enabled"
              lay-filter="enabled"
              lay-skin="switch"
              lay-text="开启|关闭"
              checked
            />
          </div>
        </div>
        <div class="layui-form-item control-area">
          <label class="layui-form-label">地表透明度</label>
          <div class="layui-input-block sample-slider globeFaceAlpha-slider">
            <div id="globeFaceAlpha"></div>
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">允许单独控制透明度</label>
          <div class="layui-input-block alpha-block">
            <div class="alpha-block-hb">
              <input
                type="checkbox"
                name="hbImg"
                lay-filter="hbImg"
                title="湖北影像图层"
                checked
                lay-skin="primary"
              />
              <div class="layui-input-block sample-slider hb-slider">
                <div id="hbAlpha"></div>
              </div>
            </div>
            <div class="alpha-block-tdt">
              <input
                type="checkbox"
                name="tdtImg"
                lay-filter="tdtImg"
                title="天地图"
                lay-skin="primary"
              />
              <div class="layui-input-block sample-slider tdt-slider">
                <div id="tdtAlpha"></div>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>

    <style type="text/css">
      .layui-panel-right {
        width: 412px;
      }

      .layui-form-switch {
        margin-top: 6px;
      }

      .layui-form-checkbox[lay-skin='primary'] span {
        color: #e1e1e1;
      }

      .layui-form-checked[lay-skin='primary'] i {
        border-color: #6693fb !important;
        background-color: #6693fb;
      }

      .layui-form-checkbox {
        float: left;
        padding-bottom: 6px;
      }

      .layui-form-label {
        width: 140px;
      }

      .globeFaceAlpha-slider,
      .alpha-block {
        width: 225px;
      }

      .tdt-slider {
        width: 100px;
        display: none;
      }

      .hb-slider {
        width: 100px;
      }

      .alpha-block-tdt:after,
      .alpha-block-hb:after {
        content: '';
        display: block;
        clear: both;
      }
    </style>
  </body>
</html>
