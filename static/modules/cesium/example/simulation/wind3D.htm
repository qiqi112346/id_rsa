<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>雨天气</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>
    <!--netcdf库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/netcdf/netcdfjs.min.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/visual.css"/>
    <script>
      'use strict'
      //取得jquery对象
      let $ = layui.$
      //滑动条管理器对象
      let slider = layui.slider
      //定义三维视图的主要类
      let map, sceneView, viewer
      //风场类
      let particleObj = null
      //添加风场的参数
      let optionsWind = {
        particlesNumber: 150000, //最大粒子数[0-200000]
        fadeOpacity: 0.95, //拖尾透明度[0.5-1]
        speedFactor: 0.5, //粒子速度因子[0.1-3]
        lineWidth: 2, //线宽[1-12]
        colors: [
          [0.015686, 0.054902, 0.847059],
          [0.12549, 0.313725, 1.0],
          [0.254902, 0.588235, 1.0],
          [0.427451, 0.756863, 1.0],
          [0.52549, 0.85098, 1.0],
          [0.611765, 0.933333, 1.0],
          [0.686275, 0.960784, 1.0],
          [0.807843, 1.0, 1.0],
          [1.0, 0.996078, 0.278431],
          [1.0, 0.921569, 0.0],
          [1.0, 0.768627, 0.0],
          [1.0, 0.564706, 0.0],
          [1.0, 0.282353, 0.0],
          [1.0, 0.0, 0.0],
          [0.835294, 0.0, 0.0],
          [0.619608, 0.0, 0.0]
        ]
      }

      //地图初始化函数
      function init() {
        //初始化球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //添加天地图
        addTDT()
        //初始化示例UI
        initUI()
      }

      //初始化球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
      }

      //添加天地图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      // 解析nc格式的风场数据
      function loadNetCDF(filePath) {
        return new Promise(function (resolve, reject) {
          var request = new XMLHttpRequest()
          request.open('GET', filePath)
          request.responseType = 'arraybuffer'

          request.onload = function () {
            var arrayToMap = function (array) {
              return array.reduce(function (map, object) {
                map[object.name] = object
                return map
              }, {})
            }

            var NetCDF = new netcdfjs(request.response)
            var data = {}

            var dimensions = arrayToMap(NetCDF.dimensions)
            data.dimensions = {}
            data.dimensions.lon = dimensions['lon'].size
            data.dimensions.lat = dimensions['lat'].size
            data.dimensions.lev = dimensions['lev'].size

            var variables = arrayToMap(NetCDF.variables)
            var uAttributes = arrayToMap(variables['U'].attributes)
            var vAttributes = arrayToMap(variables['V'].attributes)

            data.lon = {}
            data.lon.array = new Float32Array(
              NetCDF.getDataVariable('lon').flat()
            )
            data.lon.min = Math.min(...data.lon.array)
            data.lon.max = Math.max(...data.lon.array)

            data.lat = {}
            data.lat.array = new Float32Array(
              NetCDF.getDataVariable('lat').flat()
            )
            data.lat.min = Math.min(...data.lat.array)
            data.lat.max = Math.max(...data.lat.array)

            data.lev = {}
            data.lev.array = new Float32Array(
              NetCDF.getDataVariable('lev').flat()
            )
            data.lev.min = Math.min(...data.lev.array)
            data.lev.max = Math.max(...data.lev.array)
            // data.lev = {
            //     array: [0].flat(),
            //     min: 0,
            //     max: 0
            // };

            data.U = {}
            let U1 = NetCDF.getDataVariable('U').flat()
            data.U.array = new Float32Array(U1.length * 4)
            for (let i = 0; i < U1.length; i++) {
              data.U.array[i * 4] = U1[i]
              data.U.array[i * 4 + 1] = U1[i]
              data.U.array[i * 4 + 2] = U1[i]
              data.U.array[i * 4 + 3] = U1[i]
            }
            //data.U.array = new Float32Array(NetCDF.getDataVariable('U').flat() * 4);
            data.U.min = uAttributes['min'].value
            data.U.max = uAttributes['max'].value

            data.V = {}
            let V1 = NetCDF.getDataVariable('V').flat()
            data.V.array = new Float32Array(V1.length * 4)
            for (let i = 0; i < V1.length; i++) {
              data.V.array[i * 4] = V1[i]
              data.V.array[i * 4 + 1] = V1[i]
              data.V.array[i * 4 + 2] = V1[i]
              data.V.array[i * 4 + 3] = V1[i]
            }
            // data.V.array = new Float32Array(NetCDF.getDataVariable('V').flat());
            data.V.min = vAttributes['min'].value
            data.V.max = vAttributes['max'].value

            resolve(data)
          }

          request.send()
        })
      }

      //初始化示例UI
      function initUI() {
        // 最大粒子数
        slider.render({
          elem: '#particlesNumber',
          value: optionsWind.particlesNumber,
          min: 10000,
          max: 200000,
          step: 1000,
          theme: 'rgb(102 147 251)',
          input: true,
          setTips: function (value) {
            return `${value}`
          },
          change: function (value) {
            $('#particlesNumber-input').val(value)
            if (Cesium.defined(particleObj)) {
              optionsWind.particlesNumber = value
              particleObj.particlesNumber = value
            }
          }
        })
        // 拖尾透明度
        slider.render({
          elem: '#fadeOpacity',
          value: optionsWind.fadeOpacity * 10,
          min: 1,
          max: 9,
          step: 1,
          theme: 'rgb(102 147 251)',
          input: true,
          change: function (value) {
            $('#fadeOpacity-input').val(value)
            if (Cesium.defined(particleObj)) {
              optionsWind.fadeOpacity = value * 0.1
              particleObj.fadeOpacity = value * 0.1
            }
          }
        })
        //粒子速度因子
        slider.render({
          elem: '#speedFactor',
          value: optionsWind.speedFactor * 10,
          min: 1,
          max: 30,
          step: 5,
          theme: 'rgb(102 147 251)',
          input: true,
          setTips: function (value) {
            return `${value}`
          },
          change: function (value) {
            $('#speedFactor-input').val(value)
            if (Cesium.defined(particleObj)) {
              optionsWind.speedFactor = value * 0.1
              particleObj.speedFactor = value * 0.1
            }
          }
        })
        //线宽
        slider.render({
          elem: '#lineWidth',
          value: optionsWind.lineWidth,
          min: 1.0,
          max: 12.0,
          step: 1,
          theme: 'rgb(102 147 251)',
          input: true,
          setTips: function (value) {
            return `${value}`
          },
          change: function (value) {
            $('#lineWidth-input').val(value)
            if (Cesium.defined(particleObj)) {
              optionsWind.lineWidth = value
              particleObj.lineWidth = value
            }
          }
        })
      }

      // 初始化风场
      function createWind() {
        if (viewer && !particleObj) {
          // 先处理数据
          loadNetCDF('http://webclient.smaryun.com:8200/Raster/NetCDF/wind.nc').then(
            (data) => {
              // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/Wind3D.html
              particleObj = new zondy.cesium.Wind3D(viewer, data, optionsWind)
              particleObj.init()
            }
          )
        }
      }

      //移除风场
      function removeRain() {
        if (particleObj) {
          particleObj.remove()
          particleObj = null
        }
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right" id="layui-panel">
      <form class="layui-form" action="">
        <div class="sample-main-panel" id="sample-main-panel">
          <div class="layui-form-item">
            <div class="slideBarDiv">
              最大粒子数
              <div id="particlesNumber" class="demo-slider"></div>
            </div>
          </div>
          <div class="layui-form-item">
            <div class="slideBarDiv">
              拖尾透明度
              <div id="fadeOpacity" class="demo-slider"></div>
            </div>
          </div>
          <div class="layui-form-item">
            <div class="slideBarDiv">
              粒子速度因子
              <div id="speedFactor" class="demo-slider"></div>
            </div>
          </div>
          <div class="layui-form-item">
            <div class="slideBarDiv">
              线宽
              <div id="lineWidth" class="demo-slider"></div>
            </div>
          </div>
        </div>
        <div class="sample-button-panel">
          <button
            onclick="createWind()"
            type="button"
            class="layui-btn layui-btn-normal"
          >
            添加风场
          </button>
          <button
            onclick="removeRain()"
            type="button"
            class="layui-btn layui-btn-normal"
          >
            移除风场
          </button>
        </div>
      </form>
    </div>
    <style>
      .sample-main-panel {
        height: auto;
      }

      .layui-slider {
        top: -20px;
        width: 115px;
        left: 94px;
      }

      .layui-slider-input {
        top: -34px;
      }
    </style>
  </body>
</html>
