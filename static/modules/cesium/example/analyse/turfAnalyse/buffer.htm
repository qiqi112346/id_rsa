<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>缓冲分析(要素缓冲)</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--turf.js库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/turf/turf.min.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
   <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/analyse.css"/>
    <script>
      'use strict'
      let map, sceneView, viewer
      //点、线、面的geojson数据
      let originPointData = {
        type: 'FeatureCollection',
        features: [
          {
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'Point',
              coordinates: [114.24270629882811, 30.622550184776674]
            }
          }
        ]
      }
      let originLineData = {
        type: 'FeatureCollection',
        features: [
          {
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'LineString',
              coordinates: [
                [114.34810638427734, 30.634958017061198],
                [114.2856216430664, 30.554869984737515],
                [114.246826171875, 30.4954261715298]
              ]
            }
          }
        ]
      }
      let originPolygonData = {
        type: 'FeatureCollection',
        features: [
          {
            type: 'Feature',
            properties: {},
            geometry: {
              type: 'Polygon',
              coordinates: [
                [
                  [114.33815002441406, 30.502230042106245],
                  [114.34398651123045, 30.485071542395932],
                  [114.3728256225586, 30.472348632640834],
                  [114.38278198242188, 30.49010107130931],
                  [114.35256958007811, 30.50518809826035],
                  [114.33815002441406, 30.502230042106245]
                ]
              ]
            }
          }
        ]
      }
      //点、线、面数据资源，移除时使用
      let bufferPointDataSource = null
      let bufferPolygonDataSource = null
      let bufferLineDataSource = null

      //初始化
      function init() {
        // 地图初始化
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //加载天地图
        addTDT()
        //飞到指定视角
        flyTo()
        //加载原始的点、线、面数据
        loadOriginData()
      }

      //初始化三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
      }

      //加载天地图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      //设置相机位置
      function flyTo() {
        //飞到指定视角
        sceneView.flyTo({
          center: [114.289398, 30.59418345, 50000.0]
        })
      }

      //先加载点、线、面资源，再进行缓冲区分析
      function loadOriginData() {
        //点
        viewer.dataSources.add(
          Cesium.GeoJsonDataSource.load(originPointData, {
            markerColor: Cesium.Color.fromCssColorString('#4169E1')
          })
        )
        //线
        viewer.dataSources.add(
          Cesium.GeoJsonDataSource.load(originLineData, {
            //折线和多边形轮廓的颜色
            stroke: Cesium.Color.fromCssColorString('#4169E1'),
            //折线和多边形轮廓宽度
            strokeWidth: 15
          })
        )
        //面
        viewer.dataSources.add(
          Cesium.GeoJsonDataSource.load(originPolygonData, {
            //多边形内部颜色
            fill: Cesium.Color.fromCssColorString('#4169E1'),
            //折线和多边形轮廓宽度
            strokeWidth: 15
          })
        )
      }

      //点缓冲按钮触发
      function bufferPoint() {
        buffer(originPointData, '#C69D21').then((res) => {
          //保存缓冲结果资源，移除时使用
          bufferPointDataSource = res
        })
      }

      //线缓冲按钮触发
      function bufferLine() {
        buffer(originLineData, '#ADFF2F').then((res) => {
          //保存缓冲结果资源，移除时使用
          bufferLineDataSource = res
        })
      }

      //面缓冲按钮触发
      function bufferPolygon() {
        buffer(originPolygonData, '#800080').then((res) => {
          //保存缓冲结果资源，移除时使用
          bufferPolygonDataSource = res
        })
      }

      //缓冲分析
      function buffer(originGeoJson, fillColor) {
        //turf.buffer缓冲分析
        let geoJson = turf.buffer(
          //标准geoJson
          originGeoJson,
          //缓冲距离
          1.5,
          {
            //单位：英里
            units: 'miles'
          }
        )
        //移除缓冲结果
        removeAllDataSource()
        //添加缓冲分析结果
        let dataSource = viewer.dataSources.add(
          Cesium.GeoJsonDataSource.load(geoJson, {
            //折线和多边形轮廓的颜色
            stroke: Cesium.Color.fromCssColorString(fillColor).withAlpha(0.7),
            //多边形内部颜色
            fill: Cesium.Color.fromCssColorString(fillColor).withAlpha(0.7),
            //折线和多边形轮廓宽度
            strokeWidth: 1,
            //设置指定多边形是否为轮廓的属性，不设置true，轮廓不显示
            outline: true
          })
        )
        //视角飞行
        viewer.flyTo(dataSource, { duration: 0.5 })
        return dataSource
      }

      //每次缓冲之前，将之前的缓冲结果删除
      function removeAllDataSource() {
        //删除点缓冲结果
        if (bufferPointDataSource) {
          viewer.dataSources.remove(bufferPointDataSource)
        }
        //删除线缓冲结果
        if (bufferLineDataSource) {
          viewer.dataSources.remove(bufferLineDataSource)
        }
        //删除面缓冲结果
        if (bufferPolygonDataSource) {
          viewer.dataSources.remove(bufferPolygonDataSource)
        }
      }
    </script>
    <style>
      .sample-button-panel {
        width: 271px;
      }
    </style>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right" style="width: 302px">
      <form class="layui-form" action="">
        <div class="sample-button-panel">
          <button
            type="button"
            class="layui-btn layui-btn-sm layui-btn-normal"
            onclick="bufferPoint()"
          >
            点缓冲分析
          </button>
          <button
            type="button"
            class="layui-btn layui-btn-sm layui-btn-normal"
            onclick="bufferLine()"
          >
            线缓冲分析
          </button>
          <button
            type="button"
            class="layui-btn layui-btn-sm layui-btn-normal"
            onclick="bufferPolygon()"
          >
            面缓冲分析
          </button>
        </div>
      </form>
    </div>
  </body>
</html>
