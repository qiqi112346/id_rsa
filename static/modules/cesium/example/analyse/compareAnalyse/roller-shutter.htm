<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>卷帘</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>
    <!--引入mapv-->
    <script type="text/javascript" src="http://webclient.smaryun.com/static/libs/cdn/mapv/mapv.min.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/visual.css"/>
    <script>
      'use strict'
      let $ = layui.$
      // 定义三维视图的主要类
      let map, sceneView, viewer
      let scene
      let tdtLyr
      let bdLyr
      let currentLyr, currentLayer, currentDataSource
      let currentSwipeEnabled = true,
        currentSwipeInverse = -1

      // 添加天地图影像
      async function addTDT() {
        // // 通过fromUrl的方式加载天地图
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
        TDTLayer.on("layerview-created", function (result) {
          const tdtLyr = sceneView.getInnerLayer(result.layer)
          // 开启卷帘
          tdtLyr.swipeEnabled = true
          //将影像直接翻转，layer里面的inverse优先级将高于scene里面swipeController的inverse
          tdtLyr.swipeInverse = 1
        })

      }

      //添加M3D
      function addM3D() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/IGSSceneLayer.html
        currentLayer = new zondy.layer.IGSSceneLayer({
          // 服务基地址
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Scene/DaYanTa-M3D/SceneServer',
          // 设置场景初始化参数
          scenes: [
            {
              // 设置子图层初始化参数
              sublayers: [
                {
                  // 子图层id
                  id: '0',
                  // 子图层初始化参数
                  extensionOptions: {
                    // 开启自动跳转
                    autoReset: true
                  }
                }
              ]
            }
          ]
        })
        map.add(currentLayer)
        // 图层加载完毕
        currentLayer.on('layerview-created', function (result) {
          console.log('加载完毕:', result.layer)
          // 获取图层layer实例
          currentLyr = sceneView.getInnerLayer(result.layer)[0]
          currentLyr.swipeEnabled = currentSwipeEnabled
          currentLyr.swipeInverse = currentSwipeInverse
        })
      }

      //添加add3DTiles
      function add3DTiles() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/Cesium3DTilesCacheLayer.html
        currentLayer = new zondy.layer.Cesium3DTilesCacheLayer({
          url: 'http://webclient.smaryun.com:8200/3DData/ModelCache/3DTileset/1.0/dayantaresult/tileset.json'
        })
        map.add(currentLayer)
        // 图层加载完毕
        currentLayer.on('layerview-created', function (result) {
          console.log('加载完毕:', result.layer)
          // 获取图层layer实例
          currentLyr = sceneView.getInnerLayer(result.layer)
          currentLyr.swipeEnabled = currentSwipeEnabled
          currentLyr.swipeInverse = currentSwipeInverse
        })
      }

      //添加addIGSFeature
      function addIGSFeature() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/IGSFeatureLayer.html
        currentLayer = new zondy.layer.IGSFeatureLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer',
          sublayerId: '0',
          renderer: new zondy.renderer.UniqueValueRenderer({
            field: 'NAME',
            defaultSymbol: new zondy.symbol.SimpleFillSymbol({
              //线符号颜色
              color: '#2578B499',
              outline: new zondy.symbol.SimpleLineSymbol({
                color: '#2578B4',
                width: 2
              })
            })
          })
        })
        map.add(currentLayer)
        // 图层加载完毕
        currentLayer.on('layerview-created', function (result) {
          console.log('加载完毕:', result.layer)
          // 视点跳转
          sceneView.flyTo({
            extent: result.layer.extent
          })
          // 获取图层layer实例
          currentLyr = sceneView.getInnerLayer(result.layer)
          currentLyr.swipeEnabled = currentSwipeEnabled
          currentLyr.swipeInverse = currentSwipeInverse
        })
      }

      //添加WFS
      function addWFS() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/WFSLayer.html
        currentLayer = new zondy.layer.WFSLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/WFSServer',
          sublayerId: 'Map_湖北省4326:t0',
          opacity: 0.1,
          renderer: new zondy.renderer.SimpleRenderer({
            symbol: new zondy.symbol.SimpleFillSymbol({
              color: '#8287F799',
              outline: new zondy.symbol.SimpleLineSymbol({
                color: '#8287F7',
                width: 2
              })
            })
          })
        })
        map.add(currentLayer)
        // 图层加载完毕
        currentLayer.on('layerview-created', function (result) {
          console.log('加载完毕:', result.layer)
          // 视点跳转
          sceneView.flyTo({
            extent: result.layer.extent
          })
          // 获取图层layer实例
          currentLyr = sceneView.getInnerLayer(result.layer)
          currentLyr.swipeEnabled = currentSwipeEnabled
          currentLyr.swipeInverse = currentSwipeInverse
        })
      }

      //添加GeoJson
      function addGeoJson() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/GeoJSONLayer.html
        currentLayer = new zondy.layer.GeoJSONLayer({
          url: 'http://webclient.smaryun.com:8200/Vector/json/湖北省市级区划.json',
          renderer: new zondy.renderer.SimpleRenderer({
            symbol: new zondy.symbol.SimpleFillSymbol({
              color: '#F2999899',
              outline: new zondy.symbol.SimpleLineSymbol({
                color: '#F29998',
                width: 2
              })
            })
          })
        })
        map.add(currentLayer)
        // 图层加载完毕
        currentLayer.on('layerview-created', function (result) {
          console.log('加载完毕:', result.layer)
          // 视点跳转
          sceneView.flyTo({
            extent: result.layer.extent
          })
          // 获取图层layer实例
          currentLyr = sceneView.getInnerLayer(result.layer)
          currentLyr.swipeEnabled = currentSwipeEnabled
          currentLyr.swipeInverse = currentSwipeInverse
        })
      }

      //添加KML
      function addKML() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/KmlDataSource.html
        currentDataSource = new Cesium.KmlDataSource({
          camera: viewer.scene.camera, //相机
          canvas: viewer.scene.canvas, //画布
          ellipsoid: Cesium.Ellipsoid.WGS84, //用于地理计算的椭球体
          swipeEnabled: currentSwipeEnabled,
          swipeInverse: currentSwipeInverse
        })
        viewer.dataSources.add(
          // 加载KML数据
          currentDataSource.load(
            'http://webclient.smaryun.com:8200/Vector/kml/facilities.kml' //kml数据url
          )
        )
        // 视角跳转
        sceneView.flyTo({
          center: [114.18944441797595, 30.5690284961602, 2500000]
        })
      }

      //添加KMZ
      function addKMZ() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/KmlDataSource.html
        currentDataSource = new Cesium.KmlDataSource({
          camera: viewer.scene.camera, //相机
          canvas: viewer.scene.canvas, //画布
          swipeEnabled: currentSwipeEnabled,
          swipeInverse: currentSwipeInverse
        })
        viewer.dataSources.add(
          // 加载kmz数据
          currentDataSource.load(
            'http://webclient.smaryun.com:8200/Vector/kmz/gdpPerCapita2008.kmz' //kmz数据url
          )
        )
        // 视角跳转
        sceneView.flyTo({
          center: [116.5258, 41.8054, 20000000]
        })
      }

      //添加CZML
      function addCZML() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/CzmlDataSource.html
        currentDataSource = new Cesium.CzmlDataSource()
        currentDataSource.swipeEnabled = currentSwipeEnabled
        currentDataSource.swipeInverse = currentSwipeInverse
        viewer.dataSources.add(
          // 加载czml数据
          currentDataSource.load(
            'http://webclient.smaryun.com:8200/Vector/czml/simple.czml' //czml数据url
          )
        )
        // 视角跳转
        sceneView.flyTo({
          center: [116.5258, 41.8054, 20000000]
        })
      }

      //初始化示例UI
      function initUI() {
        // 初始化卷帘位置
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/Scene.html
        viewer.scene.swipeController = {
          region: 0.5,
          type: Cesium.SwipeModeType.HORIZONTAL
        }
        //初始化移动条的事件
        initMoveBar()
        //初始化矩形框拖动的事件
        initRectangleMove()
        //初始化圆形拖动的事件
        initCircleMove()
        //初始化多边形拖动的事件，有5个
        for (let i = 0; i < 5; i++) {
          initPolygonMove(i)
        }
        //初始化数据图层的checkbox
        initDataCheckbox()
        //初始化图层select
        initSelectLayerType()
        //初始化swiper-type的select
        initSelectSwiperType()
      }

      function initDataCheckbox() {
        layui.form.on('checkbox(tdtImg)', function (data) {
          tdtLyr.swipeEnabled = data.elem.checked
        })
        layui.form.on('checkbox(bdImg)', function (data) {
          bdLyr.swipeEnabled = data.elem.checked
        })
        layui.form.on('checkbox(businessLayerShow)', function (data) {
          currentLyr.swipeEnabled = data.elem.checked
          currentDataSource.swipeEnabled = data.elem.checked
          currentSwipeEnabled = data.elem.checked
        })
        layui.form.on('radio(allInverse)', function (data) {
          if (data.value === 'on') {
            //翻转开启
            //天地图本身是翻转的
            tdtLyr.swipeInverse = -1
            bdLyr.swipeInverse = 1
            currentLyr.swipeInverse = 1
            currentDataSource.swipeInverse = 1
            currentSwipeInverse = 1
          } else {
            tdtLyr.swipeInverse = 1
            bdLyr.swipeInverse = -1
            currentLyr.swipeInverse = -1
            currentDataSource.swipeInverse = -1
            currentSwipeInverse = -1
          }
        })
      }

      // 选择不同的业务图层
      function initSelectLayerType() {
        layui.form.on('select(layerType)', function (data) {
          // 移除图层
          map.remove(currentLayer)
          // 移除KML、KMZ、CZML图层
          viewer.dataSources.remove(currentDataSource)
          switch (data.value) {
            case 'M3D':
              addM3D()
              break
            case '3DTiles':
              add3DTiles()
              break
            case 'IGSFeature':
              addIGSFeature()
              break
            case 'WFS':
              addWFS()
              break
            case 'GeoJson':
              addGeoJson()
              break
            case 'KML':
              addKML()
              break
            case 'KMZ':
              addKMZ()
              break
            case 'CZML':
              addCZML()
              break
            default:
              break
          }
        })
      }

      function initSelectSwiperType() {
        layui.form.on('select(swiperType)', function (data) {
          //先将所有工具隐藏
          $('.shutter-tool').hide()
          let value = Number(data.value)
          switch (value) {
            case 1:
              viewer.scene.swipeController = {
                region: 0.5,
                type: Cesium.SwipeModeType.HORIZONTAL,
                inverse: false
              }
              $('#slider').css({
                left: '50%',
                top: '0px',
                width: '5px',
                height: '100%'
              })
              $('#slider').removeClass('vertical').addClass('horizontal').show()
              break
            case 2:
              viewer.scene.swipeController = {
                region: 0.5,
                type: Cesium.SwipeModeType.VERTICAL,
                inverse: false
              }
              $('#slider').css({
                top: '50%',
                left: '0px',
                height: '5px',
                width: '100%'
              })
              $('#slider').removeClass('horizontal').addClass('vertical').show()
              break
            case 3:
              viewer.scene.swipeController = {
                region: new Cesium.Cartesian4(0.3, 0.4, 0.7, 0.7),
                type: Cesium.SwipeModeType.RECTANGLE,
                inverse: false
              }
              //重置位置
              $('#rectangleMove').css({ left: '50%', top: '55%' })
              $('#rectangleMove').show()
              break
            case 4:
              viewer.scene.swipeController = {
                region: {
                  center: new Cesium.Cartesian2(0.5, 0.5),
                  radius: 0.3
                },
                type: Cesium.SwipeModeType.SPYGLASS,
                inverse: false
              }
              //重置位置
              $('#circleMove').css({ left: '50%', top: '50%' })
              $('#circleMove').show()
              break
            case 5:
              viewer.scene.swipeController = {
                region: [
                  new Cesium.Cartesian2(0.3, 0.5),
                  new Cesium.Cartesian2(0.5, 0.75),
                  new Cesium.Cartesian2(0.7, 0.5),
                  new Cesium.Cartesian2(0.6, 0.2),
                  new Cesium.Cartesian2(0.4, 0.2)
                ],
                type: Cesium.SwipeModeType.POLYGON,
                inverse: false
              }
              $('#polygonMove0').css({ top: '50%', left: '30%' })
              $('#polygonMove1').css({ top: '25%', left: '50%' })
              $('#polygonMove2').css({ top: '50%', left: '70%' })
              $('#polygonMove3').css({ top: '80%', left: '60%' })
              $('#polygonMove4').css({ top: '80%', left: '40%' })
              $('.polygon-move').show()
              break
          }
        })
      }

      function initMoveBar() {
        let slider = document.getElementById('slider')
        let handler = new Cesium.ScreenSpaceEventHandler(slider)

        let moveActive = false

        function move(movement) {
          if (!moveActive) {
            return
          }
          let relativeOffset = movement.endPosition.x
          let relativeOffsetY = movement.endPosition.y
          // 计算比例
          let splitPosition =
            (slider.offsetLeft + relativeOffset) /
            slider.parentElement.offsetWidth
          let splitPositionY =
            (slider.offsetTop + relativeOffsetY) /
            slider.parentElement.offsetHeight
          if (Number($('#swiper-type').val()) === 1) {
            // 设置滑动条位置
            slider.style.left = `${100.0 * splitPosition}%`
            // 设置卷帘位置
            viewer.scene.swipeController.region = splitPosition
          } else {
            // 设置滑动条位置
            slider.style.top = `${100.0 * splitPositionY}%`
            // 设置卷帘位置
            viewer.scene.swipeController.region = splitPositionY
          }
        }

        // 监听鼠标按下事件，开始拖动滑动条
        handler.setInputAction(function () {
          moveActive = true
        }, Cesium.ScreenSpaceEventType.LEFT_DOWN)
        // 监听鼠标移动事件，根据滑动条位置更新卷帘位置
        handler.setInputAction(move, Cesium.ScreenSpaceEventType.MOUSE_MOVE)
        // 监听鼠标弹起事件，结束拖动滑动条
        handler.setInputAction(function () {
          moveActive = false
        }, Cesium.ScreenSpaceEventType.LEFT_UP)
      }

      function initRectangleMove() {
        let moveDiv = document.getElementById('rectangleMove')
        let handler = new Cesium.ScreenSpaceEventHandler(moveDiv)
        let moveActive = false

        function move(movement) {
          if (!moveActive) {
            return
          }
          let relativeOffset = movement.endPosition.x
          let relativeOffsetY = movement.endPosition.y
          // 计算出移动点的比例
          let splitPosition =
            (moveDiv.offsetLeft + relativeOffset) /
            moveDiv.parentElement.parentElement.offsetWidth
          let splitPositionY =
            (moveDiv.offsetTop + relativeOffsetY) /
            moveDiv.parentElement.parentElement.offsetHeight
          //重新对region赋值，因为移动点在矩形正中间
          viewer.scene.swipeController.region = new Cesium.Cartesian4(
            splitPosition - 0.2,
            splitPositionY - 0.15,
            splitPosition + 0.2,
            splitPositionY + 0.15
          )
          moveDiv.style.left = `${100.0 * splitPosition}%`
          moveDiv.style.top = `${100.0 * splitPositionY}%`
        }

        // 监听鼠标按下事件，开始拖动滑动条
        handler.setInputAction(function () {
          moveActive = true
        }, Cesium.ScreenSpaceEventType.LEFT_DOWN)
        // 监听鼠标移动事件，根据滑动条位置更新卷帘位置
        handler.setInputAction(move, Cesium.ScreenSpaceEventType.MOUSE_MOVE)
        // 监听鼠标弹起事件，结束拖动滑动条
        handler.setInputAction(function () {
          moveActive = false
        }, Cesium.ScreenSpaceEventType.LEFT_UP)
      }

      function initCircleMove() {
        let moveDiv = document.getElementById('circleMove')
        let handler = new Cesium.ScreenSpaceEventHandler(moveDiv)
        let moveActive = false

        function move(movement) {
          if (!moveActive) {
            return
          }
          let relativeOffset = movement.endPosition.x
          let relativeOffsetY = movement.endPosition.y
          // 计算出移动点的比例
          let splitPosition =
            (moveDiv.offsetLeft + relativeOffset) /
            moveDiv.parentElement.offsetWidth
          let splitPositionY =
            (moveDiv.offsetTop + relativeOffsetY) /
            moveDiv.parentElement.offsetHeight
          //重新对region赋值
          viewer.scene.swipeController.region.center = new Cesium.Cartesian2(
            splitPosition,
            splitPositionY
          )
          moveDiv.style.left = `${100.0 * splitPosition}%`
          moveDiv.style.top = `${100.0 * splitPositionY}%`
        }

        // 监听鼠标按下事件，开始拖动滑动条
        handler.setInputAction(function () {
          moveActive = true
        }, Cesium.ScreenSpaceEventType.LEFT_DOWN)
        // 监听鼠标移动事件，根据滑动条位置更新卷帘位置
        handler.setInputAction(move, Cesium.ScreenSpaceEventType.MOUSE_MOVE)
        // 监听鼠标弹起事件，结束拖动滑动条
        handler.setInputAction(function () {
          moveActive = false
        }, Cesium.ScreenSpaceEventType.LEFT_UP)
      }

      function initPolygonMove(index) {
        let moveDiv = document.getElementById('polygonMove' + index)
        let handler = new Cesium.ScreenSpaceEventHandler(moveDiv)
        let moveActive = false

        function move(movement) {
          if (!moveActive) {
            return
          }
          let relativeOffset = movement.endPosition.x
          let relativeOffsetY = movement.endPosition.y
          // 计算出移动点的比例
          let splitPosition =
            (moveDiv.offsetLeft + relativeOffset) /
            moveDiv.parentElement.offsetWidth
          let splitPositionY =
            (moveDiv.offsetTop + relativeOffsetY) /
            moveDiv.parentElement.offsetHeight
          //多边形因为需要剔除纹理，因此需要重新对swiper整体赋值，无法直接对region进行处理
          let region = viewer.scene.swipeController.region
          region[index] = new Cesium.Cartesian2(
            splitPosition,
            1 - splitPositionY
          )
          viewer.scene.swipeController = {
            region: region,
            type: Cesium.SwipeModeType.POLYGON,
            inverse: false
          }
          moveDiv.style.left = `${100.0 * splitPosition}%`
          moveDiv.style.top = `${100.0 * splitPositionY}%`
        }

        // 监听鼠标按下事件，开始拖动滑动条
        handler.setInputAction(function () {
          moveActive = true
        }, Cesium.ScreenSpaceEventType.LEFT_DOWN)
        // 监听鼠标移动事件，根据滑动条位置更新卷帘位置
        handler.setInputAction(move, Cesium.ScreenSpaceEventType.MOUSE_MOVE)
        // 监听鼠标弹起事件，结束拖动滑动条
        handler.setInputAction(function () {
          moveActive = false
        }, Cesium.ScreenSpaceEventType.LEFT_UP)
      }

      //初始化三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
        scene = viewer.scene
      }

      function init() {
        // 地图初始化
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //加载天地图
        addTDT()
        // 添加模型数据
        addM3D()
        //初始化示例UI
        initUI()
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer">
      <div id="slider" class="horizontal shutter-tool"></div>
      <div id="rectangleMove" class="shutter-tool"></div>
      <div id="circleMove" class="shutter-tool"></div>
      <div id="polygonMove0" class="shutter-tool polygon-move"></div>
      <div id="polygonMove1" class="shutter-tool polygon-move"></div>
      <div id="polygonMove2" class="shutter-tool polygon-move"></div>
      <div id="polygonMove3" class="shutter-tool polygon-move"></div>
      <div id="polygonMove4" class="shutter-tool polygon-move"></div>
    </div>
    <div
      class="layui-panel layui-panel-right"
      style="top: 10px; width: 298px; z-index: 10000"
    >
      <form class="layui-form" action="">
        <div>
          <div class="layui-form-item">
            <label class="layui-form-label">底图图层</label>
            <div class="layui-input-block">
              <input
                type="checkbox"
                name="tdtImg"
                lay-filter="tdtImg"
                title="天地图"
                checked
                lay-skin="primary"
              />
              <br />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">业务图层</label>
            <div class="layui-input-block">
              <input
                type="checkbox"
                name="businessLayerShow"
                lay-filter="businessLayerShow"
                id="business-layer-show-input"
                title=""
                checked
                lay-skin="primary"
              />
              <select
                id="layer-type-select"
                name="layerType"
                lay-filter="layerType"
              >
                <option value="M3D">M3D</option>
                <option value="3DTiles">3DTiles</option>
                <option value="IGSFeature">IGSFeature</option>
                <option value="WFS">WFS</option>
                <option value="GeoJson">GeoJson</option>
                <option value="KML">KML</option>
                <option value="KMZ">KMZ</option>
                <option value="CZML">CZML</option>
              </select>
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">翻转卷帘</label>
            <div class="layui-input-block">
              <input
                type="radio"
                name="inverse"
                lay-filter="allInverse"
                value="on"
                title="是"
              />
              <input
                type="radio"
                name="inverse"
                lay-filter="allInverse"
                value="off"
                title="否"
                checked
              />
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">卷帘类别</label>
            <div class="layui-input-block">
              <select
                id="swiper-type"
                name="swiperType"
                lay-filter="swiperType"
              >
                <option value="1">水平模式</option>
                <option value="2">垂直模式</option>
                <option value="3">矩形模式</option>
                <option value="4">圆形模式</option>
                <option value="5">多边形模式</option>
              </select>
            </div>
          </div>
        </div>
      </form>
    </div>
  </body>
  <style>
    #slider {
      position: absolute;
      left: 50%;
      top: 0;
      background-color: #000;
      width: 5px;
      height: 100%;
      z-index: 9999;
    }

    #slider.horizontal:hover {
      cursor: ew-resize;
    }

    #slider.vertical:hover {
      cursor: ns-resize;
    }

    #rectangleMove {
      position: absolute;
      left: 50%;
      top: 55%;
      width: 6px;
      height: 6px;
      background-color: #000;
      z-index: 9999;
      cursor: move;
      margin-left: -3px;
      margin-top: -3px;
      display: none;
    }

    #circleMove {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 6px;
      height: 6px;
      background-color: #000;
      cursor: move;
      margin-left: -3px;
      margin-top: -3px;
      z-index: 9999;
      display: none;
    }

    .polygon-move {
      position: absolute;
      width: 6px;
      height: 6px;
      background-color: #000;
      cursor: move;
      margin-left: -3px;
      margin-top: -3px;
      z-index: 9999;
      display: none;
    }

    #polygonMove0 {
      left: 30%;
      top: 50%;
    }

    #polygonMove1 {
      top: 25%;
      left: 50%;
    }

    #polygonMove2 {
      top: 50%;
      left: 70%;
    }

    #polygonMove3 {
      top: 80%;
      left: 60%;
    }

    #polygonMove4 {
      top: 80%;
      left: 40%;
    }

    #business-layer-show-input + .layui-form-checkbox {
      position: absolute;
    }

    #layer-type-select + .layui-form-select {
      width: 140px;
      left: 28px;
    }

    .layui-form-select {
      width: 168px;
    }

    .layui-form-checkbox[lay-skin='primary'] span {
      color: #e1e1e1;
    }

    .layui-form-checked[lay-skin='primary'] i {
      border-color: #3a85c6 !important;
      background-color: #3a85c6;
    }

    .layui-input-block {
      float: left;
    }

    .layui-form-radio:hover *,
    .layui-form-radioed,
    .layui-form-radioed > i {
      color: #3a85c6;
    }
  </style>
</html>
