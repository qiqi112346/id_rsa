<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>可视域分析</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
   <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/analyse.css"/>
    <script>
      'use strict'
      // 定义三维视图的主要类
      let map, sceneView, viewer
      // 定义可视域分析
      let viewShed3d = null
      let viewShed3dAction = false
      let viewShed3ding = false
      // 鼠标移动方式的可视域，对鼠标操作的标志位
      let mouseLeftOnceClicked = false // 是否点击了一次鼠标左键
      let mouseEventDone = false // 可视域分析的鼠标事件完整结束
      // 屏幕空间事件处理器
      let handler = null
      // 当前分析类型
      let currentType = 'model'
      let graphicsLayer = null

      // 地图初始化函数
      function init() {
        // 初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        // 三维试图类构造完毕，添加一个模型
        addModel()
        // 添加一个Billboard，用于测试自定义渲染通道
        addBillboard()
        // 加载天地图
        addTDT()
        // 初始化示例UI
        initUI()
      }

      // 初始化三维球体
      function initViewer() {
        // 初始化图层管理容器
        map = new zondy.Map()
        // 初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          // 视图id
          viewId: 'mapgis-3d-viewer',
          // 图层管理容器
          map: map
        })
        // 获取视图对象
        viewer = sceneView.getInnerView()
        viewer.showPosition()
        // 可视域分析支持线性深度缓冲区和对数深度缓冲区
        viewer.scene.logarithmicDepthBuffer = true
        viewer.scene.globe.depthTestAgainstTerrain = true
        computeViewshedVisibleRate()
      }

      // 添加一个可视域分析(鼠标点选)
      function addViewShed() {
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/ViewshedAnalysis.html
        viewShed3d = new Cesium.ViewshedAnalysis()
        viewer.scene.visualAnalysisManager.add(viewShed3d)
        viewShed3dAction = true
        viewShed3ding = false
        addCesiumScreenSpaceEventHandler()
        layer.msg('鼠标左键选取，鼠标右键结束')
      }

      // 计算可视域分析可视率，在每次相机移动结束后计算
      function computeViewshedVisibleRate() {
        viewer.scene.camera.moveEnd.addEventListener(() => {
          if (viewShed3d) {
            var viewshedVisibleRate =
              viewer.scene.visualAnalysisManager.getViewshedVisibleRate()

            document.getElementById('viewshed-visible-rate').innerHTML = `${(
              viewshedVisibleRate * 100
            )
              .toFixed(2)
              .replace(/\.?0+$/, '')}%`
          } else {
            document.getElementById('viewshed-visible-rate').innerHTML =
              '（当前场景中无可视域分析）'
          }
        })
      }

      // 增加Cesium的ScreenSpaceEventHandler中的左键、移动、右键三个鼠标事件。
      function addCesiumScreenSpaceEventHandler() {
        handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas)
        // 鼠标左击
        handler.setInputAction(function (movement) {
          if (viewShed3d !== undefined) {
            if (viewShed3dAction) {
              let cartesian = viewer.scene.pickPosition(movement.position)
              let cartographic = Cesium.Cartographic.fromCartesian(cartesian)
              cartographic.height += 2.0
              cartesian = Cesium.Cartographic.toCartesian(cartographic)
              if (cartesian !== undefined && !viewShed3ding) {
                viewShed3d.viewPosition = cartesian
              } else {
                viewShed3d.targetPosition = cartesian
                viewShed3dAction = false
              }
              viewShed3ding = true
            }
          }
        }, Cesium.ScreenSpaceEventType.LEFT_CLICK)

        // 鼠标右键结束
        handler.setInputAction(function (movement) {
          if (viewShed3ding) {
            let cartesian = viewer.scene.pickPosition(movement.position)
            if (cartesian !== undefined) {
              viewShed3d.targetPosition = cartesian
            }
            viewShed3dAction = false
            viewShed3ding = false
          }
        }, Cesium.ScreenSpaceEventType.RIGHT_CLICK)

        // 鼠标移动
        handler.setInputAction(function (movement) {
          if (viewShed3ding) {
            let cartesian = viewer.scene.pickPosition(movement.endPosition)
            if (cartesian) {
              viewShed3d.targetPosition = cartesian
            }
          }
        }, Cesium.ScreenSpaceEventType.MOUSE_MOVE)
      }

      // 通过既有参数，展示一个可视域分析结果
      // 可视域关注点是两个：观察点与目标点
      // 目标点可以直接是一个点，例如鼠标方式
      // 也可以通过其他参数(可视距离，方位角，俯仰角)，交由可视域分析接口来计算完成
      function addViewShedByOption() {
        // 由于可视域分析接口目前只支持一个展示，因此先删除已有的
        removeViewShed()
        // 观察点Cartesian3
        let viewPointLon, viewPointLat, viewPointHeight
        switch (currentType) {
          case 'model':
            viewPointLon = 108.95919735136667
            viewPointLat = 34.21930564263558
            viewPointHeight = 18
            break
          case 'terrain':
            viewPointLon = 120.5548
            viewPointLat = 23.3302
            viewPointHeight = 652
            break
        }
        // 观察点Cartesian3
        let viewPosition = Cesium.Cartesian3.fromDegrees(
          viewPointLon,
          viewPointLat,
          viewPointHeight
        )
        // 确定观察点的三个参数，即往什么方向，以什么俯仰角，看多远
        let viewRadius = 1000 // 半径米
        let heading = 30 // 方位角，以北顺时针
        let pitch = 15 // 俯仰角
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/ViewshedAnalysis.html
        viewShed3d = new Cesium.ViewshedAnalysis()
        //将可视域分析添加到分析管理类中
        viewer.scene.visualAnalysisManager.add(viewShed3d)
        viewShed3d.viewPosition = viewPosition
        viewShed3d.viewRadius = viewRadius // 可视距离
        viewShed3d.heading = heading // 方位角
        viewShed3d.pitch = pitch // 俯仰角
        // 可视区域夹角，不可视颜色，可是颜色等其他参数(非必须)
        viewShed3d.horizontAngle = 45
        viewShed3d.verticalAngle = 45
        viewShed3d.visibleColor = Cesium.Color.BLUE
        viewShed3d.unVisibleColor = Cesium.Color.RED
      }

      // 移除一个可视域分析
      function removeViewShed() {
        // 如果存在可视域分析，那么通过分析管理类移除
        if (viewShed3d) {
          viewer.scene.visualAnalysisManager.removeAll()
          viewShed3d = null
        }
        mouseLeftOnceClicked = false
        mouseEventDone = false
        // 如果有对应的handler,移除对应的Cesium鼠标事件
        if (handler) {
          handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK)
          handler.removeInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE)
        }
      }

      // 为方便展示效果，添加一个m3d模型到地球
      function addModel() {
        let M3DModelCacheLayer = new zondy.layer.M3DModelCacheLayer({
          // 服务基地址
          url: 'http://webclient.smaryun.com:8200/3DData/ModelCache/M3D/1.0/DaYanTa-M3D/dayanta.mcj',
          // 初始化参数
          extensionOptions: {
            // 开启自动跳转
            autoReset: true
          }
        })
        map.add(M3DModelCacheLayer)
      }

      // 添加地形
      function addTerrain() {
        let igsSceneLayer = new zondy.layer.IGSSceneLayer({
          // 服务基地址
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Scene/TwTerrain/SceneServer',
          // 设置场景初始化参数
          scenes: [
            {
              // 设置子图层初始化参数
              sublayers: [
                {
                  // 子图层id
                  id: '0',
                  // 子图层初始化参数
                  extensionOptions: {
                    // 开启自动跳转
                    autoReset: true
                  }
                }
              ]
            }
          ]
        })
        map.add(igsSceneLayer)
      }

      function addBillboard() {
        graphicsLayer = new zondy.cesium.GraphicsLayer(viewer)
        let billboardGraphic = new zondy.cesium.Graphic({
          // 标绘类型
          type: 'billboard',
          // 标绘位置
          positions: [Cesium.Cartesian3.fromDegrees(108.9595, 34.2205, 0)],
          // 标绘样式
          style: {
            // 广告牌图片URL
            image: 'http://webclient.smaryun.com:8200/NoneSpatialData/image/icon.png',
            // 广告牌宽度
            width: 120,
            // 广告牌高度
            height: 120,
            // 离地高度
            offsetHeight: 10
          }
        })
        // 将标绘添加入标绘图层
        graphicsLayer.addGraphic(billboardGraphic)
      }

      // 视点跳转
      function flyTo(type) {
        switch (type) {
          case 'terrain':
            // 定位到地形，并调整到合适的视角
            sceneView.flyTo({
              center: [120.5558, 23.2979, 2000],
              duration: 2,
              orientation: {
                heading: Cesium.Math.toRadians(0), // 方位角
                pitch: Cesium.Math.toRadians(-15), // 俯仰角
                roll: Cesium.Math.toRadians(0) // 翻滚角
              }
            })
            break
        }
      }

      // 初始化示例UI
      function initUI() {
        layui.use(function () {
          let form = layui.form
          // 监听选择的分析数据类型
          form.on('select(content)', function (data) {
            // 删除所有模型数据
            viewer.scene.layers.removeAllSceneLayers()
            // 由于可视域分析接口目前只支持一个展示，因此先删除已有的
            removeViewShed()
            // 更新当前分析类型
            currentType = data.value
            switch (data.value) {
              case 'model':
                // 添加大雁塔倾斜摄影
                addModel()
                break
              case 'terrain':
                // 添加地形
                addTerrain()
                // 试点跳转
                flyTo(data.value)
                break
            }
          })
        })

        layui.use(function () {
          let form = layui.form
          // 监听选择的渲染通道
          // 地球渲染后：Cesium.Pass.AFTER_GLOBE
          // 瓦片渲染后：Cesium.Pass.AFTER_TILE
          // 瓦片覆盖物渲染后：Cesium.Pass.AFTER_TILE_CLASSIFICATION
          // 默认通道：Cesium.Pass.ANALYSIS
          form.on('select(pass)', function (data) {
            let visualAnalysisValues =
              viewer.scene.visualAnalysisManager.getAll()
            // 为每个可视域分析对象设置渲染通道
            for (let i = 0; i < visualAnalysisValues.length; i++) {
              if (visualAnalysisValues[i] instanceof Cesium.ViewshedAnalysis) {
                visualAnalysisValues[i].pass = Cesium.Pass[data.value]
              }
            }
          })
        })
      }

      // 加载天地图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }
    </script>
    <style>
      .sample-button-panel {
        width: 260px;
      }
      .layui-layer-content {
        user-select: none;
        pointer-events: none;
      }
      .layui-form-item {
        margin-bottom: 8px;
      }

      .sample-main-panel {
        height: auto;
        line-height: 37px;
        margin-bottom: 8px;
      }

      .layui-slider {
        top: -20px;
        width: 115px;
        left: 114px;
      }

      .layui-slider-input {
        top: -34px;
      }
    </style>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right" style="width: 345px">
      <form class="layui-form" action="">
        <div class="sample-main-panel">
          <div class="layui-form-item">
            <label class="layui-form-label">模型或地形</label>
            <div class="layui-input-block">
              <select lay-filter="content">
                <option value="model">模型</option>
                <option value="terrain">地形</option>
              </select>
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">渲染通道</label>
            <div class="layui-input-block">
              <select lay-filter="pass">
                <option value="AFTER_GLOBE">地球渲染后</option>
                <option value="AFTER_TILE">瓦片渲染后</option>
                <option value="AFTER_TILE_CLASSIFICATION">
                  瓦片覆盖物渲染后
                </option>
                <option value="ANALYSIS" selected>默认通道</option>
              </select>
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">可视率</label>
            <div class="layui-input-block" id="viewshed-visible-rate"></div>
          </div>
        </div>
        <div class="sample-button-panel">
          <button
            type="button"
            class="layui-btn layui-btn-sm layui-btn-normal"
            onclick="addViewShed()"
          >
            手动添加
          </button>
          <button
            type="button"
            class="layui-btn layui-btn-sm layui-btn-normal"
            onclick="addViewShedByOption()"
          >
            参数添加
          </button>
          <button
            type="button"
            class="layui-btn layui-btn-sm layui-btn-danger"
            onclick="removeViewShed()"
          >
            移除
          </button>
        </div>
      </form>
    </div>
  </body>
</html>
