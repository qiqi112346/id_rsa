<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>洪水淹没分析</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/analyse.css"/>
    <script>
      'use strict'
      //定义三维视图的主要类
      let map, sceneView, viewer
      //绘制多边形的工具
      let drawElement = null
      //无反射水面淹没分析类
      let floodAnalysis = null
      //反射水面分析类
      let floodAnalysisReflection = null
      let WaterReflection = null
      //洪水的最高淹没高度
      let maxHeight = 3000

      //无反射水面淹没分析
      function addFloodAnalysis(positions) {
        let options = {
          //设置洪水淹没区域最低开始高度
          startHeight: 0,
          //设置洪水淹没区域动画开始高度
          minHeight: 20,
          //设置洪水淹没区域最高高度
          maxHeight: maxHeight,
          //反射光线强度
          specularIntensity: 1,
          //水波高度
          amplitude: 10,
          //水纹速度
          animationSpeed: 0.01,
          //水纹频率
          frequency: 1000,
          //设置洪水上涨速度
          floodSpeed: 1000,
          //淹没颜色
          floodColor: new Cesium.Color(143 / 255, 183 / 255, 143 / 255, 0.5)
        }
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/FloodAnalysis.html
        floodAnalysis = new zondy.cesium.FloodAnalysis(
          viewer,
          positions,
          options
        )
        //添加洪水淹没结果显示
        viewer.scene.visualAnalysisManager.add(floodAnalysis)
      }

      //反射水面淹没分析
      function addFloodAnalysisReflection(positions) {
        //实例化反射水面的对象
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/WaterReflection.html
        WaterReflection = new zondy.cesium.WaterReflection({
          viewer: viewer,
          positions: positions,
          distortionScale: 2.0, //水面反射的扭曲尺度
          height: 50, //水面高度
          flowSpeed: 50, //水流速度
          normalMapUrl:
            'http://webclient.smaryun.com/static/libs/cdn/cesium/Assets/Textures/waterNormalsSmall.jpg'
        })
        //实例化反射水面淹没分析的对象
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/FloodAnalysisReflection.html
        floodAnalysisReflection = new zondy.cesium.FloodAnalysisReflection({
          viewer: viewer,
          water: WaterReflection,
          minHeight: 50,
          maxHeight: maxHeight,
          floodSpeed: 2,
          closeBorder: true
        })
        //开启淹没分析
        floodAnalysisReflection.start()
      }

      //添加绘制工具，主要是为了方便拿到区的点集合
      function addDrawElement() {
        if (drawElement === null) {
          // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium-mapgis/DrawElement.html
          drawElement = new zondy.cesium.DrawElement(viewer)
        }
        //先清除已有的分析类
        removeFloodAnalysis()
        drawElement.startDrawingPolygon({
          callback: function (result) {
            let positionsOfCartesian = result.positions
            if (document.getElementById('reflection-input').checked) {
              //坐标转换
              let positions = []
              for (let position of positionsOfCartesian) {
                positions.push(Cesium.Cartographic.fromCartesian(position))
              }
              addFloodAnalysisReflection(positions)
            } else {
              addFloodAnalysis(positionsOfCartesian)
            }
            //取消绘制
            drawElement.stopDrawing()
          }
        })
      }

      //变更洪水分析的最高高度
      function changeMaxHeight(isDown) {
        if (floodAnalysis) {
          floodAnalysis.maxHeight = maxHeight
          floodAnalysis.floodSpeed = 100 //动画执行的快点
          floodAnalysis.isDownFlood = isDown
          viewer.scene.requestRender()
        }
        if (floodAnalysisReflection) {
          floodAnalysisReflection.maxHeight = maxHeight
          floodAnalysisReflection.start()
        }
      }

      //清除洪水淹没分析
      function removeFloodAnalysis() {
        if (floodAnalysis) {
          //移除无反射水面洪水淹没分析显示结果
          viewer.scene.visualAnalysisManager.remove(floodAnalysis)
          floodAnalysis = null
        }
        if (floodAnalysisReflection) {
          //移除反射水面洪水淹没分析显示结果
          floodAnalysisReflection.destroy()
          floodAnalysisReflection = null
        }
        if (WaterReflection) {
          //移除反射水面的结果
          WaterReflection.destroy()
          WaterReflection = null
        }
        if (drawElement) {
          drawElement.stopDrawing()
        }
        viewer.entities.removeAll()
      }

      //添加地形数据
      function addTerrain() {
        let terrainCacheLayer = new zondy.layer.TerrainCacheLayer({
          url: 'http://webclient.smaryun.com:8200/3DData/TerrainCache/HubeiTerrain/'
        })
        map.add(terrainCacheLayer)
        //图层加载完毕
        terrainCacheLayer.on('layerview-created', function (result) {
          //视点跳转
          flyToTerrain()
        })
      }

      //定位到地形
      function flyToTerrain() {
        sceneView.flyTo({
          center: [110.31, 31.48, 3000],
          orientation: {
            pitch: Cesium.Math.toRadians(-35.0) //俯仰角
          }
        })
      }

      //定位到中地大楼模型
      function flyToModel() {
        sceneView.flyTo({
          center: [114.40161, 30.46314, 200.0],
          orientation: {
            pitch: Cesium.Math.toRadians(-28.65) //俯仰角
          }
        })
      }

      //加载中地大楼
      function addZondyBuilding() {
        let M3DLayer = new zondy.layer.M3DModelCacheLayer({
          url: 'http://webclient.smaryun.com:8200/3DData/ModelCache/M3D//1.0/ZondyFaceModels/ZondyFaceModels.mcj',
          extensionOptions: {
            // 开启自动跳转
            autoReset: true
          }
        })
        map.add(M3DLayer)
      }

      //添加天地图影像数据
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          //加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          //天地图必须加token，且token名为tk
          tokenKey: 'tk',
          //token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      //创建三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
        //打开深度检测
        viewer.scene.globe.depthTestAgainstTerrain = true
        //使用正常深度缓冲时,多视锥(multi-frustum)的远近比。 该值用于为多视锥的每个视锥创建近和远值
        viewer.scene.farToNearRatio = 1000
        //是否开启逻辑缓冲区
        viewer.scene.logarithmicDepthBuffer = true
      }

      //淹没高度设置
      function initSlider(min, max) {
        layui.slider.render({
          elem: '#heightSlide',
          value: maxHeight,
          min: min,
          max: max,
          input: true,
          theme: 'rgb(102, 147, 251)',
          change: function (value) {
            let isDown = value < maxHeight
            maxHeight = value
            changeMaxHeight(isDown)
          }
        })
      }

      //操作面板初始化
      function initUI() {
        layui.use(function () {
          //是否开启水面倒影
          layui.form.on('switch(reflection)', function (data) {
            removeFloodAnalysis()
            if (data.elem.checked) {
              //开启
              //设置初始值
              maxHeight = 3000
              initSlider(0, 3000)
              flyToModel()
            } else {
              //关闭
              //设置初始值
              maxHeight = 3000
              initSlider(0, 3000)
              flyToTerrain()
            }
          })
        })
        //淹没高度初始值
        initSlider(0, 3000)
      }

      //地图初始化函数
      function init() {
        //创建切换Cesium版本的按钮
        createChangeTab()
        //创建三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //添加天地图
        addTDT()
        //添加地形数据
        addTerrain()
        //添加中地大楼模型
        addZondyBuilding()
        //初始化UI
        initUI()
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right">
      <form class="layui-form" action="">
        <div class="sample-main-panel">
          <div class="layui-form-item">
            <label class="layui-form-label">淹没高度</label>
            <div id="heightSlide" class="demoSlider"></div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label open-reflection-label"
              >是否开启水面倒影</label
            >
            <div class="layui-input-block">
              <input
                type="checkbox"
                id="reflection-input"
                lay-filter="reflection"
                lay-skin="switch"
                lay-text="开启|关闭"
              />
            </div>
          </div>
        </div>
        <div class="sample-button-panel">
          <button
            type="button"
            class="layui-btn layui-btn-sm layui-btn-normal"
            onclick="addDrawElement()"
          >
            绘制淹没区
          </button>
          <button
            type="button"
            class="layui-btn layui-btn-sm layui-btn-danger"
            onclick="removeFloodAnalysis()"
          >
            清除
          </button>
        </div>
      </form>
    </div>
    <style>
      .sample-main-panel {
        height: auto;
      }

      .layui-slider {
        top: 16px;
        left: 74px;
        width: 122px;
      }

      .layui-slider-input {
        top: 2px;
      }

      .layui-input .layui-slider-input-txt .layui-input {
        padding-left: 0px;
      }

      .layui-slider-input-btn {
        z-index: 1;
      }

      div.layui-form-switch {
        margin-top: 5px;
      }

      .open-reflection-label {
        width: 200px;
      }
    </style>
  </body>
</html>
