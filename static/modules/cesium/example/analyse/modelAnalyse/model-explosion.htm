<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>模型爆炸</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right" style="width: 340px">
      <div class="sample-main-panel" style="border: none">
        <label class="layui-form-label">模型类型</label>
        <select
          class="sample-input sample-select"
          id="select-model"
          style="display: inline; width: 200px"
          onchange="initExplosionTypeOptions()"
        ></select>
      </div>
      <br />
      <div class="sample-main-panel" style="border: none">
        <label class="layui-form-label">爆炸方式</label>
        <select
          class="sample-input sample-select"
          id="explosion-type"
          style="display: inline; width: 200px"
          onclick="explosion()"
        ></select>
      </div>
    </div>
  </body>

  <script>
    'use strict'
    // 定义三维视图的主要类
    let map, sceneView, viewer
    // 模型爆炸的工具
    let modelExplosionTool = null
    // 模型数组
    let modelList = []

    function init() {
      // 初始化三维球体
      initViewer()
      //创建切换Cesium版本的按钮
      createChangeTab()
      // 初始化模型爆炸工具
      initExplosionTool()
      // 初始化模型与下拉菜单
      initSelectModelOptions()
      initExplosionTypeOptions()
    }

    // 初始化三维球体
    function initViewer() {
      // 初始化图层管理容器
      map = new zondy.Map()
      // 初始化地图视图对象
      sceneView = new zondy.cesium.SceneView({
        // 视图id
        viewId: 'mapgis-3d-viewer',
        // 图层管理容器
        map: map
      })
      // 获取视图对象
      viewer = sceneView.getInnerView()
      viewer.scene.skyBox.show = false
      viewer.scene.skyAtmosphere.show = false
      viewer.scene.sun.show = false
      viewer.scene.moon.show = false
      viewer.scene.globe.showGroundAtmosphere = false
      viewer.scene.globe.show = false
    }

    // 初始化爆炸工具
    function initExplosionTool() {
      // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/global.html
      modelExplosionTool = new Cesium.ModelExplosion(viewer)
    }

    // 添加M3D2.0缓存图层
    function addM3D20SceneLayer() {
      // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/IGSSceneLayer.html
      let igsSceneLayer = new zondy.layer.IGSSceneLayer({
        url: 'http://webclient.smaryun.com:8089/igs/rest/services/Scene/地质体模型/SceneServer',
        // 设置场景初始化参数
        scenes: [
          {
            // 设置子图层初始化参数
            sublayers: [
              {
                // 子图层id
                id: '0',
                // 子图层初始化参数
                extensionOptions: {
                  // 开启自动跳转
                  autoReset: true
                }
              }
            ]
          }
        ]
      })
      map.add(igsSceneLayer)
      // 图层加载完毕
      igsSceneLayer.on('layerview-created', function (result) {
        modelList = sceneView.getInnerLayer(result.layer)
      })
    }

    // 添加M3D2.1缓存图层
    function addM3D21ModelCacheLayer() {
      // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/M3DModelCacheLayer.html
      let M3DLayer = new zondy.layer.M3DModelCacheLayer({
        // 服务基地址
        url: 'http://webclient.smaryun.com:8200/3DData/ModelCache/M3D/2.1/wujiangdizhiti_21/wujiangdizhiti_21.mcj',
        // 初始化参数
        extensionOptions: {
          // 开启自动跳转
          autoReset: true
        }
      })
      map.add(M3DLayer)
      // 图层加载完毕
      M3DLayer.on('layerview-created', function (result) {
        modelList = sceneView.getInnerLayer(result.layer)
      })
    }

    // 制造爆炸参数
    function explosion() {
      let valueGroups, index
      let explosionType = document.getElementById('explosion-type').value
      switch (explosionType) {
        case '1':
          valueGroups = []
          // 循环生成过滤数据valueGroups，数据id从0开始，此处取前15个
          for (let i = 0; i < 15; i++) {
            valueGroups.push({
              // 数据id
              value: i,
              distance: 200 * i
            })
          }

          modelExplosionTool.explosionByField(modelList, {
            // 过滤数据
            valueGroups: valueGroups,
            // 单向爆炸方向，可设置任意方向
            moveDirection: new Cesium.Cartesian3(0, 0, 1),
            // 过滤类型，unique：单值，range：分段
            type: 'unique',
            // 过滤字段，1.0数据可不填，默认为oid
            field: modelExplosionTool._transforms ? 'oid' : 'OID',
            // 爆炸方向，true：单方向，false：多方向
            singleDirection: true,
            // 是否每帧执行爆炸操作，默认false，有lod数据时，请设置为true可实时更新模型位置
            enableFrameFunction: false
          })
          break
        case '2':
          valueGroups = []
          // 循环生成过滤数据valueGroups，数据id从0开始，此处取前15个
          for (let i = 0; i < 15; i++) {
            if (i % 3 === 0) {
              valueGroups.push({
                value: i,
                direction: new Cesium.Cartesian3(200 * i, 0, 0)
              })
            } else if (i % 3 === 1) {
              i
              valueGroups.push({
                value: i,
                direction: new Cesium.Cartesian3(0, 200 * i, 0)
              })
            } else {
              valueGroups.push({
                value: i,
                direction: new Cesium.Cartesian3(0, 0, 200 * i)
              })
            }
          }

          modelExplosionTool.explosionByField(modelList, {
            // 过滤数据
            valueGroups: valueGroups,
            // 过滤类型，unique：单值，range：分段
            type: 'unique',
            // 过滤字段，1.0数据可不填，默认为oid
            field: modelExplosionTool._transforms ? 'oid' : 'OID',
            // 爆炸方向，true：单方向，false：多方向
            singleDirection: false,
            // 是否每帧执行爆炸操作，默认false，有lod数据时，请设置为true可实时更新模型位置
            enableFrameFunction: false
          })
          break
        case '3':
          valueGroups = [
            {
              start: 0,
              end: 1,
              distance: 200
            },
            {
              start: 2,
              end: 3,
              distance: 400
            },
            {
              start: 4,
              end: 6,
              distance: 600
            },
            {
              start: 7,
              end: 10,
              distance: 800
            },
            {
              start: 11,
              end: 13,
              distance: 1000
            },
            {
              start: 14,
              end: 20,
              distance: 1200
            }
          ]
          modelExplosionTool.explosionByField(modelList, {
            // 过滤数据
            valueGroups: valueGroups,
            // 单向爆炸方向，可设置任意方向
            moveDirection: new Cesium.Cartesian3(0, 0, 1),
            // 过滤类型，unique：单值，range：分段
            type: 'range',
            // 过滤字段，1.0数据可不填，默认为oid
            field: modelExplosionTool._transforms ? 'oid' : 'OID',
            // 爆炸方向，true：单方向，false：多方向
            singleDirection: true,
            // 是否每帧执行爆炸操作，默认false，有lod数据时，请设置为true可实时更新模型位置
            enableFrameFunction: false
          })
          break
        case '4':
          valueGroups = [
            {
              start: 0,
              end: 1,
              direction: new Cesium.Cartesian3(2000, 200, 1000)
            },
            {
              start: 2,
              end: 3,
              direction: new Cesium.Cartesian3(1000, 1200, 1100)
            },
            {
              start: 4,
              end: 6,
              direction: new Cesium.Cartesian3(0, 2200, 0)
            },
            {
              start: 7,
              end: 10,
              direction: new Cesium.Cartesian3(1000, 100, 0)
            },
            {
              start: 11,
              end: 13,
              direction: new Cesium.Cartesian3(0, 1000, 900)
            },
            {
              start: 14,
              end: 20,
              direction: new Cesium.Cartesian3(90, 20, 0)
            }
          ]
          modelExplosionTool.explosionByField(modelList, {
            // 过滤数据
            valueGroups: valueGroups,
            // 过滤类型，unique：单值，range：分段
            type: 'range',
            // 过滤字段，1.0数据可不填，默认为oid
            field: modelExplosionTool._transforms ? 'oid' : 'OID',
            // 爆炸方向，true：单方向，false：多方向
            singleDirection: false,
            // 是否每帧执行爆炸操作，默认false，有lod数据时，请设置为true可实时更新模型位置
            enableFrameFunction: false
          })
          break
        case '5':
          valueGroups = []
          valueGroups.push({
            value: '2',
            distance: 100
          })
          valueGroups.push({
            value: '4',
            distance: 300
          })

          modelExplosionTool.explosionByField(modelList, {
            // 过滤数据
            valueGroups: valueGroups,
            // 单向爆炸方向，可设置任意方向
            moveDirection: new Cesium.Cartesian3(0, 0, 1),
            // 过滤类型，unique：单值，range：分段，contain：包含
            type: 'contain',
            // 过滤字段，1.0数据可不填，默认为oid
            field: 'Floor',
            // 爆炸方向，true：单方向，false：多方向
            singleDirection: true,
            // 是否每帧执行爆炸操作，默认false，有lod数据时，请设置为true可实时更新模型位置
            enableFrameFunction: false
          })
          break
        case '6':
          valueGroups = [
            {
              value: '1',
              direction: new Cesium.Cartesian3(0, 400, 0)
            },
            {
              value: '3',
              direction: new Cesium.Cartesian3(400, 0, 0)
            }
          ]
          modelExplosionTool.explosionByField(modelList, {
            // 过滤数据
            valueGroups: valueGroups,
            // 过滤类型，unique：单值，range：分段，contain：包含
            type: 'contain',
            // 过滤字段，1.0数据可不填，默认为oid
            field: 'Floor',
            // 爆炸方向，true：单方向，false：多方向
            singleDirection: false,
            // 是否每帧执行爆炸操作，默认false，有lod数据时，请设置为true可实时更新模型位置
            enableFrameFunction: false
          })
          break
        case '7':
          valueGroups = [
            {
              value: 0,
              distance: 1100
            },
            {
              value: 1,
              distance: 900
            },
            {
              value: 2,
              distance: 750
            },
            {
              value: 3,
              distance: 600
            },
            {
              value: 4,
              distance: 450
            },
            {
              value: 5,
              distance: 300
            },
            {
              value: 6,
              distance: 200
            },
            {
              value: 7,
              distance: 0
            }
          ]
          modelExplosionTool.explosionByField([modelList], {
            // 过滤数据
            valueGroups: valueGroups,
            // 单向爆炸方向，可设置任意方向
            moveDirection: new Cesium.Cartesian3(0, 1, 0),
            // 过滤类型，unique：单值，range：分段，contain：包含，默认为unique
            type: 'unique',
            // 过滤字段，M3D 1.0默认为oid，M3D 2.1默认为tid
            field: 'tid'
          })
          break
        case '8':
          valueGroups = [
            {
              value: 0,
              direction: new Cesium.Cartesian3(1000, 0, 0)
            },
            {
              value: 1,
              direction: new Cesium.Cartesian3(0, 0, 1000)
            },
            {
              value: 3,
              direction: new Cesium.Cartesian3(-1000, 0, 0)
            },
            {
              value: 6,
              direction: new Cesium.Cartesian3(0, 0, -1000)
            }
          ]
          modelExplosionTool.explosionByField([modelList], {
            // 过滤数据
            valueGroups: valueGroups,
            // 过滤类型，unique：单值，range：分段，contain：包含，默认为unique
            type: 'unique',
            // 过滤字段，M3D 1.0默认为oid，M3D 2.1默认为tid
            field: 'tid'
          })
          break
        case '9':
          valueGroups = [
            {
              start: 0,
              end: 3,
              distance: 600
            }
          ]
          modelExplosionTool.explosionByField([modelList], {
            // 过滤数据
            valueGroups: valueGroups,
            // 爆炸方向，可设置任意方向
            moveDirection: new Cesium.Cartesian3(0, 1, 0),
            // 过滤类型，unique：单值，range：分段，contain：包含，默认为unique
            type: 'range',
            // 过滤字段，M3D 1.0默认为oid，M3D 2.1默认为tid
            field: 'tid'
          })
          break
        case '10':
          valueGroups = [
            {
              start: 0,
              end: 3,
              direction: new Cesium.Cartesian3(1000, 0, 0)
            },
            {
              start: 4,
              end: 6,
              direction: new Cesium.Cartesian3(0, 0, 1000)
            }
          ]
          modelExplosionTool.explosionByField([modelList], {
            // 过滤数据
            valueGroups: valueGroups,
            // 爆炸方向，可设置任意方向
            moveDirection: new Cesium.Cartesian3(0, 1, 0),
            // 过滤类型，unique：单值，range：分段，contain：包含，默认为unique
            type: 'range',
            // 过滤字段，M3D 1.0默认为oid，M3D 2.1默认为tid
            field: 'tid'
          })
          break
        case '11':
          valueGroups = [
            {
              value: 'BottomFace',
              distance: -600
            }
          ]
          modelExplosionTool.explosionByField([modelList], {
            // 过滤数据
            valueGroups: valueGroups,
            // 爆炸方向，可设置任意方向
            moveDirection: new Cesium.Cartesian3(0, 1, 0),
            // 过滤类型，unique：单值，range：分段，contain：包含，默认为unique
            type: 'contain',
            // 过滤字段，M3D 1.0默认为oid，M3D 2.1默认为tid
            field: 'LayerName'
          })
          break
        case '12':
          valueGroups = [
            {
              value: 'BottomFace',
              direction: new Cesium.Cartesian3(800, 0, 800)
            }
          ]
          modelExplosionTool.explosionByField([modelList], {
            // 过滤数据
            valueGroups: valueGroups,
            // 爆炸方向，可设置任意方向
            moveDirection: new Cesium.Cartesian3(0, 1, 0),
            // 过滤类型，unique：单值，range：分段，contain：包含，默认为unique
            type: 'contain',
            // 过滤字段，M3D 1.0默认为oid，M3D 2.1默认为tid
            field: 'LayerName'
          })
          break
      }
    }

    // 模型类型下拉框中的选项与值
    const selectModelList = [
      { text: 'M3D 2.0 地质体', value: '1' },
      { text: 'M3D 2.1 地质体', value: '2' }
    ]

    // 爆炸方式下拉框中的选项与值
    const explosionTypeList = [
      [
        { text: 'M3D 2.0 单值过滤-单方向', value: '1' },
        { text: 'M3D 2.0 单值过滤-多方向', value: '2' },
        { text: 'M3D 2.0 分段过滤-单方向', value: '3' },
        { text: 'M3D 2.0 分段过滤-多方向', value: '4' },
        { text: 'M3D 2.0 属性过滤-单方向', value: '5' },
        { text: 'M3D 2.0 属性过滤-多方向', value: '6' }
      ],
      [
        { text: 'M3D 2.1 单值过滤-单方向', value: '7' },
        { text: 'M3D 2.1 单值过滤-多方向', value: '8' },
        { text: 'M3D 2.1 分段过滤-单方向', value: '9' },
        { text: 'M3D 2.1 分段过滤-多方向', value: '10' },
        { text: 'M3D 2.1 属性过滤-单方向', value: '11' },
        { text: 'M3D 2.1 属性过滤-多方向', value: '12' }
      ]
    ]

    // 初始化模型类型下拉框
    function initSelectModelOptions() {
      const selectModel = document.getElementById('select-model')
      selectModel.length = selectModelList.length
      for (let i = 0; i < selectModelList.length; i++) {
        selectModel.options[i].text = selectModelList[i].text
        selectModel.options[i].value = selectModelList[i].value
      }
    }

    // 初始化爆炸分式下拉框
    function initExplosionTypeOptions() {
      const selectedIndex =
        document.getElementById('select-model').selectedIndex
      const explosionData = explosionTypeList[selectedIndex]
      const explosionType = document.getElementById('explosion-type')
      explosionType.length = explosionData.length
      for (let i = 0; i < explosionData.length; i++) {
        explosionType.options[i].text = explosionData[i].text
        explosionType.options[i].value = explosionData[i].value
      }
      loadModel()
    }

    // 根据模型类型加载相应的M3D模型
    function loadModel() {
      const selectModel = document.getElementById('select-model').value
      if (selectModel === '1') {
        map.removeAll()
        addM3D20SceneLayer()
      } else if (selectModel === '2') {
        map.removeAll()
        addM3D21ModelCacheLayer()
      }
    }
  </script>
</html>
