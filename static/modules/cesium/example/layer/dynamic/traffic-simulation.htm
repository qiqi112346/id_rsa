<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>交通仿真</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <script>
      'use strict'
      //定义三维视图的主要类
      let map, sceneView, viewer

      function addFerry() {
        let url = 'http://webclient.smaryun.com:8200/Vector/json/ferry/ferry.json'
        httpGetPromise(url).then(async (geoJsonRes) => {
          let res = await Cesium.GeoJsonDataSource.load(geoJsonRes, {
            strokeWidth: 10
          })
          viewer.dataSources.add(res)
          let entities = res.entities.values
          //给轮渡线增加材质
          for (let entity of entities) {
            entity.polyline.material =
              new zondy.cesium.PolylineTrailLinkMaterialProperty({
                image:
                  'http://webclient.smaryun.com:8200/NoneSpatialData/image/LinkPulse.png',
                color: Cesium.Color.fromCssColorString('#1e7d99').withAlpha(1),
                repeat: new Cesium.Cartesian2(10.0, 1.0),
                direction: 1,
                // 要获取到webgl对象，屏蔽webgl1.0和webgl2.0的shader代码差异
                webGLRenderingContext: viewer.scene.context._gl
              })
          }
          viewer.flyTo(entities, {
            duration: 0.5,
            offset: new Cesium.HeadingPitchRange(0, Cesium.Math.toRadians(-15))
          })
          //添加模型，并且移动
          for (let item of geoJsonRes.features) {
            addSteamer(item.geometry.coordinates)
          }
        })
      }

      function addSteamer(coordinates) {
        let modelUrl =
          'http://webclient.smaryun.com:8200/3DData/Model/glb/ship_youlun.glb'
        //1先将点加密
        let positionArr = getDensityPointsList(coordinates)
        let index = 0
        //利用CallbackProperty来动态改变船的位置，使其动起来
        return viewer.entities.add({
          //位置，每个回调的时候，去数组里面取
          position: new Cesium.CallbackProperty(function () {
            index++
            let pointIndex = Math.floor(index)
            if (pointIndex >= positionArr.length) {
              index = 0
              return Cesium.Cartesian3.fromDegrees(
                positionArr[0][0],
                positionArr[0][1]
              )
            }
            return Cesium.Cartesian3.fromDegrees(
              positionArr[pointIndex][0],
              positionArr[pointIndex][1]
            )
          }, false),
          //模型的角度，每个回调的时候，去判断计算旋转角度
          orientation: new Cesium.CallbackProperty(function () {
            let pointIndex = Math.floor(index)
            if (pointIndex >= positionArr.length) {
              index = 0
              let heading = Cesium.Math.toRadians(0)
              return Cesium.Transforms.headingPitchRollQuaternion(
                Cesium.Cartesian3.fromDegrees(
                  positionArr[0][0],
                  positionArr[0][1],
                  0
                ),
                new Cesium.HeadingPitchRoll(heading, 0, 0)
              )
            } else {
              let headingAngle = 0
              if (pointIndex < positionArr.length - 1) {
                headingAngle = courseAngle(
                  positionArr[pointIndex][0],
                  positionArr[pointIndex][1],
                  positionArr[pointIndex + 1][0],
                  positionArr[pointIndex + 1][1]
                )
              }
              let heading = Cesium.Math.toRadians(headingAngle)
              return Cesium.Transforms.headingPitchRollQuaternion(
                Cesium.Cartesian3.fromDegrees(
                  positionArr[0][0],
                  positionArr[0][1],
                  0
                ),
                new Cesium.HeadingPitchRoll(heading, 0, 0)
              )
            }
          }, false),
          model: {
            uri: modelUrl,
            scale: 0.6
          }
        })
      }

      //为了让轮渡漫游更加平滑,对线段增加密度
      function getDensityPointsList(pointArr) {
        let resultPoints = []
        for (let index = 0; index < pointArr.length - 1; index++) {
          const originPoint = pointArr[index]
          const destinationPoint = pointArr[index + 1]
          // 利用Cesium的线性插值
          let controls = []
          controls.push(
            Cesium.Cartesian3.fromDegrees(originPoint[0], originPoint[1])
          )
          controls.push(
            Cesium.Cartesian3.fromDegrees(
              destinationPoint[0],
              destinationPoint[1]
            )
          )
          let spline = new Cesium.LinearSpline({
            times: [0.0, 1.0],
            points: controls
          })
          let step = 10
          for (let i = 0; i < step; i++) {
            let cartesian3 = spline.evaluate(i / step)
            let cartographic =
              viewer.scene.globe.ellipsoid.cartesianToCartographic(cartesian3)
            let lat = Cesium.Math.toDegrees(cartographic.latitude)
            let lon = Cesium.Math.toDegrees(cartographic.longitude)
            if (i > 0 && i < step - 1) {
              resultPoints.push([lon, lat])
            }
          }
        }
        return resultPoints
      }

      function courseAngle(lonA, latA, lonB, latB) {
        let y = Math.sin(lonB - lonA) * Math.cos(latB)
        let x =
          Math.cos(latA) * Math.sin(latB) -
          Math.sin(latA) * Math.cos(latB) * Math.cos(lonB - lonA)
        let bearing = Math.atan2(y, x)
        // debugger;
        bearing = (180 * bearing) / Math.PI
        if (bearing < 0) {
          bearing = bearing + 360
        }
        return bearing - 90
      }

      //添加水波纹江面
      function addYangtze() {
        //获取江面的geojson数据
        let url = 'http://webclient.smaryun.com:8200/Vector/json/ferry/yangtze.json'
        httpGetPromise(url).then((res) => {
          let coordinates = res.features[0].geometry.coordinates
          let polygons = coordinates[0]
          polygons = polygons.reduce((a, b) => {
            return a.concat(b)
          })
          let holes = []
          for (let index in coordinates) {
            if (index > 0) {
              let arr = coordinates[index]
              arr = arr.reduce((a, b) => {
                return a.concat(b)
              })
              holes.push(
                new Cesium.PolygonHierarchy(
                  Cesium.Cartesian3.fromDegreesArray(arr)
                )
              )
            }
          }
          let primitive = new Cesium.Primitive({
            show: true,
            geometryInstances: new Cesium.GeometryInstance({
              geometry: new Cesium.PolygonGeometry({
                polygonHierarchy: {
                  positions: Cesium.Cartesian3.fromDegreesArray(polygons),
                  holes: holes
                },
                vertexFormat: Cesium.EllipsoidSurfaceAppearance.VERTEX_FORMAT,
                extrudedHeight: 0, // 只显示水面
                height: 0
              })
            }),
            appearance: new Cesium.EllipsoidSurfaceAppearance({
              aboveGround: true,
              material: new Cesium.Material({
                fabric: {
                  type: 'Water',
                  uniforms: {
                    baseWaterColor: new Cesium.Color(
                      0 / 255,
                      123 / 255,
                      230 / 255,
                      0.3
                    ),
                    normalMap:
                      'http://webclient.smaryun.com:8200/NoneSpatialData/image/water.jpg', // 图片
                    frequency: 100.0,
                    animationSpeed: 0.005,
                    amplitude: 3,
                    specularIntensity: 10
                  }
                }
              })
            })
          })
          viewer.scene.primitives.add(primitive)
        })
      }

      //添加天地图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/img_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      //初始化球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //获取视图对象
        viewer = sceneView.getInnerView()
      }

      //地图初始化函数
      function init() {
        //初始化球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //添加天地图
        addTDT()
        //添加长江
        addYangtze()
        //添加轮渡线
        addFerry()
      }

      // 发送请求获取数据
      function httpGetPromise(url) {
        return new Promise(function (resolve, reject) {
          const handler = function () {
            if (this.readyState !== 4) {
              return
            }
            if (this.status === 200) {
              resolve(this.response)
            } else {
              reject(new Error(this.statusText))
            }
          }
          const client = new XMLHttpRequest()
          client.open('GET', url)
          client.onreadystatechange = handler
          client.responseType = 'json'
          client.setRequestHeader('Accept', 'application/json')
          client.send()
        })
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
  </body>
</html>
