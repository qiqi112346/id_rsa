<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>MapGIS文字符号</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <script type="text/javascript">
      //使用严格模式
      'use strict'
      // 定义二维视图的主要变量
      let map,
        mapView,
        graphicsLayer,
        wmtsLayer,
        opacity = 1,
        featureTextSymbolPoint,
        featureSimpleMarkerMultiPoint,
        featureTextSymbolPolygon,
        featureTextSymbolMultiPolygon,
        featureTextSymbolExtent,
        featureTextSymbolCircle
      // 获取构造函数
      const { Map, layer,  Feature, symbol, Color } =
        zondy
      const { SceneView } = zondy.cesium
      const { WMTSLayer, GraphicsLayer } = layer
      const { GeometryType } = zondy.enum
      const { MapGISTextSymbol } = symbol
      const Geometry = zondy.geometry.Geometry
      // 初始化地图
      function init() {
        // 初始化视图
        initView()
        //创建切换Cesium版本的按钮
        createChangeTab()
        // 添加WMTS图层底图
        addWMTSLayer()
        // 添加基础标绘图层
        addGraphicsLayer()
        // 设置UI透明度
        document.getElementById('opacity').value = opacity
      }

      // 初始化视图
      function initView() {
        map = new Map()
        mapView = new SceneView({
          // 视图id
          viewId: 'mapgis-3d-viewer',
          // 图层管理容器
          map: map
        })
      }

      // 添加WMTS图层
      function addWMTSLayer() {
        wmtsLayer = new WMTSLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Tile/湖北省_4326_normal_3-10/WMTSServer'
        })
        map.add(wmtsLayer)

        // 图层加载完毕
        wmtsLayer.on('layerview-created', function (result) {
          console.log('加载完毕:', result.layer)
          mapView.flyTo({
            center: [112.24717478060658, 31.15289200067722, 1000000]
          })
        })
      }

      // 添加一个文字符号的点
      function TextSymbolPoint() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/Geometry.html
        const point = Geometry.fromJSON({
          type: GeometryType.point,
          coordinates: [114, 30, 600]
        })
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/Feature.html
        featureTextSymbolPoint = new Feature({
          geometry: point,
          // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/MapGISTextSymbol.html
          symbol: new MapGISTextSymbol({
            // 字体颜色
            // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/Color.html
            color: new Color(1, 100, 22, 1),
            // 字体内容，如果是服务端数据，可不填
            text: '默认文字',
            // 字体样式
            font: {
              // 字体
              family: '微软雅黑',
              // 文字大小，单位像素
              size: 60,
              // 文字是否为斜体，正常模式
              style: 'normal',
              // 文字粗细
              weight: 'normal'
            }
          })
        })

        graphicsLayer.add(featureTextSymbolPoint)
      }

      // 点移动
      function TextSymbolPointMove() {
        featureTextSymbolPoint.geometry.coordinates = [113, 30, 600]
      }

      // 删除点
      function TextSymbolPointRemove() {
        graphicsLayer.remove(featureTextSymbolPoint)
      }

      // 添加多点
      function TextSymbolMultiPoint() {
        const point = Geometry.fromJSON({
          type: GeometryType.multiPoint,
          coordinates: [
            [114, 30, 600],
            [112, 30, 600]
          ]
        })
        featureSimpleMarkerMultiPoint = new Feature({
          geometry: point,
          symbol: new MapGISTextSymbol({
            // 字体颜色
            color: new Color(1, 100, 22, 1),
            // 字体内容，如果是服务端数据，可不填
            text: '默认文字',
            // 字体样式
            font: {
              // 字体
              family: '微软雅黑',
              // 文字大小，单位像素
              size: 60,
              // 文字是否为斜体，正常模式
              style: 'normal',
              // 文字粗细
              weight: 'normal'
            }
          })
        })

        graphicsLayer.add(featureSimpleMarkerMultiPoint)
      }

      // 移动多点
      function TextSymbolMultiPointMove() {
        featureSimpleMarkerMultiPoint.geometry.coordinates = [
          [114, 31, 600],
          [112, 31, 600]
        ]
      }

      // 删除多点
      function TextSymbolMultiPointRemove() {
        graphicsLayer.remove(featureSimpleMarkerMultiPoint)
      }

      // 添加多边形
      function TextSymbolPolygon() {
        const polygon = Geometry.fromJSON({
          type: GeometryType.polygon,
          coordinates: [
            [
              [113.5, 30.5, 600],
              [114, 30.5, 600],
              [114, 31, 600],
              [113.5, 31, 600],
              [113.5, 30.5, 600]
            ]
          ]
        })
        featureTextSymbolPolygon = new Feature({
          geometry: polygon,
          symbol: new MapGISTextSymbol({
            // 字体颜色
            color: new Color(1, 100, 22, 1),
            // 字体内容，如果是服务端数据，可不填
            text: '默认文字',
            // 字体样式
            font: {
              // 字体
              family: '微软雅黑',
              // 文字大小，单位像素
              size: 60,
              // 文字是否为斜体，正常模式
              style: 'normal',
              // 文字粗细
              weight: 'normal'
            }
          })
        })
        graphicsLayer.add(featureTextSymbolPolygon)
      }

      // 移动多边形
      function TextSymbolPolygonMove() {
        featureTextSymbolPolygon.geometry.coordinates = [
          [
            [111.5, 30.5, 600],
            [112, 30.5, 600],
            [112, 31, 600],
            [111.5, 31, 600],
            [111.5, 30.5, 600]
          ]
        ]
      }

      // 删除多边形
      function TextSymbolPolygonRemove() {
        graphicsLayer.remove(featureTextSymbolPolygon)
      }

      // 添加多区
      function TextSymbolMultiPolygon() {
        const polygon = Geometry.fromJSON({
          type: GeometryType.multiPolygon,
          coordinates: [
            [
              [
                [113.5, 30.5, 600],
                [114, 30.5, 600],
                [114, 31, 600],
                [113.5, 31, 600],
                [113.5, 30.5, 600]
              ]
            ],
            [
              [
                [112.5, 30.5, 600],
                [113, 30.5, 600],
                [113, 31, 600],
                [112.5, 31, 600],
                [112.5, 30.5, 600]
              ]
            ]
          ]
        })
        featureTextSymbolMultiPolygon = new Feature({
          geometry: polygon,
          symbol: new MapGISTextSymbol({
            // 字体颜色
            color: new Color(1, 100, 22, 1),
            // 字体内容，如果是服务端数据，可不填
            text: '默认文字',
            // 字体样式
            font: {
              // 字体
              family: '微软雅黑',
              // 文字大小，单位像素
              size: 60,
              // 文字是否为斜体，正常模式
              style: 'normal',
              // 文字粗细
              weight: 'normal'
            }
          })
        })
        graphicsLayer.add(featureTextSymbolMultiPolygon)
      }

      // 移动多区
      function TextSymbolMultiPolygonMove() {
        featureTextSymbolMultiPolygon.geometry.coordinates = [
          [
            [
              [114.5, 30.5, 600],
              [115, 30.5, 600],
              [115, 31, 600],
              [114.5, 31, 600],
              [114.5, 30.5, 600]
            ]
          ],
          [
            [
              [112.5, 30.5, 600],
              [113, 30.5, 600],
              [113, 31, 600],
              [112.5, 31, 600],
              [112.5, 30.5, 600]
            ]
          ]
        ]
      }

      // 删除多区
      function TextSymbolMultiPolygonRemove() {
        graphicsLayer.remove(featureTextSymbolMultiPolygon)
      }

      // 添加矩形
      function TextSymbolExtent() {
        const extent = Geometry.fromJSON({
          type: GeometryType.extent,
          xmin: 113.5,
          ymin: 30.5,
          xmax: 114,
          ymax: 31,
          zmin: 600,
          zmax: 600
        })
        featureTextSymbolExtent = new Feature({
          geometry: extent,
          symbol: new MapGISTextSymbol({
            // 字体颜色
            color: new Color(1, 100, 22, 1),
            // 字体内容，如果是服务端数据，可不填
            text: '默认文字',
            // 字体样式
            font: {
              // 字体
              family: '微软雅黑',
              // 文字大小，单位像素
              size: 60,
              // 文字是否为斜体，正常模式
              style: 'normal',
              // 文字粗细
              weight: 'normal'
            }
          })
        })
        graphicsLayer.add(featureTextSymbolExtent)
      }

      // 移动矩形
      function TextSymbolExtentMove() {
        featureTextSymbolExtent.geometry.xmin = 112
      }

      // 删除矩形
      function TextSymbolExtentRemove() {
        graphicsLayer.remove(featureTextSymbolExtent)
      }

      // 添加圆形
      function TextSymbolCircle() {
        const circle = Geometry.fromJSON({
          type: GeometryType.circle,
          center: [114, 30, 600],
          radius: 3
        })
        featureTextSymbolCircle = new Feature({
          geometry: circle,
          symbol: new MapGISTextSymbol({
            // 字体颜色
            color: new Color(1, 100, 22, 1),
            // 字体内容，如果是服务端数据，可不填
            text: '默认文字',
            // 字体样式
            font: {
              // 字体
              family: '微软雅黑',
              // 文字大小，单位像素
              size: 60,
              // 文字是否为斜体，正常模式
              style: 'normal',
              // 文字粗细
              weight: 'normal'
            }
          })
        })
        graphicsLayer.add(featureTextSymbolCircle)
      }

      // 移动圆形
      function TextSymbolCircleMove() {
        featureTextSymbolCircle.geometry.center = [113, 30, 600]
      }

      // 删除圆形
      function TextSymbolCircleRemove() {
        graphicsLayer.remove(featureTextSymbolCircle)
      }

      // 添加图层
      function addGraphicsLayer() {
        // 创建Graphics图层对象
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/GraphicsLayer.html
        graphicsLayer = new GraphicsLayer({
          graphics: [],
          opacity: 1.0
        })
        // 添加图层对象到地图文档中
        map.add(graphicsLayer)
      }

      // 改变图层透明度
      function changeOpacity() {
        if (graphicsLayer) {
          graphicsLayer.opacity = document.getElementById('opacity').value
        }
      }
      // 控制图层是否可见
      function changeVisible() {
        if (graphicsLayer) {
          graphicsLayer.visible = !graphicsLayer.visible
        }
      }
      // 从地图容器中移除图层
      function removeLayer() {
        if (graphicsLayer.loadStatus === 'loaded') {
          map.remove(graphicsLayer)
          graphicsLayer = null
        }
      }
    </script>
  </head>

  <body onload="init();">
    <div
      id="mapgis-3d-viewer"
      style="position: absolute; display: flex; width: 100%; height: 100%"
    ></div>
    <div style="position: absolute; top: 20px; right: 10px; z-index: 10000">
      <span>透明度:</span>
      <input
        id="opacity"
        onmousemove="changeOpacity()"
        type="range"
        min="0"
        max="1"
        step="0.01"
        value="1"
      />
    </div>
    <button
      style="position: absolute; top: 20px; right: 210px; z-index: 10000"
      onclick="changeVisible()"
    >
      显示或隐藏几何图层
    </button>
    <button
      style="position: absolute; top: 20px; right: 355px; z-index: 10000"
      onclick="removeLayer()"
    >
      删除图层
    </button>
    <button
      style="position: absolute; top: 20px; right: 433px; z-index: 10000"
      onclick="addGraphicsLayer()"
    >
      添加图层
    </button>
    <button
      onclick="TextSymbolPoint()"
      style="position: absolute; z-index: 100000; top: 60px; right: 20px"
    >
      创建点
    </button>
    <button
      onclick="TextSymbolPointMove()"
      style="position: absolute; z-index: 100000; top: 60px; right: 80px"
    >
      移动点
    </button>
    <button
      onclick="TextSymbolPointRemove()"
      style="position: absolute; z-index: 100000; top: 60px; right: 140px"
    >
      删除点
    </button>
    <button
      onclick="TextSymbolMultiPoint()"
      style="position: absolute; z-index: 100000; top: 60px; right: 200px"
    >
      创建多点
    </button>
    <button
      onclick="TextSymbolMultiPointMove()"
      style="position: absolute; z-index: 100000; top: 60px; right: 280px"
    >
      移动多点
    </button>
    <button
      onclick="TextSymbolMultiPointRemove()"
      style="position: absolute; z-index: 100000; top: 60px; right: 360px"
    >
      删除多点
    </button>
  </body>
</html>
