<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <title>栅格体元数据显示</title>
    <script src="http://webclient.smaryun.com/static/libs/cdn/cesium/Cesium.js"></script>
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/cdn/cesium/Widgets/widgets.css"
    />
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"
    />
    <!--示例公共样式-->
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/css/style.css"
    />
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/css/visual.css"
    />
    <script>
      'use strict'
      //定义三维视图的主要类
      let viewer, tileset, intervalId, voxelVisible, handler, customStyle
      let minthreshold = 0,
        maxthreshold = 100,
        heightScale = 10
      //初始化三维球体
      function initViewer() {
        // 获取viewer对象
        viewer = new Cesium.Viewer('mapgis-3d-viewer', {
          contextOptions: {
            requestWebgl2: true
          }
        })

        viewer.scene.logarithmicDepthBuffer = true
      }
      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        // 创建栅格体元图元
        addLayer()
        initUI()
      }
      function addLayer() {
        removeLayer()
        zondy.cesium.MapGISM3DSet.fromUrl(
          'http://webclient.smaryun.com:8089/igs/rest/services/M3Dv2/rhum2011/M3dServer',
          {
            minimumVoxelThreshold: minthreshold,
            maximumVoxelThreshold: maxthreshold,
            heightScale
          }
        ).then((m3dset) => {
          tileset = m3dset
          viewer.scene.primitives.add(tileset)
          viewer.zoomTo(
            tileset,
            new Cesium.HeadingPitchRange(
              0,
              -2.0,
              Math.max(100.0 - tileset.boundingSphere.radius, 0.0)
            )
          )
          customStyle = new Cesium.Cesium3DTileStyle({
            color: {
              type: 'stretch-value',
              conditions: [
                ['${rhum} === 0.0', 'rgba(255,255,0,1)'],
                ['${rhum} === 1.0', 'rgba(0,255,255,1)']
              ]
            }
          })
          tileset.style = customStyle
          console.info('layerinfo:', tileset.layerinfo)
        })
      }
      function changeTheme(needCustom) {
        if (!tileset) {
          return
        }
        const defaultStyle = new Cesium.Cesium3DTileStyle({
          color: 'rgba(255, 255, 255, 1)'
        })

        tileset.style = needCustom ? customStyle : defaultStyle
      }
      function changeTime(stop) {
        if (!tileset || !tileset.layerinfo) {
          return
        }
        if (intervalId) {
          clearInterval(intervalId)
          intervalId = null
        }
        if (stop) {
          return
        }
        const { size } = tileset.layerinfo[0].voxelInfo.time
        let n = 0
        intervalId = setInterval(() => {
          tileset.timeIdentity = n % size
          n++
        }, 200)
      }
      function changeVisible() {
        if (!tileset) {
          return
        }
        tileset.show = !!voxelVisible
        voxelVisible = !voxelVisible
      }
      function changeMinMaxValue(minValue, maxValue) {
        if (!tileset) {
          return
        }

        tileset.minimumVoxelThreshold = minValue
        tileset.maximumVoxelThreshold = maxValue
      }

      function startPickVoxel(remove) {
        if (!tileset) {
          return
        }
        if (remove) {
          handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK)
          return
        }
        handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas)
        handler.setInputAction(function (movement) {
          // console.log(volxel.queryPropertyValue(movement.position));
          var voxelCell = viewer.scene.pickVoxel(movement.position)

          if (voxelCell instanceof Cesium.VoxelCell) {
            console.log(voxelCell.metadata)
            const propertyIds = voxelCell.getNames()
            const length = propertyIds.length
            for (let i = 0; i < length; ++i) {
              const propertyId = propertyIds[i]
              console.log(`${propertyId}: ${voxelCell.getProperty(propertyId)}`)
            }
          }
        }, Cesium.ScreenSpaceEventType.LEFT_CLICK)
      }
      function changeHeightscale(heightScale) {
        if (!tileset) {
          return
        }
        tileset.heightScale = heightScale
      }
      function removeLayer() {
        if (!tileset) {
          return
        }
        viewer.scene.primitives.remove(tileset)
        tileset = undefined
      }

      function initUI() {
        let rangeSlider = layui.slider.render({
          elem: '#range',
          range: true,
          value: [minthreshold, maxthreshold],
          min: minthreshold,
          max: maxthreshold,
          theme: 'rgb(102, 147, 251)',
          change: function (value) {
            // // 通过BatchID最小值、最大值，控制要素可见范围
            changeMinMaxValue(value[0], value[1])
          }
        })
        layui
          .config({
            //  配置 Layui 第三方扩展模块存放的基础目录
            base: 'http://webclient.smaryun.com/static/libs/cdn/layui/modules/'
          })
          .extend({
            // 扩展
            decimalSlider: 'decimalSlider/index'
          })

        layui.use('decimalSlider', (decimalSlider) => {
          let form = layui.form
          form.on('switch(time)', function (data) {
            // 是否开启时态变化
            if (data.elem.checked) {
              changeTime()
            } else {
              changeTime(true)
            }
          })
          form.on('switch(show)', function (data) {
            // 是否显示
            changeVisible()
          })
          form.on('switch(query)', function (data) {
            // 属性查询
            if (data.elem.checked) {
              startPickVoxel()
            } else {
              startPickVoxel(true)
            }
          })
          form.on('switch(color)', function (data) {
            // 是否显示地球外圈大气
            if (data.elem.checked) {
              changeTheme(true)
            } else {
              changeTheme()
            }
          })
          // 高度缩放
          let heightScaleSlider = decimalSlider.render({
            elem: '#heightScale',
            decimalPlaces: 1, // 小数点位
            value: 10,
            min: 10,
            max: 1000,
            step: 10,
            input: true,
            theme: 'rgb(102, 147, 251)',
            change: function (value) {
              changeHeightscale(parseFloat(value))
            }
          })
        })
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right">
      <form class="layui-form" action="">
        <div class="sample-main-panel">
          <div class="layui-form-item">
            <label class="layui-form-label">高度缩放</label>
            <div class="layui-input-block decimal-slider">
              <div id="heightScale"></div>
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">属性过滤</label>
            <div class="layui-input-block">
              <div id="range"></div>
            </div>
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">配色方案</label>
          <div class="layui-input-block">
            <input
              type="checkbox"
              lay-filter="color"
              lay-skin="switch"
              lay-text="自定义|默认"
              checked
            />
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">时态变化</label>
          <div class="layui-input-block">
            <input
              type="checkbox"
              lay-filter="time"
              lay-skin="switch"
              lay-text="开启|关闭"
            />
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">属性查询</label>
          <div class="layui-input-block">
            <input
              type="checkbox"
              lay-filter="query"
              lay-skin="switch"
              lay-text="开启|关闭"
            />
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">是否显示</label>
          <div class="layui-input-block">
            <input
              type="checkbox"
              lay-filter="show"
              lay-skin="switch"
              lay-text="显示|隐藏"
              checked
            />
          </div>
        </div>
      </form>
    </div>

    <style type="text/css">
      .layui-panel-right {
        width: 350px;
      }

      .sample-main-panel {
        height: auto;
      }

      .layui-form-label {
        width: 100px;
      }

      .layui-input-block {
        width: 195px;
      }
    </style>
  </body>
</html>
