<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>栅格体元数据显示</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
  <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
  <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css" />
  <!--示例公共样式-->
  <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css" />
  <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/visual.css" />
    <script>
      'use strict'
      //定义三维视图的主要类
      let map, sceneView, viewer, volxel;
      let opacity = 0, minthreshold = 0, maxthreshold = 100, step = 200;
      //初始化三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map,
          //额外参数
          extensionOptions: {
            //开启webgl2
            contextOptions: {
              requestWebgl2: true
            }
          }
        })
        // 获取viewer对象
        viewer = sceneView.getInnerView()

        viewer.scene.logarithmicDepthBuffer = true;
      }
      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        // 创建栅格体元图元
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/VoxelPrimitive.html
        volxel = new Cesium.VoxelPrimitive('http://webclient.smaryun.com:8200/Raster/Voxel/rhum.2012_part/rhum.2012_part.json', {
          heightScale: 100,
          loaded: () => {
          }
        });
        viewer.scene.primitives.add(volxel);
        initUI();
      }
      let opacitySlider, minthresholdSlider, maxthresholdSlider, stepSlider, interval, handler;
      function initUI() {
        var rangeSlider = layui.slider.render({
          elem: '#range',
          range: true,
          value: [minthreshold, maxthreshold],
          min: minthreshold,
          max: maxthreshold,
          theme: 'rgb(102, 147, 251)',
          change: function (value) {
            // // 通过BatchID最小值、最大值，控制要素可见范围
            volxel.setFilterRange(value[0], value[1]);
          }
        });
        layui.config({
          //  配置 Layui 第三方扩展模块存放的基础目录
          base: 'http://webclient.smaryun.com/static/libs/cdn/layui/modules/'
        }).extend({
          // 扩展
          decimalSlider: 'decimalSlider/index'
        });

        layui.use('decimalSlider', decimalSlider => {
          let form = layui.form;
          form.on("switch(time)", function (data) {
            // 是否开启时态变化
            if(data.elem.checked){
              var count = 0;
              interval = setInterval(() => {
                  count++;
                  volxel.setPlaybackFrame(count);
              }, 500);
            }else{
              clearInterval(interval);
            }
          });
          form.on("switch(show)", function (data) {
            // 是否显示
            volxel.show = data.elem.checked;
          });
          form.on("switch(query)", function (data) {
            // 属性查询
            if(data.elem.checked){
              var ellipsoid = viewer.scene.globe.ellipsoid;
              handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas)
              handler.setInputAction(function(movement) {
                  console.log(volxel.queryPropertyValue(movement.position));
              }, Cesium.ScreenSpaceEventType.LEFT_CLICK);
            } else {
              handler.removeInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);
            }
          });
          form.on("switch(color)", function (data) {
            // 是否显示地球外圈大气
            if(data.elem.checked){
              var canvas2d = document.createElement('canvas');
              canvas2d.width = 100;
              canvas2d.height = 1;
              var ctx = canvas2d.getContext("2d");
              var gradient = ctx.createLinearGradient(0, 0, canvas2d.width, 0);
              gradient.addColorStop(0, "rgba(254, 35, 10, 1)");
              gradient.addColorStop(0.33, "rgba(242, 254, 30, 1)");
              gradient.addColorStop(0.67, "rgba(22, 253, 255, 1)");
              gradient.addColorStop(1, "rgba(92, 9, 252, 1)");
              ctx.fillStyle = gradient;
              ctx.fillRect(0, 0, canvas2d.width, canvas2d.height);
              volxel.setColorScheme(canvas2d);
            } else {
              volxel.setColorScheme();
            }
          });
          // 透明度
          var alphaSlider = decimalSlider.render({
            elem: '#opacity',
            decimalPlaces: 3,// 小数点1位
            value: 1,
            min: 0,
            max: 1,
            step: 0.001,
            input: true,
            theme: 'rgb(102, 147, 251)',
            change: function (value) {
              volxel.opacity = parseFloat(value);
            }
          });
          // 采样步数
          stepSlider = decimalSlider.render({
            elem: '#step',
            value: step,
            min: 0,
            max: 1000,
            step: 1,
            input: true,
            theme: 'rgb(102, 147, 251)',
            change: function (value) {
              volxel.steps = parseFloat(value);
            }
          });

        });

      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right">
      <form class="layui-form" action="">
        <div class="sample-main-panel">
          <div class="layui-form-item">
            <label class="layui-form-label">透明度</label>
            <div class="layui-input-block decimal-slider">
              <div id="opacity"></div>
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">采样步数</label>
            <div class="layui-input-block decimal-slider">
              <div id="step"></div>
            </div>
          </div>
          <div class="layui-form-item">
            <label class="layui-form-label">属性过滤</label>
            <div class="layui-input-block">
              <div id="range"></div>
            </div>
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">配色方案</label>
          <div class="layui-input-block">
            <input type="checkbox" lay-filter="color" lay-skin="switch" lay-text="自定义|默认" />
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">时态变化</label>
          <div class="layui-input-block">
            <input type="checkbox" lay-filter="time" lay-skin="switch" lay-text="开启|关闭" />
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">属性查询</label>
          <div class="layui-input-block">
            <input type="checkbox" lay-filter="query" lay-skin="switch" lay-text="开启|关闭" />
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">是否显示</label>
          <div class="layui-input-block">
            <input type="checkbox" lay-filter="show" lay-skin="switch" lay-text="显示|隐藏" checked />
          </div>
        </div>
      </form>
    </div>

    <style type="text/css">
      .layui-panel-right {
        width: 350px;
      }

      .sample-main-panel {
        height: auto;
      }

      .layui-form-label {
        width: 100px;
      }

      .layui-input-block {
        width: 195px;
      }

    </style>
  </body>
</html>
