<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>聚类专题图</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <!--cesium样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/cesium/Widgets/widgets.css" />
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/cesium/MapGIS/css/mapgis.css" />
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css" />
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/visual.css" />
    <script>
      "use strict";
      // 三维场景视图对象
      let viewer;
      // Cesium中的数据源对象
      let dataSource;
      // 数据源更新回调函数
      let dataSourcePromise;
      // 获取构造函数
      const { service, layer, geometry } = zondy
      const { MapGISMapServerImageryProvider } = zondy.cesium
      // 获取Common的要素服务对象
      const { FeatureServer } = service
      // 获取Common的IGSMapImageLayer对象
      const { IGSMapImageLayer } = layer
      // 获取Common的Extent对象
      const { Extent } = geometry
      // 记录聚类样式，删除聚类数据源时，要删除聚类样式
      window.clusterDataSources = []

      //初始化三维球体
      function initViewer() {
        viewer = new Cesium.Viewer('mapgis-3d-viewer')
        // 判断是否支持图像渲染像素化处理
        if(Cesium.FeatureDetection.supportsImageRenderingPixelated()){
          // 使得该值和浏览器保持一致，文字或者图形的渲染结果会更加平滑
          viewer.resolutionScale = window.devicePixelRatio
        }
        // 开启抗锯齿，文字或者图形的渲染结果会更加平滑
        viewer.scene.fxaa = true
        viewer.scene.postProcessStages.fxaa.enabled = true
      }

      // 查询要素数据
      function queryFeatures(geometry) {
        // 初始化要素服务对象
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/FeatureServer.html
        const featureServer = new FeatureServer({
          // 服务基地址
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer'
        })
        // 设置查询条件
        const queryParams = {
          // 指定要查询的子图层id
          layerId: '9',
          // 指定单次查询的最大数量
          resultRecordCount: 100000
        }
        if (geometry) {
          queryParams.geometry = geometry
        }
        // 指定图层的要素查询
        featureServer.queryFeatures(queryParams).then(function (result) {
          // 查询出来的数据
          console.log("要素查询数据:", result)
          // 初始化聚类专题图
          initCluster()
          // 添加聚类专题图中的数据
          addEntities(result.data.featureSet.features)
        })
      }

      // 初始化聚类专题图
      function initCluster() {
        // 初始化一个Cesium的数据源
        // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/CustomDataSource.html
        dataSource = new Cesium.CustomDataSource('cluster-test')
        // 将数据源添加到Cesium中，并返回一个Promise对象，表示该数据源更新后要执行的聚类操作
        dataSourcePromise = viewer.dataSources.add(dataSource, {
          // Cesium的相机对象
          camera: viewer.scene.camera,
          // Cesium的视图容器中的canvas对象
          canvas: viewer.scene.canvas
        })
        // 每次聚类数据更新后，会进行聚类处理，这里并不是指的数据源更新
        dataSourcePromise.then(function (clusterDataSource) {
          // 记录聚类样式
          window.clusterDataSources.push(clusterDataSource)
          // 开启聚类
          clusterDataSource.clustering.enabled = true
          // 设置聚合半径
          clusterDataSource.clustering.pixelRange = 80
          // 设置聚类后的样式
          clusterDataSource.clustering.clusterEvent.addEventListener(function (
            // 要聚类的entity数组
            clusteredEntities,
            // 聚类对象，修改此对象，来设置聚类样式
            cluster
          ) {
            console.log("当前聚类数量: ", clusteredEntities.length, " 个")
            // 开启聚类时是否显示文字
            cluster.label.show = false
            // 开启聚类时是否显示广告牌
            cluster.billboard.show = false
            // 开启聚类时是否显示点
            cluster.point.show = false
            // 当聚类数目在2到30之间时的样式
            if (
              clusteredEntities.length >= 2 &&
              clusteredEntities.length < 30
            ) {
              // 显示点
              cluster.point.show = true
              // 设置点颜色 为了不压盖文字，point必须设置透明度
              cluster.point.color = new Cesium.Color(176 / 255, 161 / 255, 46 / 255, 0.6)
              // 设置点半径
              cluster.point.pixelSize = 30
              // 设置点外边线颜色
              cluster.point.outlineColor = new Cesium.Color(76 / 255, 161 / 255, 46 / 255, 0.6)
              // 设置点外边线宽度
              cluster.point.outlineWidth = 5
              // 显示文字
              cluster.label.show = true
              // 设置文字的水平对其方式
              cluster.label.horizontalOrigin = Cesium.HorizontalOrigin.CENTER
              // 设置文字的竖直对齐方式
              cluster.label.verticalOrigin = Cesium.VerticalOrigin.CENTER
              // 设置文字字体
              cluster.label.font = `40px Microsoft YaHei`
              // 文字先放大一倍，再缩小一倍，使得文字更清晰
              cluster.label.scale = 0.5
              // 文字颜色
              cluster.label.fillColor = new Cesium.Color(0, 0, 0, 1)
            }
            // 当聚类数目在31到60之间时的样式
            else if (
              clusteredEntities.length >= 31 &&
              clusteredEntities.length < 60
            ) {
              // 显示点
              cluster.point.show = true
              // 设置点颜色 为了不压盖文字，point必须设置透明度
              cluster.point.color = new Cesium.Color(168 / 255, 47 / 255, 25 / 255, 0.6)
              // 设置点半径
              cluster.point.pixelSize = 30
              // 设置点外边线颜色
              cluster.point.outlineColor = new Cesium.Color(228 / 255, 67 / 255, 45 / 255, 0.6)
              // 设置点外边线宽度
              cluster.point.outlineWidth = 5
              // 显示文字
              cluster.label.show = true
              // 设置文字的水平对其方式
              cluster.label.horizontalOrigin = Cesium.HorizontalOrigin.CENTER
              // 设置文字的竖直对齐方式
              cluster.label.verticalOrigin = Cesium.VerticalOrigin.CENTER
              // 设置文字字体
              cluster.label.font = `40px Microsoft YaHei`
              // 文字先放大一倍，再缩小一倍，使得文字更清晰
              cluster.label.scale = 0.5
              // 文字颜色
              cluster.label.fillColor = new Cesium.Color(0, 0, 0, 1)
            }
            // 当聚类数大于61时的样式
            else if (
              clusteredEntities.length >= 61
            ) {
              // 显示点
              cluster.point.show = true
              // 设置点颜色 为了不压盖文字，point必须设置透明度
              cluster.point.color = new Cesium.Color(80 / 255, 37 / 255, 127 / 255, 0.6)
              // 设置点半径
              cluster.point.pixelSize = 30
              // 设置点外边线颜色
              cluster.point.outlineColor = new Cesium.Color(133 / 255, 67 / 255, 167 / 255, 0.6)
              // 设置点外边线宽度
              cluster.point.outlineWidth = 5
              // 显示文字
              cluster.label.show = true
              // 设置文字的水平对其方式
              cluster.label.horizontalOrigin = Cesium.HorizontalOrigin.CENTER
              // 设置文字的竖直对齐方式
              cluster.label.verticalOrigin = Cesium.VerticalOrigin.CENTER
              // 设置文字字体
              cluster.label.font = `40px Microsoft YaHei`
              // 文字先放大一倍，再缩小一倍，使得文字更清晰
              cluster.label.scale = 0.5
              // 文字颜色
              cluster.label.fillColor = new Cesium.Color(0, 0, 0, 1)
            }
          })
        })
      }

      // 添加聚类专题图中的数据
      function addEntities(features) {
        // 将要素中的坐标取出，解析为entity需要的参数
        for (let i = 0; i < features.length; i++) {
          // 构造entity的参数
          const options = {
            // entity的点坐标
            position: Cesium.Cartesian3.fromDegrees(
              // 经度
              features[i].geometry.coordinates[0],
              // 纬度
              features[i].geometry.coordinates[1],
              // 高程
              1000
            ),
            // 设置entity中点的样式，也可以设置广告牌，文字等
            point: {
              // 填充颜色
              color: new Cesium.Color(240 / 255, 194 / 255, 12 / 255, 0.6),
              // 点的半径
              pixelSize: 30,
              // 是否显示点
              show: true,
              // 外边线颜色
              outlineColor: new Cesium.Color(241 / 255, 211 / 255, 87 / 255, 0.6),
              // 外边线宽度
              outlineWidth: 5
            },
            // entity的id
            id: features[i].id,
            // 绑定额外属性
            properties: new Cesium.PropertyBag({
              'attributes': features[i].attributes
            })
          }
          // 将数据添加到数据源中
          dataSource.entities.add(options)
        }
      }

      // 添加点击事件
      function addClickHandler() {
        const handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);
        handler.setInputAction(function (movement) {
          const picked = viewer.scene.pick(movement.position);
          // 请注意，当拾取聚类对象时，只有billboard和label对象可以拾取到当前聚类所包含的entity对象，point类型的对象拾取时，返回的entity为空
          if (Cesium.defined(picked)) {
            // 拾取到的entity对象数组
            const ids = picked.id;
            console.log(ids)
          }
        }, Cesium.ScreenSpaceEventType.LEFT_CLICK);
      }

      // 添加相机事件
      function addCameraHandler() {
        // 记录当前相机高度
        window.prevHeight = 0
        // 添加相机事件
        viewer.camera.changed.addEventListener(()=>{
          // 视高 km
          let alt = (viewer.camera.positionCartographic.height / 1000).toFixed(2);
          // 方位角
          let heading = Cesium.Math.toDegrees(viewer.camera.heading).toFixed(2);
          // 俯仰角
          let pitch = Cesium.Math.toDegrees(viewer.camera.pitch).toFixed(2);
          // 翻滚角
          let roll = Cesium.Math.toDegrees(viewer.camera.roll).toFixed(2);
          // 级别
          let level = 0;
          let tileRender = viewer.scene._globe._surface._tilesToRender;
          if (tileRender && tileRender.length > 0) {
            level = viewer.scene._globe._surface._tilesToRender[0]._level;
          }
          let str = `级数：${level} 视高：${alt}km  方位角：${heading}° 俯仰角：${pitch}° 翻滚角：${roll}°`;
          console.log(str);
          const rectangle = viewer.camera.computeViewRectangle()
          const extent = {
            xmin: (rectangle.west / Math.PI) * 180,
            ymin: (rectangle.south / Math.PI) * 180,
            xmax: (rectangle.east / Math.PI) * 180,
            ymax: (rectangle.north / Math.PI) * 180
          }
          console.log("视图范围:", extent)
          // 只有当现在的相机高度和上一次相机高度之差，大于一个数值时，在进行数据更新
          // 也可以通过时间差进行控制
          // 这样做是为了保证同一时间段，仅会做一次查询，否则会因为数据查询是异步的，视图上会出现重复数据
          if (Math.abs(viewer.camera.positionCartographic.height - window.prevHeight) > 20000) {
            // 更新上一次高度
            window.prevHeight = viewer.camera.positionCartographic.height
            // 删除本次聚类
            deleteCluster()
            // 初始化新聚类
            initCluster()
            // 根据视图范围，重新查询数据，并更新视图
            queryFeatures(new Extent(extent))
          }
        });
      }

      // 添加地图图片图层
      function addImageryProvider() {
        // 服务基地址
        const url = 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/MapServer'
        // 构造一个Common层的地图图片图层对象
        const igsMapImageLayer = new IGSMapImageLayer({
          // 服务基地址
          url
        })
        // 获取图层元信息
        igsMapImageLayer.load().then(async () => {
          // MapGISMapServerImageryProvider的构造参数
          const options = {
            // 显示所有子图层
            layers: igsMapImageLayer.layers
          }
          // 构造一个provider对象
          const imageryProvider = await MapGISMapServerImageryProvider.fromUrl(url, options)
          // 添加地图图片图层到Cesium中
          viewer.imageryLayers.addImageryProvider(imageryProvider)
        })
      }

      // 删除聚类
      function deleteCluster() {
        // 删除数据源
        viewer.dataSources.remove(dataSource, true)
        dataSource = undefined
        // 删除所有聚类样式
        for (let i = 0; i < window.clusterDataSources.length; i++) {
          window.clusterDataSources[i].clustering.destroy()
        }
        window.clusterDataSources = []
      }
      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        // 查询要素数据
        queryFeatures()
        // 添加地图图片图层
        addImageryProvider()
        // 添加点击事件
        addClickHandler()
        // 添加相机事件
        addCameraHandler()
      }
    </script>
</head>

<body onload="init()">
<div id="mapgis-3d-viewer"></div>
</body>
</html>
