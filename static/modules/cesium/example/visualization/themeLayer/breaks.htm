<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>分段专题图</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/visual.css"/>
    <script>
      'use strict'
      // 定义三维视图的主要类
      let map, sceneView
      // 矢量瓦片图层
      let igsVectorTileLayer
      // 点、线、区要素图层
      let layerOfPoint, layerOfLine, layerOfRegion
      // 样式颜色是否随机的标识
      let isRandom = false
      // 当前加载图层的类型
      let currentLayerType = 'GeoJSON'
      // 获取构造函数
            const { renderer, layer, Map, Color } = zondy
      const { SceneView } = zondy.cesium
      const { ClassBreakRenderer } = renderer
      const { SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol } = zondy.symbol
      const { GeoJSONLayer, IGSFeatureLayer, WFSLayer, IGSVectorTileLayer } =
        layer

      //获取点renderer
      function getRendererOfPoint() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/ClassBreakRenderer.html
        return new ClassBreakRenderer({
          //字段名
          field: 'population',
          //默认样式
          // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/SimpleMarkerSymbol.html
          defaultSymbol: new SimpleMarkerSymbol({
            //填充颜色
            // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/Color.html
            color: isRandom ? randomColor() : new Color(178, 223, 138, 0.6),
            //点半径
            size: 25,
            //外边线样式
            outline: {
              //线颜色
              color: isRandom ? randomColor() : new Color(178, 223, 138, 1),
              //线宽
              width: 1
            }
          }),
          //分段专题图字段样式
          classBreakInfos: [
            {
              //分段最小值
              minValue: 0,
              //分段最大值
              maxValue: 4000000,
              //匹配到该值后的样式，更多样式详见：《SimpleMarkerSymbol》
              symbol: new SimpleMarkerSymbol({
                //填充颜色
                color: isRandom ? randomColor() : new Color(76, 161, 46, 0.6),
                //点半径
                size: 25,
                //外边线样式
                // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/SimpleLineSymbol.html
                outline: new SimpleLineSymbol({
                  //线颜色
                  color: isRandom ? randomColor() : new Color(76, 161, 46, 1),
                  //线宽
                  width: 1
                })
              })
            },
            {
              //分段最小值
              minValue: 4000000,
              //分段最大值
              maxValue: 8000000,
              //匹配到该值后的样式，更多样式详见：《SimpleMarkerSymbol》
              symbol: new SimpleMarkerSymbol({
                //填充颜色
                color: isRandom ? randomColor() : new Color(228, 67, 45, 0.6),
                //点半径
                size: 25,
                //外边线样式
                outline: new SimpleLineSymbol({
                  //线颜色
                  color: isRandom ? randomColor() : new Color(228, 67, 45, 1),
                  //线宽
                  width: 1
                })
              })
            }
          ]
        })
      }

      //获取线renderer
      function getRendererOfLine() {
        return new ClassBreakRenderer({
          field: 'osm_id',
          //匹配到该值后的样式
          defaultSymbol: new SimpleLineSymbol({
            // 填充符号颜色
            color: isRandom ? randomColor() : new Color(37, 120, 180, 1),
            //线宽
            width: 2
          }),
          //分段专题图字段样式
          classBreakInfos: [
            {
              // 分段最大值
              minValue: 100000000,
              // 分段最大值
              maxValue: 200000000,
              //匹配到该值后的样式，更多样式详见：《SimpleLineSymbol》
              symbol: new SimpleLineSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(228, 67, 45, 1),
                //线宽
                width: 2
              })
            },
            {
              // 分段最小值
              minValue: 200000000,
              // 分段最大值
              maxValue: 300000000,
              //匹配到该值后的样式，更多样式详见：《SimpleLineSymbol》
              symbol: new SimpleLineSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(178, 223, 138, 1),
                //线宽
                width: 2
              })
            }
          ]
        })
      }

      //获取区renderer
      function getRendererOfRegion() {
        return new ClassBreakRenderer({
          field: 'GDP2016',
          //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
          defaultSymbol: new SimpleFillSymbol({
            // 填充符号颜色
            color: isRandom ? randomColor() : new Color(130, 135, 247, 0.6),
            // 外边线样式
            outline: new SimpleLineSymbol({
              // 线符号颜色
              color: isRandom ? randomColor() : new Color(130, 135, 247, 1),
              // 线宽
              width: 1
            })
          }),
          //分段专题图字段样式
          classBreakInfos: [
            {
              // 分段最大值
              minValue: 0,
              // 分段最大值
              maxValue: 100,
              //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
              symbol: new SimpleFillSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(248, 191, 111, 0.6),
                // 外边线样式
                outline: new SimpleLineSymbol({
                  //线符号颜色
                  color: isRandom ? randomColor() : new Color(248, 191, 111, 1),
                  //线宽
                  width: 1
                })
              })
            },
            {
              // 分段最小值
              minValue: 100,
              // 分段最大值
              maxValue: 200,
              //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
              symbol: new SimpleFillSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(130, 247, 254, 0.6),
                // 外边线样式
                outline: new SimpleLineSymbol({
                  // 线符号颜色
                  color: isRandom ? randomColor() : new Color(130, 247, 254, 1),
                  // 线宽
                  width: 1
                })
              })
            },
            {
              // 分段最小值
              minValue: 200,
              // 分段最大值
              maxValue: 500,
              //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
              symbol: new SimpleFillSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(231, 147, 146, 0.6),
                // 外边线样式
                outline: new SimpleLineSymbol({
                  // 线符号颜色
                  color: isRandom ? randomColor() : new Color(231, 147, 146, 1),
                  // 线宽
                  width: 1
                })
              })
            }
          ]
        })
      }

      // GeoJSONLayer点要素
      function addGeoJSONLayerOfPoint() {
        const renderer = getRendererOfPoint()
        layerOfPoint = new GeoJSONLayer({
          url: 'http://webclient.smaryun.com:8200/Vector/json/地级市.json',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfPoint)
        // 图层加载完毕
        layerOfPoint.on('layerview-created', function (result) {
          sceneView.flyTo({
            extent: result.layer.extent
          })
          console.log('点加载完毕:', result.layer)
        })
      }

      // GeoJSONLayer线要素
      function addGeoJSONLayerOfLine() {
        const renderer = getRendererOfLine()
        layerOfLine = new GeoJSONLayer({
          url: 'http://webclient.smaryun.com:8200/Vector/json/高速公路.json',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfLine)
      }

      // GeoJSONLayer区要素
      function addGeoJSONLayerOfRegion() {
        const renderer = getRendererOfRegion()
        layerOfRegion = new GeoJSONLayer({
          url: 'http://webclient.smaryun.com:8200/Vector/json/湖北省市级区划.json',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfRegion)
      }

      // IGSFeature点要素
      function addIGSFeatureLayerOfPoint() {
        const renderer = getRendererOfPoint()
        layerOfPoint = new IGSFeatureLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer',
          sublayerId: '5',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfPoint)
        // 图层加载完毕
        layerOfPoint.on('layerview-created', function (result) {
          sceneView.flyTo({
            extent: result.layer.extent
          })
          console.log('点加载完毕:', result.layer)
        })
      }

      // IGSFeature线要素
      function addIGSFeatureLayerOfLine() {
        const renderer = getRendererOfLine()
        layerOfLine = new IGSFeatureLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer',
          sublayerId: '2-23',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfLine)
      }

      // IGSFeature区要素
      function addIGSFeatureLayerOfRegion() {
        const renderer = getRendererOfRegion()
        layerOfRegion = new IGSFeatureLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer',
          sublayerId: '0',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfRegion)
      }

      // WFS点要素
      function addWFSLayerOfPoint() {
        const renderer = getRendererOfPoint()
        layerOfPoint = new WFSLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/WFSServer',
          sublayerId: 'Map_湖北省4326:t70',
          opacity: 0.1,
          renderer: renderer
        })
        //加载图层
        map.add(layerOfPoint)
        // 图层加载完毕
        layerOfPoint.on('layerview-created', function (result) {
          sceneView.flyTo({
            extent: result.layer.extent
          })
          console.log('点加载完毕:', result.layer)
        })
      }

      // WFS线要素
      function addWFSLayerOfLine() {
        const renderer = getRendererOfLine()
        layerOfLine = new WFSLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/WFSServer',
          sublayerId: 'Map_湖北省4326:t36',
          opacity: 0.1,
          renderer: renderer
        })
        //加载图层
        map.add(layerOfLine)
      }

      // WFS区要素
      function addWFSLayerOfRegion() {
        const renderer = getRendererOfRegion()
        layerOfRegion = new WFSLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/WFSServer',
          sublayerId: 'Map_湖北省4326:t0',
          opacity: 0.1,
          renderer: renderer
        })
        //加载图层
        map.add(layerOfRegion)
      }

      //渲染IGSVectorTile专题图
      function addIGSVectorTileLayer() {
        igsVectorTileLayer = new IGSVectorTileLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/VectorTile/湖北省4326矢量瓦片/VectorTileServer',
          sublayers: [
            { id: '湖北省市级区划_simplerender' },
            { id: '高速公路_6-7_simplerender_lininfo_0' }
          ]
        })
        map.add(igsVectorTileLayer)
        // 图层加载完毕
        igsVectorTileLayer.on('layerview-created', function (result) {
          sceneView.flyTo({
            extent: result.layer.extent
          })
          console.log('加载完毕:', result.layer)
          layerOfLine = igsVectorTileLayer.findSublayerById(
            '高速公路_6-7_simplerender_lininfo_0'
          )
          layerOfRegion = igsVectorTileLayer.findSublayerById(
            '湖北省市级区划_simplerender'
          )
          layerOfLine.renderer = getRendererOfLine()
          layerOfRegion.renderer = getRendererOfRegion()
        })
      }

      // GeoJSON点、线、区要素
      function addGeoJSONLayer(featureType = 'all') {
        switch (featureType) {
          case 'region':
            addGeoJSONLayerOfRegion()
            break
          case 'line':
            addGeoJSONLayerOfLine()
            break
          case 'point':
            addGeoJSONLayerOfPoint()
            break
          case 'all':
          default:
            addGeoJSONLayerOfLine()
            addGeoJSONLayerOfRegion()
            addGeoJSONLayerOfPoint()
            break
        }
      }

      // IGSFeature点、线、区要素
      function addIGSFeatureLayer(featureType = 'all') {
        switch (featureType) {
          case 'region':
            addIGSFeatureLayerOfRegion()
            break
          case 'line':
            addIGSFeatureLayerOfLine()
            break
          case 'point':
            addIGSFeatureLayerOfPoint()
            break
          case 'all':
          default:
            addIGSFeatureLayerOfRegion()
            addIGSFeatureLayerOfLine()
            addIGSFeatureLayerOfPoint()
            break
        }
      }

      // WFS点、线、区要素
      function addWFSLayer(featureType = 'all') {
        switch (featureType) {
          case 'region':
            addWFSLayerOfRegion()
            break
          case 'line':
            addWFSLayerOfLine()
            break
          case 'point':
            addWFSLayerOfPoint()
            break
          case 'all':
          default:
            addWFSLayerOfRegion()
            addWFSLayerOfLine()
            addWFSLayerOfPoint()
            break
        }
      }

      // 通过type加载图层
      function addLayer(featureType = 'all') {
        switch (currentLayerType) {
          case 'GeoJSON':
            addGeoJSONLayer(featureType)
            break
          case 'IGSFeature':
            addIGSFeatureLayer(featureType)
            break
          case 'WFS':
            addWFSLayer(featureType)
            break
          case 'IGSVectorTile':
          default:
            addIGSVectorTileLayer()
            break
        }
      }

      // 切换点要素专题图样式
      function changeStyleOfPoint() {
        layerOfPoint.renderer.classBreakInfos = [
          {
            //分段最小值
            minValue: 0,
            //分段最大值
            maxValue: 4000000,
            //匹配到该值后的样式，更多样式详见：《SimpleMarkerSymbol》
            symbol: new SimpleMarkerSymbol({
              //填充颜色
              color: randomColor(),
              //点半径
              size: 25,
              //外边线样式
              outline: new SimpleLineSymbol({
                //线颜色
                color: isRandom ? randomColor() : new Color(76, 161, 46, 1),
                //线宽
                width: 1
              })
            })
          },
          {
            //分段最小值
            minValue: 4000000,
            //分段最大值
            maxValue: 8000000,
            //匹配到该值后的样式，更多样式详见：《SimpleMarkerSymbol》
            symbol: new SimpleMarkerSymbol({
              //填充颜色
              color: randomColor(),
              //点半径
              size: 25,
              //外边线样式
              outline: new SimpleLineSymbol({
                //线颜色
                color: randomColor(),
                //线宽
                width: 1
              })
            })
          }
        ]
      }

      // 切换线要素专题图样式
      function changeStyleOfLine() {
        layerOfLine.renderer.classBreakInfos = [
          {
            // 分段最大值
            minValue: 100000000,
            // 分段最大值
            maxValue: 200000000,
            //匹配到该值后的样式，更多样式详见：《SimpleLineSymbol》
            symbol: new SimpleLineSymbol({
              // 填充符号颜色
              color: randomColor(),
              //线宽
              width: 2
            })
          },
          {
            // 分段最小值
            minValue: 200000000,
            // 分段最大值
            maxValue: 300000000,
            //匹配到该值后的样式，更多样式详见：《SimpleLineSymbol》
            symbol: new SimpleLineSymbol({
              // 填充符号颜色
              color: randomColor(),
              //线宽
              width: 2
            })
          }
        ]
      }

      // 切换区要素专题图样式
      function changeStyleOfRegion() {
        layerOfRegion.renderer.classBreakInfos = [
          {
            // 分段最大值
            minValue: 0,
            // 分段最大值
            maxValue: 100,
            //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
            symbol: new SimpleFillSymbol({
              // 填充符号颜色
              color: randomColor(),
              // 外边线样式
              outline: new SimpleLineSymbol({
                //线符号颜色
                color: randomColor(),
                //线宽
                width: 1
              })
            })
          },
          {
            // 分段最小值
            minValue: 100,
            // 分段最大值
            maxValue: 200,
            //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
            symbol: new SimpleFillSymbol({
              // 填充符号颜色
              color: randomColor(),
              // 外边线样式
              outline: new SimpleLineSymbol({
                // 线符号颜色
                color: randomColor(),
                // 线宽
                width: 1
              })
            })
          },
          {
            // 分段最小值
            minValue: 200,
            // 分段最大值
            maxValue: 500,
            //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
            symbol: new SimpleFillSymbol({
              // 填充符号颜色
              color: randomColor(),
              // 外边线样式
              outline: new SimpleLineSymbol({
                // 线符号颜色
                color: randomColor(),
                // 线宽
                width: 1
              })
            })
          }
        ]
      }

      // 销毁多个图层
      function removeAllLayer() {
        map.remove(igsVectorTileLayer)
        map.removeMany([layerOfPoint, layerOfLine, layerOfRegion])
      }

      // 随机颜色值
      function randomColor() {
        return new Color(
          parseInt(Math.random() * 255),
          parseInt(Math.random() * 255),
          parseInt(Math.random() * 255),
          0.6
        )
      }

      //初始化三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new Map()
        //初始化地图视图对象
        sceneView = new SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
      }

      //初始化示例UI操作
      function initUI() {
        layui.use(function () {
          var layer = layui.layer,
            $ = layui.jquery,
            form = layui.form

          //切换加载类型
          form.on('select(layerType)', function (data) {
            isRandom = false
            currentLayerType = data.value
            // 矢量瓦片图层没有点切换样式
            if (currentLayerType === 'IGSVectorTile') {
              document.getElementById('button-point').style.display = 'none'
            } else {
              document.getElementById('button-point').style.display =
                'inline-block'
            }
            // 销毁多个图层
            removeAllLayer()
            // 加载图层
            addLayer()
          })
        })
      }

      //地图初始化函数
      function init() {
        // 初始化UI操作
        initUI()
        //初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //添加专题图
        addGeoJSONLayer()
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right">
      <form class="layui-form" action="">
        <div class="layui-form-item">
          <label class="layui-form-label">加载方式</label>
          <div class="layui-input-block layui-input-block-select">
            <select id="layerType" name="layerType" lay-filter="layerType">
              <option value="GeoJSON">GeoJSON</option>
              <option value="IGSFeature">IGSFeature</option>
              <option value="WFS">WFS</option>
              <option value="IGSVectorTile">IGSVectorTile</option>
            </select>
          </div>
        </div>
        <div class="layui-form-item change-feature-item">
          <label class="layui-form-label">切换要素样式</label>
          <div class="layui-input-block">
            <button
              type="button"
              class="layui-btn layui-btn-normal"
              id="button-point"
              onclick="changeStyleOfPoint()"
            >
              点
            </button>
            <button
              type="button"
              class="layui-btn layui-btn-normal"
              onclick="changeStyleOfLine()"
            >
              线
            </button>
            <button
              type="button"
              class="layui-btn layui-btn-normal"
              onclick="changeStyleOfRegion()"
            >
              区
            </button>
          </div>
        </div>
      </form>
    </div>
    <style type="text/css">
      .layui-panel-right {
        width: 345px;
        z-index: 999;
      }

      .change-feature-item {
        margin-top: 10px;
      }

      .layui-form-label {
        width: 86px;
      }
    </style>
  </body>
</html>
