<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>M3D-分段专题图</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <script>
      'use strict'
      // 定义三维视图的主要类
      let map
      let sceneView
      let viewer
      let layer
      let MapGISM3DSet
      let modelType = 1 // 当前加载的M3D版本类型，0表示M3D 2.0，1表示M3D 2.1
      let styleValue = 0 // 当前选中的渲染样式，0表示默认样式，1表示多图层渲染样式，2表示单图层渲染样式

      // 添加M3D 2.0白模
      function addM3D20SceneLayer() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/IGSSceneLayer.html
        layer = new zondy.layer.IGSSceneLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Scene/福田区白模-组图层-20/SceneServer'
        })
        map.add(layer)
      }

      // 添加M3D 2.1白模
      function addM3D21ModelCacheLayer() {
        // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/M3DModelCacheLayer.html
        layer = new zondy.layer.M3DModelCacheLayer({
          // 服务基地址
          url: 'http://webclient.smaryun.com:8200/3DData/ModelCache/M3D/2.1/福田区白模/合并/福田区白模_3857_result/福田区白模_3857_result.mcj',
          // 初始化参数
          extensionOptions: {
            // 开启自动跳转
            autoReset: true
          }
        })
        map.add(layer)
      }

      // 切换模型
      function changeModel(modelType) {
        // 切换模型之前先移除已加载的模型
        map.remove(layer)
        switch (modelType) {
          case 0:
            addM3D20SceneLayer()
            break
          case 1:
            addM3D21ModelCacheLayer()
            break
        }
      }

      // 切换renderer
      function changeRenderer(styleValue) {
        // M3D 2.0
        if (modelType === 0) {
          switch (styleValue) {
            case 0:
              // 切换到默认样式，即去除所有子图层的renderer
              layer.scenes[0].allSublayers.forEach(function (subLayer) {
                subLayer.renderer = null
              })
              break
            case 1:
              // 切换到多图层渲染样式，即为每一个子图层对象设置renderer
              layer.scenes[0].allSublayers.forEach(function (subLayer) {
                subLayer.renderer = m3d21MultiLayerRenderer
              })
              break
            case 2:
              // 切换到单图层渲染样式，只需要为单个子图层对象设置renderer，在设置前需要去除每个子图层对象的renderer
              changeRenderer(0)
              const sublayer = layer.scenes[0].findSublayerById('0-0')
              sublayer.renderer = m3d21MultiLayerRenderer
              break
          }
        }
        // M3D 2.1
        else if (modelType === 1) {
          switch (styleValue) {
            case 0:
              // 切换到默认样式，即去除图层对象的renderer
              layer.renderer = null
              break
            case 1:
              // 切换到多图层渲染样式，即为图层对象设置层渲染renderer
              layer.renderer = m3d21MultiLayerRenderer
              break
            case 2:
              // 切换到多图层渲染样式，即为图层对象设置层渲染renderer数组
              layer.renderer = [{
                // 子图层ID
                layerID: '4018555923',
                // 渲染renderer
                renderer: m3d21MultiLayerRenderer
              }]
              break
          }
        }
      }

      // 初始化示例UI操作
      function initUI() {
        layui.use(function () {
          var form = layui.form
          form.on('select(modelType)', function (data) {
            // 切换模型
            modelType = Number(data.value)
            changeModel(Number(data.value))
          })
        })
        layui.use(function () {
          var form = layui.form
          form.on('select(styleValue)', function (data) {
            // 切换renderer
            styleValue = Number(data.value)
            changeRenderer(Number(data.value))
          })
        })
      }

      // 初始化三维球体
      function initViewer() {
        // 初始化图层管理容器
        map = new zondy.Map()
        // 初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          // 视图id
          viewId: 'mapgis-3d-viewer',
          // 图层管理容器
          map: map
        })
        // 获取视图对象
        viewer = sceneView.getInnerView()
      }

      // 地图初始化函数
      function init() {
        // 初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        // 默认添加M3D 2.1白模
        addM3D21ModelCacheLayer()
        // 初始化示例UI操作
        initUI()
      }

      // 设置专题图渲染Renderer
      // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/ClassBreakRenderer.html
      const m3d21MultiLayerRenderer = new zondy.renderer.ClassBreakRenderer({
        // 专题图过滤字段名
        field: 'height',
        // 分段专题图过滤条件数组
        classBreakInfos: [
          {
            // 最小过滤范围，field对应的值大于等于minValue
            maxValue: 50,
            // 最大过滤范围，field对应的值小于maxValue
            minValue: 0,
            // 匹配到该值后的样式
            // M3D专题图仅支持SimpleFillSymbol符号
            // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/SimpleFillSymbol.html
            symbol: new zondy.symbol.SimpleFillSymbol({
              // 填充颜色
              // 参考API: http://webclient.smaryun.com/static/modules/common/api/common-mapgis/Color.html
              color: new zondy.Color(92, 94, 56, 0.8)
            })
          },
          {
            // 最小过滤范围，field对应的值大于等于minValue
            maxValue: 100,
            // 最大过滤范围，field对应的值小于maxValue
            minValue: 50,
            // 匹配到该值后的样式
            // M3D专题图仅支持SimpleFillSymbol符号
            symbol: new zondy.symbol.SimpleFillSymbol({
              // 填充颜色
              color: new zondy.Color(94, 212, 77, 0.8)
            })
          },
          {
            // 最小过滤范围，field对应的值大于等于minValue
            maxValue: 150,
            // 最大过滤范围，field对应的值小于maxValue
            minValue: 100,
            // 匹配到该值后的样式
            // M3D专题图仅支持SimpleFillSymbol符号
            symbol: new zondy.symbol.SimpleFillSymbol({
              // 填充颜色
              color: new zondy.Color(128, 128, 204, 0.8)
            })
          },
          {
            // 最小过滤范围，field对应的值大于等于minValue
            maxValue: 300,
            // 最大过滤范围，field对应的值小于maxValue
            minValue: 150,
            // 匹配到该值后的样式
            // M3D专题图仅支持SimpleFillSymbol符号
            symbol: new zondy.symbol.SimpleFillSymbol({
              // 填充颜色
              color: new zondy.Color(256, 0, 256, 0.8)
            })
          }
        ]
      })
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right">
      <form class="layui-form" action="">
        <div class="layui-form-item">
          <label class="layui-form-label">模型</label>
          <div
            class="layui-input-block"
            style="width: 180px; margin-bottom: 10px"
          >
            <select
              name="modelType"
              lay-verify="required"
              lay-filter="modelType"
              id="modelType"
            >
              <option value="0">M3D 2.0 白模</option>
              <option value="1" selected>M3D 2.1 白模</option>
            </select>
          </div>
        </div>
        <div class="layui-form-item">
          <label class="layui-form-label">渲染样式</label>
          <div class="layui-input-block" style="width: 180px">
            <select
              name="styleValue"
              lay-verify="required"
              lay-filter="styleValue"
            >
              <option value="0" selected>默认样式</option>
              <option value="1">多图层渲染样式</option>
              <option value="2">单图层渲染样式</option>
            </select>
          </div>
        </div>
      </form>
    </div>
  </body>
</html>
