<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <title>纹理使用</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"
    />
    <!--示例公共样式-->
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/css/style.css"
    />
    <script>
      'use strict'
      //定义三维视图的主要类
      let map, sceneView, viewer
      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //添加天地图
        viewer.scene.primitives.add(new primitive(options))
      }
      //初始化三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map,
          //额外参数
          extensionOptions: {
            //开启webgl2
            contextOptions: {
              requestWebgl2: true
            }
          }
        })
        //获取viewer对象
        viewer = sceneView.getInnerView()
        //隐藏地球
        viewer.scene.globe.show = false
        // 针对cesium10.7.4.10版本隐藏大气环境光
        if (viewer.scene.skyAtmosphere) {
          viewer.scene.skyAtmosphere.show = false
        }
        if (viewer.scene.sun.show) {
          viewer.scene.sun.show = false
        }
        if (viewer.scene.moon.show) {
          viewer.scene.moon.show = false
        }
        if (viewer.scene.globe.showGroundAtmosphere) {
          viewer.scene.globe.showGroundAtmosphere = false
        }
        //抗锯齿选项
        viewer.scene.fxaa = true
        viewer.scene.postProcessStages.fxaa.enabled = true
        //相机位置
        viewer.camera.lookAt(
          new Cesium.Cartesian3.fromDegrees(112.21, 31.1, 80),
          new Cesium.Cartesian3(1, 1, 1)
        )
      }

      //自定义片元着色器
      const fragmentShaderSource = `precision mediump sampler3D;
    #define epsilon 0.0001
    uniform float slice_size;
    uniform sampler3D volumnTexture;
    uniform vec3 halfdim;
    uniform float u_time;

    out vec4 color;

    in vec3 vOrigin;
    in vec3 vDirection;
    in vec2 vst;


    float getData(vec3 _pos){
        vec3 pos=_pos/(halfdim*2.);

        return texture(volumnTexture,pos).a;
    }
    vec2 hitBox( vec3 orig, vec3 dir ) {
        vec3 box_min = vec3( -halfdim );
        vec3 box_max = vec3( halfdim );
        vec3 inv_dir = 1.0 / dir;
        vec3 tmin_tmp = ( box_min - orig ) * inv_dir;
        vec3 tmax_tmp = ( box_max - orig ) * inv_dir;
        vec3 tmin = min( tmin_tmp, tmax_tmp );
        vec3 tmax = max( tmin_tmp, tmax_tmp );
        float t0 = max( tmin.x, max( tmin.y, tmin.z ) );
        float t1 = min( tmax.x, min( tmax.y, tmax.z ) );
        return vec2( t0, t1 );
    }
    vec3 normal( vec3 coord ) {
        if ( coord.x < epsilon ) return vec3( 1.0, 0.0, 0.0 );
        if ( coord.y < epsilon ) return vec3( 0.0, 1.0, 0.0 );
        if ( coord.z < epsilon ) return vec3( 0.0, 0.0, 1.0 );
        if ( coord.x > 1.0 - epsilon ) return vec3( - 1.0, 0.0, 0.0 );
        if ( coord.y > 1.0 - epsilon ) return vec3( 0.0, - 1.0, 0.0 );
        if ( coord.z > 1.0 - epsilon ) return vec3( 0.0, 0.0, - 1.0 );

        float step = 0.01;
        float x = getData( coord + vec3( - step, 0.0, 0.0 ) ) - getData( coord + vec3( step, 0.0, 0.0 ) );
        float y = getData( coord + vec3( 0.0, - step, 0.0 ) ) - getData( coord + vec3( 0.0, step, 0.0 ) );
        float z = getData( coord + vec3( 0.0, 0.0, - step ) ) - getData( coord + vec3( 0.0, 0.0, step ) );

        return normalize( vec3( x, y, z ) );
    }

    void main()
    {
        vec3 rayDir=normalize(vDirection);
        vec2 bounds=hitBox(vOrigin,rayDir);

        if(bounds.x>bounds.y) discard;
        bounds.x=max(bounds.x,0.0);

        vec3 p=vOrigin+bounds.x*rayDir;
        vec3 inc=1.0/abs(rayDir);
        float delta=min(inc.x,min(inc.y,inc.z));
        delta/=200.;

        for ( float t = bounds.x; t < bounds.y; t += delta ){
            float d=getData(p+halfdim);
            if(d>=(sin(u_time)+1.0)/3.0){
                color.rgb=normal(p+0.5)*0.001+(p*1.5+0.25);
                // color=vec4(d);
                color.a=1.;
                break;
            }
            p+=rayDir*delta;
        }

        if(color.a==0.0) discard;
    }
   `
      //自定义顶点着色器
      const vertexShaderSource = `
  in vec3 position;
  in vec2 st;

  out vec3 vOrigin;
  out vec3 vDirection;
  out vec2 vst;

  void main()
  {
      vOrigin=czm_encodedCameraPositionMCHigh+czm_encodedCameraPositionMCLow;
      vDirection=position-vOrigin;
      vst=st;

      gl_Position = czm_modelViewProjection * vec4(position,1.0);
  }
	`
      //自定义primitive
      class primitive {
        constructor(options) {
          this.drawCommand = undefined

          if (Cesium.defined(options)) {
            this.modelMatrix = options.modelMatrix
            this.geometry = options.geometry
            this.data = options.data
            this.halfdim = new Cesium.Cartesian3()
            Cesium.Cartesian3.divideByScalar(options.dim, 2, this.halfdim)
          }
        }
        createCommand(context) {
          if (!Cesium.defined(this.geometry)) return
          const geometry = Cesium.BoxGeometry.createGeometry(this.geometry)
          const attributelocations =
            Cesium.GeometryPipeline.createAttributeLocations(geometry)
          this.vertexarray = Cesium.VertexArray.fromGeometry({
            context: context,
            geometry: geometry,
            attributes: attributelocations
          })
          const renderstate = Cesium.RenderState.fromCache({
            depthTest: {
              enabled: true
            },
            cull: {
              enabled: false
            }
          })
          const shaderProgram = Cesium.ShaderProgram.fromCache({
            context: context,
            vertexShaderSource: vertexShaderSource,
            fragmentShaderSource: fragmentShaderSource,
            attributeLocations: attributelocations
          })
          const that = this
          that.uTime = 0.0
          viewer.scene.preRender.addEventListener(function (s, t) {
            const elaspTime = Cesium.JulianDate.now().secondsOfDay / 2
            that.uTime = elaspTime
          })
          const uniformmap = {
            slice_size() {
              return size
            },
            volumnTexture() {
              return that.getTexture(context)
            },
            halfdim() {
              return that.halfdim
            },
            u_time() {
              return that.uTime
            }
          }

          this.drawCommand = new Cesium.DrawCommand({
            boundingVolume: this.geometry.boundingSphere,
            modelMatrix: this.modelMatrix,
            pass: Cesium.Pass.OPAQUE,
            shaderProgram: shaderProgram,
            renderState: renderstate,
            vertexArray: this.vertexarray,
            uniformMap: uniformmap
          })
        }
        getTexture(context) {
          if (!this.texture) {
            const texture_size = Math.ceil(Math.sqrt(this.data.length))
            this.texture = new Cesium.Texture3D({
              width: size,
              height: size,
              depth: size,
              context: context,
              flipY: false,
              pixelFormat: Cesium.PixelFormat.ALPHA,
              pixelDataType: Cesium.ComponentDatatype.fromTypedArray(this.data),
              source: {
                width: texture_size,
                height: texture_size,
                arrayBufferView: this.data
              },
              sampler: new Cesium.Sampler({
                minificationFilter: Cesium.TextureMinificationFilter.LINEAR,
                magnificationFilter: Cesium.TextureMagnificationFilter.LINEAR
              })
            })
          }

          return this.texture
        }
        update(frameState) {
          if (!this.drawCommand) {
            this.createCommand(frameState.context)
          }
          frameState.commandList.push(this.drawCommand)
        }
        isDestroyed() {
          return false
        }
      }
      // 噪声算法，用于生成三维纹理数据
      function ImprovedNoise(options) {
        this._options = options
      }
      const _p = [
        151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,
        140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,
        120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57,
        177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74,
        165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122,
        60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54,
        65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169,
        200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3,
        64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85,
        212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170,
        213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,
        172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185,
        112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191,
        179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
        181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150,
        254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195,
        78, 66, 215, 61, 156, 180
      ]

      for (let i = 0; i < 256; i++) {
        _p[256 + i] = _p[i]
      }

      function fade(t) {
        return t * t * t * (t * (t * 6 - 15) + 10)
      }

      function lerp(t, a, b) {
        return a + t * (b - a)
      }

      function grad(hash, x, y, z) {
        const h = hash & 15
        const u = h < 8 ? x : y,
          v = h < 4 ? y : h === 12 || h === 14 ? x : z
        return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v)
      }
      ImprovedNoise.prototype.noise = function (x, y, z) {
        const floorX = Math.floor(x),
          floorY = Math.floor(y),
          floorZ = Math.floor(z)

        const X = floorX & 255,
          Y = floorY & 255,
          Z = floorZ & 255

        x -= floorX
        y -= floorY
        z -= floorZ

        const xMinus1 = x - 1,
          yMinus1 = y - 1,
          zMinus1 = z - 1

        const u = fade(x),
          v = fade(y),
          w = fade(z)

        const A = _p[X] + Y,
          AA = _p[A] + Z,
          AB = _p[A + 1] + Z,
          B = _p[X + 1] + Y,
          BA = _p[B] + Z,
          BB = _p[B + 1] + Z

        return lerp(
          w,
          lerp(
            v,
            lerp(u, grad(_p[AA], x, y, z), grad(_p[BA], xMinus1, y, z)),
            lerp(
              u,
              grad(_p[AB], x, yMinus1, z),
              grad(_p[BB], xMinus1, yMinus1, z)
            )
          ),
          lerp(
            v,
            lerp(
              u,
              grad(_p[AA + 1], x, y, zMinus1),
              grad(_p[BA + 1], xMinus1, y, zMinus1)
            ),
            lerp(
              u,
              grad(_p[AB + 1], x, yMinus1, zMinus1),
              grad(_p[BB + 1], xMinus1, yMinus1, zMinus1)
            )
          )
        )
      }

      const dim = new Cesium.Cartesian3(1, 1, 1)
      const geometry = Cesium.BoxGeometry.fromDimensions({
        vertexFormat: Cesium.VertexFormat.POSITION_AND_ST,
        dimensions: dim
      })
      const primitive_modelMatrix = Cesium.Matrix4.multiplyByTranslation(
        Cesium.Transforms.eastNorthUpToFixedFrame(
          Cesium.Cartesian3.fromDegrees(112.21, 31.1)
        ),
        new Cesium.Cartesian3(0.0, 0.0, 80),
        new Cesium.Matrix4()
      )
      const modelMatrix = primitive_modelMatrix
      // 对模型矩阵进行旋转
      const rotationMatrix = Cesium.Matrix4.fromRotationTranslation(
        Cesium.Matrix3.fromRotationX(Cesium.Math.toRadians(90)), // 旋转矩阵
        Cesium.Cartesian3.ZERO // 旋转中心点，这里设置为原点
      )

      Cesium.Matrix4.multiply(modelMatrix, rotationMatrix, modelMatrix) // 将旋转矩阵应用到模型矩阵上
      //生成三维纹理数据
      const size = 128
      const data = new Uint8Array(size * size * size)
      let dx, dy, dz
      let i = 0
      for (let z = 0; z < size; z++) {
        for (let y = 0; y < size; y++) {
          for (let x = 0; x < size; x++) {
            dx = (x * 1.0) / size
            dy = (y * 1.0) / size
            dz = (z * 1.0) / size
            const perling = new ImprovedNoise()
            const d = perling.noise(dx * 6.5, dy * 5.5, dz * 4.5)
            if (
              x > 32 + 8 * d &&
              x < 96 + 6 * d &&
              z > 32 + 7 * d &&
              z < 96 + 10 * d
            ) {
              data[i++] = (1.0 - dy) * 255 + 1
            } else {
              data[i++] = 255
            }
          }
        }
      }

      const options = {
        modelMatrix: modelMatrix,
        geometry: geometry,
        data: data,
        dim: dim
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
  </body>
</html>
