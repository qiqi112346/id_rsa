<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>自定义片元着色器</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <script>
      'use strict'
      //定义三维视图的主要类
      let map, sceneView, tileSet

      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        //创建切换Cesium版本的按钮
        createChangeTab()
        //添加天地图
        addTDT()
        //添加M3D
        addM3DModelCacheLayer()
        //初始化面板UI
        initUI()
      }

      //初始化三维球体
      function initViewer() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneView = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
      }

      //添加天地图
      function addTDT() {
        let TDTLayer = new zondy.layer.WMTSLayer({
          // 加载经纬度的影像地图
          url: 'http://t6.tianditu.gov.cn/vec_c/wmts',
          // 天地图必须加token，且token名为tk
          tokenKey: 'tk',
          // token请在天地图官网申请
          tokenValue: getTDTToken()
        })
        map.add(TDTLayer)
      }

      function initUI() {
        layui.use(function () {
          //监听选择的场景投放的内容
          layui.form.on('select(content)', function (data) {
            let type = data.value
            // 新建场景投放对象
            setCustom(type)
          })
        })
      }
      // 新建场景投放对象
      function setCustom(type) {
        // 0：高度渐变；1：光圈；2：呼吸灯；3：拉伸高度
        switch (type) {
          case '0':
            tileSet.customShader = getCustomShaderType0()
            break
          case '1':
            tileSet.customShader = getCustomShaderType1()
            break
          case '2':
            tileSet.customShader = getCustomShaderType2()
            break
          case '3':
            tileSet.customShader = getCustomShaderType3()
            break
          default:
            break
        }
      }

      //随高度渐变颜色和透明度
      function getCustomShaderType0() {
        // 获取Cesium版本号
        let currentCesiumVersion = localStorage.getItem('currentCesiumVersion')
        if (currentCesiumVersion === '10.7.2.10') {
          return new Cesium.CustomShader({
            //传入varying变量
            varyings: {
              //设置一个变量，注意varying变量仅用于顶点着色器像片元着色器传值，因此没有初始值
              u_test: {
                //类型，必须为Cesium.WebGLConstants里的类型
                type: Cesium.WebGLConstants.FLOAT
              }
            },
            //顶点着色器代码
            vertexShaderText:
            //在顶点着色器中，将当前顶点的y值赋给u_test
              'void vertexMain(float frameNumber, vec4 oid, inout vec4 position){\n' +
              '  u_test = position.y;\n' +
              '}\n',
            //片元着色器代码
            fragmentShaderText:
            //在片元着色器中，使用u_test的值
              'void fragmentMain(vec4 position, float frameNumber, vec4 oid, inout vec4 fragColor){\n' +
              //设置渐变颜色
              '   vec4 gradiantColor = vec4(0.0, 0.0, 1.0, 0.0);\n' +
              //获取当前顶点高度，注意这里的高度是相对于模型原点的，具体高度范围请从外包盒中获取
              //该模型地下有34米，为方便计算，抬高34米
              //在这里使用了varying变量
              '   float currentHeight = u_test + 34.0;\n' +
              //颜色从140到0进行渐变
              '   if(currentHeight > 0.0) {\n' +
              '       gradiantColor *= currentHeight / 140.0;\n' +
              //注意改变颜色是加法/减法，改变亮度是乘法
              '       fragColor += gradiantColor;\n' +
              '   }\n' +
              '}\n'
          })
        } else {
          // 参考API: http://webclient.smaryun.com/static/modules/cesium/api/cesium/CustomShader.html
          return new Cesium.CustomShader({
            fragmentShaderText: `
            void fragmentMain(FragmentInput fsInput, inout czm_modelMaterial material)
            {
              // 模型的底部最低高度，有可能为负值，表示有一部分模型在水平面以下
              float bottomHeight = -20.0;
              // 模型的顶部最高高度
              float topHeight = 120.0;
              // 高亮范围
              float lightRange = topHeight - bottomHeight;
              // 当前顶点距离底部高度
              float currentHeight = fsInput.attributes.positionMC.y - bottomHeight;
              // 当前顶点亮度
              float positionLight = (lightRange - currentHeight) / lightRange;
              // 修改模型光照颜色
              material.diffuse *= vec3(positionLight, positionLight, 1.0);
            }
          `,
          })
        }
      }

      //光圈效果
      function getCustomShaderType1() {
        // 获取Cesium版本号
        let currentCesiumVersion = localStorage.getItem('currentCesiumVersion')
        if (currentCesiumVersion === '10.7.2.10') {
          return new Cesium.CustomShader({
            fragmentShaderText:
            //参考1.87以上版本写法，必须重写fragmentMain方法
            //position：顶点坐标，frameNumber：帧时间，顶点的oid，fragColor：顶点颜色
              'void fragmentMain(vec4 position, float frameNumber, vec4 oid, inout vec4 fragColor){\n' +
              //获取当前顶点高度，注意这里的高度是相对于模型原点的，具体高度范围，请从模型的外包盒中获取
              //此处的最大高度为110米，最小高度为-34米，也是从外包盒里获取的
              '   float currentHeight = position.y + 34.0;\n' +
              //根据当前帧时间(czm_frameNumber)，获取当前顶点所处的周期
              '   float time = fract(frameNumber / 360.0);\n' +
              //获取当前高度占整体高度的百分比，0到1之间的值
              //clamp参考https://learn.microsoft.com/zh-cn/previous-versions/hh308289(v=vs.120)
              '   currentHeight = clamp(currentHeight / (110.0 + 34.0), 0.0, 1.0);\n' +
              //处理周期
              '   time = abs(time - 0.5) * 2.0;\n' +
              //根据高度和周期计算光圈
              '   float circle = step(0.005, abs(currentHeight - time));\n' +
              //更新颜色
              '   fragColor.rgb += fragColor.rgb * (1.0 - circle);\n' +
              '}\n'
          })
        } else {
          return new Cesium.CustomShader({
            fragmentShaderText: `
            void fragmentMain(FragmentInput fsInput, inout czm_modelMaterial material)
            {
              // 模型的底部最低高度，有可能为负值，表示有一部分模型在水平面以下
              float bottomHeight = -20.0;
              // 模型的顶部最高高度
              float topHeight = 120.0;
              // 光圈上下移动范围
              float lightRange = topHeight - bottomHeight;
              // 当前顶点距离底部高度
              float currentHeight = fsInput.attributes.positionMC.y - bottomHeight;
              // 当前光圈运行速度
              float circleTime = fract(czm_frameNumber / 360.0);
              circleTime = abs(circleTime - 0.5) * 2.0;
              // 当前光圈位置百分比
              float circlePercent = clamp(currentHeight / lightRange, 0.0, 1.0);
              // 当前运行周期内，顶点光照强度
              float positionLight = step(0.005, abs(circlePercent - circleTime));
              // 修改当前顶点光照强度，来显示光圈
              material.diffuse += material.diffuse * (1.0 - positionLight);
            }
          `,
          })
        }
      }

      //呼吸灯
      function getCustomShaderType2() {
        // 获取Cesium版本号
        let currentCesiumVersion = localStorage.getItem('currentCesiumVersion')
        if (currentCesiumVersion === '10.7.2.10') {
          return new Cesium.CustomShader({
            fragmentShaderText:
            //参考1.87以上版本写法，必须重写fragmentMain方法
            //position：顶点坐标，frameNumber：帧时间，顶点的oid，fragColor：顶点颜色
              'void fragmentMain(vec4 position, float frameNumber, vec4 oid, inout vec4 fragColor){\n' +
              //根据当前帧时间(czm_frameNumber)获取周期变化的亮度值，fract即webgl里面的取小数函数
              '   float currentLight = fract(frameNumber / 34.0) * 3.14159265;\n' +
              //根据亮度和高度过去呼吸灯颜色
              '   float breathLampColor = position.y / 110.0 / 2.0 + sin(currentLight) * 0.1;\n' +
              //修改当前颜色
              '   fragColor += vec4(51.0 / 255.0 * breathLampColor, 153.0 / 255.0 * breathLampColor, breathLampColor, 0.0);\n' +
              '}\n'
          })
        } else {
          return new Cesium.CustomShader({
            fragmentShaderText: `
            void fragmentMain(FragmentInput fsInput, inout czm_modelMaterial material)
            {
              // 模型的底部最低高度，有可能为负值，表示有一部分模型在水平面以下
              float bottomHeight = -20.0;
              // 模型的顶部最高高度
              float topHeight = 120.0;
              // 高亮范围
              float lightRange = topHeight - bottomHeight;
              // 当前顶点距离底部高度
              float currentHeight = fsInput.attributes.positionMC.y - bottomHeight;
              // 亮度随周期变化因子
              float lightFactor = fract(czm_frameNumber / lightRange) * 3.14159265 * 2.0;
              // 亮度，值越大越亮
              float brightness = 1.6;
              // 当前顶点亮度
              float positionLight = currentHeight / lightRange + sin(lightFactor) * brightness;
              // 确保最终亮度不低于1.0
              positionLight = max(1.0, positionLight);
              // 修改模型光照颜色
              material.diffuse *= vec3(1.0, 1.0, positionLight);
            }
          `,
          })
        }
      }

      //上面三种的组合
      function getCustomShaderType3() {
        // 获取Cesium版本号
        let currentCesiumVersion = localStorage.getItem('currentCesiumVersion')
        if (currentCesiumVersion === '10.7.2.10') {
          return new Cesium.CustomShader({
            fragmentShaderText:
            //参考1.87以上版本写法，必须重写fragmentMain方法
            //position：顶点坐标，frameNumber：帧时间，顶点的oid，fragColor：顶点颜色
              'void fragmentMain(vec4 position, float frameNumber, vec4 oid, inout vec4 fragColor){\n' +
              //获取当前顶点高度，注意这里的高度是相对于模型原点的，具体高度范围，请从模型的外包盒中获取
              //此处的最大高度为110米，最小高度为-34米
              '   float currentHeight = position.y + 34.0;\n' +
              //更新渐变颜色
              '   fragColor += vec4(51.0 / 255.0, 153.0 / 255.0, 1.0, 1.0) * currentHeight / 320.0;\n' +
              //高度在0到144之间，增加高亮
              '   if(currentHeight > 100.0) {\n' +
              '       fragColor *= 1.0 + 0.55 * (currentHeight - 100.0) / 60.0;\n' +
              '   }\n' +
              //根据当前帧时间(czm_frameNumber)，获取当前顶点所处的周期
              '   float time = fract(frameNumber / 360.0);\n' +
              //获取当前高度占整体高度的百分比，0到1之间的值
              //clamp参考https://learn.microsoft.com/zh-cn/previous-versions/hh308289(v=vs.120)
              '   currentHeight = clamp(currentHeight / 320.0, 0.0, 1.0);\n' +
              //处理周期
              '   time = abs(time - 0.5) * 2.0;\n' +
              //根据高度和周期计算光圈
              '   float circle = step(0.005, abs(currentHeight - time));\n' +
              //更新颜色
              '   fragColor.rgb += fragColor .rgb * (1.0 - circle);\n' +
              '}\n'
          })
        } else {
          return new Cesium.CustomShader({
            fragmentShaderText: `
            void fragmentMain(FragmentInput fsInput, inout czm_modelMaterial material)
            {
              // 模型的底部最低高度，有可能为负值，表示有一部分模型在水平面以下
              float bottomHeight = -20.0;
              // 模型的顶部最高高度
              float topHeight = 120.0;
              // 高亮范围
              float lightRange = topHeight - bottomHeight;
              // 当前顶点距离底部高度
              float currentHeight = fsInput.attributes.positionMC.y - bottomHeight;
              // 亮度随周期变化因子
              float lightFactor = fract(czm_frameNumber / lightRange) * 3.14159265 * 2.0;
              // 亮度，值越大越亮
              float brightness = 1.6;
              // 当前顶点亮度
              float positionLight = currentHeight / lightRange + sin(lightFactor) * brightness;
              // 确保最终亮度不低于1.0
              positionLight = max(1.0, positionLight);
              // 修改模型光照颜色，生成呼吸灯
              material.diffuse *= vec3(1.0, 1.0, positionLight);
              // 当前光圈运行速度
              float circleTime = fract(czm_frameNumber / 360.0);
              circleTime = abs(circleTime - 0.5) * 2.0;
              // 当前光圈位置百分比
              float circlePercent = clamp(currentHeight / lightRange, 0.0, 1.0);
              // 当前运行周期内，顶点光照强度
              float circlePositionLight = step(0.005, abs(circlePercent - circleTime));
              // 修改当前顶点光照强度，来显示光圈
              material.diffuse += material.diffuse * (1.0 - circlePositionLight);
            }
          `,
          })
        }
      }

      //添加M3D
      function addM3DModelCacheLayer() {
        let url =
          'http://webclient.smaryun.com:8200/3DData/ModelCache/M3D/1.0/ZondyFaceModels/ZondyFaceModels.mcj'
        let M3DLayer = new zondy.layer.M3DModelCacheLayer({
          url: url,
          // 初始化参数
          extensionOptions: {
            // 开启自动跳转
            autoReset: true
          }
        })
        map.add(M3DLayer)
        // 图层加载完毕
        M3DLayer.on('layerview-created', function (result) {
          //获取图层
          tileSet = sceneView.getInnerLayer(result.layer)
          //设置自定义着色器
          setCustom('0')
        })
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
    <div class="layui-panel layui-panel-right" style="width: 352px">
      <form class="layui-form" action="">
        <div class="sample-main-panel" style="border: none">
          <div class="layui-form-item">
            <label class="layui-form-label">着色效果</label>
            <div class="layui-input-block">
              <select lay-filter="content" id="shader-content">
                <option value="0" selected>高度渐变</option>
                <option value="1">光圈</option>
                <option value="2">呼吸灯</option>
                <option value="3">高度渐变+光圈+泛光</option>
              </select>
            </div>
          </div>
        </div>
      </form>
    </div>
  </body>
</html>
