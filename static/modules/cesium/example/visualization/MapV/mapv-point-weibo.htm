<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
    <title>点微博数据</title>
    <!--加载不同版本Cesium库-->
    <script src="http://webclient.smaryun.com/static/libs/loadCesium.js"></script>
    <!--引入mapv-->
        <script type="text/javascript" src="http://webclient.smaryun.com/static/libs/cdn/mapv/mapv.min.js"></script>
    <!--plugin脚本库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-cesium-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>

    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"/>
    <!--示例公共样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <script>
      'use strict'
      // 定义三维视图的主要类
      let viewer = null
      let sceneViewer = null
      let map = null

      function initMapVData() {
        httpGetPromise(
          'http://webclient.smaryun.com:8200/Vector/json/pointWeibo/weibo.json'
        ).then((rs) => {
          let data1 = []
          let data2 = []
          let data3 = []
          for (let i = 0; i < rs[0].length; i++) {
            let geoCoord = rs[0][i].geoCoord
            data1.push({
              geometry: {
                type: 'Point',
                coordinates: geoCoord
              }
            })
          }

          for (let i = 0; i < rs[1].length; i++) {
            let geoCoord = rs[1][i].geoCoord
            data2.push({
              geometry: {
                type: 'Point',
                coordinates: geoCoord
              },
              time: Math.random() * 10
            })
          }

          for (let i = 0; i < rs[2].length; i++) {
            let geoCoord = rs[2][i].geoCoord
            data3.push({
              geometry: {
                type: 'Point',
                coordinates: geoCoord
              }
            })
          }
          // 构建对应的dataset
          let dataSet1 = new mapv.DataSet(data1)
          // 设置对应的参数
          // https://github.com/huiyan-fe/mapv/blob/master/API.md
          let options1 = {
            context: '2d', //cesium必须设置画布为2d
            fillStyle: 'rgba(200, 200, 0, 0.8)',
            bigData: 'Point',
            size: 0.7,
            draw: 'simple'
          }
          // 声明cesium的mapv图层并将其显示到三维球上
          let layer = new zondy.layer.MapVLayer({
            data: dataSet1,
            mapVOptions: options1
          })

          map.add(layer)

          let dataSet2 = new mapv.DataSet(data2)
          let options2 = {
            context: '2d', //cesium必须设置画布为2d
            fillStyle: 'rgba(255, 250, 0, 0.8)',
            size: 0.7,
            bigData: 'Point',
            draw: 'simple'
          }
          let layer2 = new zondy.layer.MapVLayer({
            data: dataSet2,
            mapVOptions: options2
          })

          map.add(layer2)

          let dataSet3 = new mapv.DataSet(data3)
          let options3 = {
            context: '2d', //cesium必须设置画布为2d
            fillStyle: 'rgba(255, 250, 250, 0.6)',
            size: 0.7,
            bigData: 'Point',
            draw: 'simple'
          }
          // 声明cesium的mapv图层并将其显示到三维球上
          let layer3 = new zondy.layer.MapVLayer({
            data: dataSet3,
            mapVOptions: options3
          })

          map.add(layer3)

          let dataSet4 = new mapv.DataSet(data2)
          let options4 = {
            context: '2d', //cesium必须设置画布为2d
            fillStyle: 'rgba(255, 250, 250, 0.9)',
            size: 1.1,
            draw: 'simple',
            bigData: 'Point',
            animation: {
              stepsRange: {
                start: 0,
                end: 10
              },
              trails: 1,
              duration: 6
            }
          }
          // 声明cesium的mapv图层并将其显示到三维球上
          let layer4 = new zondy.layer.MapVLayer({
            data: dataSet4,
            mapVOptions: options4
          })

          map.add(layer4)
        })
      }

      function init() {
        //初始化图层管理容器
        map = new zondy.Map()
        //初始化地图视图对象
        sceneViewer = new zondy.cesium.SceneView({
          //视图id
          viewId: 'mapgis-3d-viewer',
          //图层管理容器
          map: map
        })
        //创建切换Cesium版本的按钮
        createChangeTab()
        viewer = sceneViewer.getInnerView()
        // 添加天地图
        const tdtUrl = 'https://t{s}.tianditu.gov.cn/';
        // 服务负载子域
        const subdomains=['0','1','2','3','4','5','6','7'];
        // 叠加影像服务
        const tdtProvider = new zondy.cesium.UrlTemplateImageryProvider({
            url: tdtUrl + 'DataServer?T=img_w&x={x}&y={y}&l={z}&tk=' + getTDTToken(),
            subdomains: subdomains,
            tilingScheme : new Cesium.WebMercatorTilingScheme(),
            maximumLevel : 18
        });
        viewer.imageryLayers.addImageryProvider(tdtProvider)
        initMapVData()
      }

      // 发送请求获取数据
      function httpGetPromise(url) {
        return new Promise(function (resolve, reject) {
          const handler = function () {
            if (this.readyState !== 4) {
              return
            }
            if (this.status === 200) {
              resolve(this.response)
            } else {
              reject(new Error(this.statusText))
            }
          }
          const client = new XMLHttpRequest()
          client.open('GET', url)
          client.onreadystatechange = handler
          client.responseType = 'json'
          client.setRequestHeader('Accept', 'application/json')
          client.send()
        })
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-3d-viewer"></div>
  </body>
</html>
