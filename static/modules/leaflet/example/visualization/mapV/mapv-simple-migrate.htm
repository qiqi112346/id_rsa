<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>单一迁徙轨迹</title>
    <!--引入mapv-->
    <script type="text/javascript" src="http://webclient.smaryun.com/static/libs/cdn/mapv/mapv.min.js"></script>
    <!--该库集成了leaflet与MapGIS IGServer for JavaScript脚本库-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/leaflet/leaflet.css"/>
    <script src="http://webclient.smaryun.com/static/libs/cdn/leaflet/leaflet.js"></script>
    <!--plugin库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-leaflet-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <!--css-->
    <script type="text/javascript">
      //使用严格模式
      'use strict'
      const { WebTileLayer } = zondy.layer
      const { initializeCRS, initializeOptions } = zondy.leaflet.util
      // 初始化示例
      function init() {
        // 添加图层
        addLayer()
      }

      // 添加图层
      function addLayer() {
        // 构造一个网路瓦片图层对象
        const layer = new WebTileLayer({
          // 服务基地址
          url: 'http://t1.tianditu.com/DataServer?T=img_c&x={col}&y={row}&l={level}',
          // token名
          tokenKey: 'tk',
          // token值
          tokenValue: getTDTToken()
        })
        // 加载元数据
        layer.load().then(function () {
          // 构造Leaflet地图视图的初始化参数
          const crs = initializeCRS(layer)
          const mapViewOptions = {
            crs: crs,
            center: [31.147781205532336,112.21905099757561],
            zoom: 4
          }
          // 构造Leaflet地图视图对象
          const map = L.map('mapgis-viewer', mapViewOptions)
          // 构造Leaflet瓦片图层的初始化参数
          const layerOptions = initializeOptions(layer)
          // 添加Leaflet瓦片图层到地图视图中
          new zondy.leaflet.layer.WebTileLayer(layer.url, layerOptions).addTo(map)
          // 添加MapV图层
          addMapVLayer(map)
        })

        // 添加MapV图层
        function addMapVLayer(map) {
          httpGetPromise(
            'http://webclient.smaryun.com:8200/Vector/json/simpleMigrate/china.json'
          ).then((geojson) => {
            let geojsonOptions = {
              context: '2d',
              gradient: {
                0: 'rgba(55, 50, 250, 0.4)',
                1: 'rgba(55, 50, 250, 1)'
              },
              max: 354551,
              draw: 'intensity'
            }

            let geojsonDataSet = mapv.geojson.getDataSet(geojson)

            let to = '北京'

            let qianxi = new mapv.DataSet([
              {
                from: '河北',
                count: 354551,
                to: to
              },
              {
                from: '天津',
                count: 97323,
                to: to
              },
              {
                from: '山东',
                count: 28664,
                to: to
              },
              {
                from: '山西',
                count: 16650,
                to: to
              },
              {
                from: '辽宁',
                count: 14379,
                to: to
              },
              {
                from: '河南',
                count: 10980,
                to: to
              },
              {
                from: '内蒙古',
                count: 9603,
                to: to
              },
              {
                from: '江苏',
                count: 4536,
                to: to
              },
              {
                from: '上海',
                count: 3556,
                to: to
              },
              {
                from: '广东',
                count: 2600,
                to: to
              }
            ])

            let qianxiData = qianxi.get()

            let lineData = []
            let pointData = []
            let textData = []
            let timeData = []

            let citys = {}

            for (let i = 0; i < qianxiData.length; i++) {
              let fromCenter = mapv.utilCityCenter.getCenterByCityName(
                qianxiData[i].from
              )
              let toCenter = mapv.utilCityCenter.getCenterByCityName(
                qianxiData[i].to
              )
              if (!fromCenter || !toCenter) {
                continue
              }
              citys[qianxiData[i].from] = qianxiData[i].count
              citys[qianxiData[i].to] = 100
              pointData.push({
                geometry: {
                  type: 'Point',
                  coordinates: [fromCenter.lng, fromCenter.lat]
                }
              })
              pointData.push({
                geometry: {
                  type: 'Point',
                  coordinates: [toCenter.lng, toCenter.lat]
                }
              })
              textData.push({
                geometry: {
                  type: 'Point',
                  coordinates: [fromCenter.lng, fromCenter.lat]
                },
                text: qianxiData[i].from
              })
              textData.push({
                geometry: {
                  type: 'Point',
                  coordinates: [toCenter.lng, toCenter.lat]
                },
                text: qianxiData[i].to
              })

              let curve = mapv.utilCurve.getPoints([fromCenter, toCenter])

              for (let j = 0; j < curve.length; j++) {
                timeData.push({
                  geometry: {
                    type: 'Point',
                    coordinates: curve[j]
                  },
                  count: 1,
                  time: j
                })
              }

              lineData.push({
                geometry: {
                  type: 'LineString',
                  coordinates: curve
                  //coordinates: [[fromCenter.lng, fromCenter.lat], [toCenter.lng, toCenter.lat]]
                },
                count: 30 * Math.random()
              })
            }

            let data = geojsonDataSet.get({
              filter: function (item) {
                if (!citys[item.name]) {
                  return false
                }

                item.count = citys[item.name]
                return true
              }
            })
            geojsonDataSet = new mapv.DataSet(data)
            // 添加MapV图层
            new zondy.leaflet.layer.MapVLayer(map, geojsonDataSet, geojsonOptions).addTo(
              map
            );

            // 构建对应的dataset
            let textDataSet = new mapv.DataSet(textData)
            // 设置对应的参数
            // https://github.com/huiyan-fe/mapv/blob/master/API.md
            let textOptions = {
              draw: 'text',
              font: '14px Arial',
              fillStyle: 'white',
              shadowColor: 'yellow',
              shadowBlue: 10,
              zIndex: 11,
              shadowBlur: 10
            }
            // 添加MapV图层
            new zondy.leaflet.layer.MapVLayer(map, textDataSet, textOptions).addTo(
              map
            );

            let lineDataSet = new mapv.DataSet(lineData)
            // https://github.com/huiyan-fe/mapv/blob/master/API.md
            let lineOptions = {
              strokeStyle: 'rgba(255, 250, 50, 0.8)',
              shadowColor: 'rgba(255, 250, 50, 1)',
              shadowBlur: 20,
              lineWidth: 2,
              zIndex: 100,
              draw: 'simple'
            }
            // 添加MapV图层
            new zondy.leaflet.layer.MapVLayer(map, lineDataSet, lineOptions).addTo(
              map
            );

            // https://github.com/huiyan-fe/mapv/blob/master/API.md
            let pointOptions = {
              fillStyle: 'rgba(254,175,3,0.7)',
              shadowColor: 'rgba(55, 50, 250, 0.5)',
              shadowBlur: 10,
              size: 5,
              zIndex: 10,
              draw: 'simple'
            }

            let pointDataSet = new mapv.DataSet(pointData)
            // 添加MapV图层
            new zondy.leaflet.layer.MapVLayer(map, pointDataSet, pointOptions).addTo(
              map
            );

            let timeDataSet = new mapv.DataSet(timeData)

            // https://github.com/huiyan-fe/mapv/blob/master/API.md
            let timeOptions = {
              fillStyle: 'rgba(255, 250, 250, 0.5)',
              zIndex: 200,
              size: 2.5,
              animation: {
                type: 'time',
                stepsRange: {
                  start: 0,
                  end: 50
                },
                trails: 10,
                duration: 2
              },
              draw: 'simple'
            }
            // 添加MapV图层
            new zondy.leaflet.layer.MapVLayer(map, timeDataSet, timeOptions).addTo(
              map
            );
          })
        }
      }

      // 发送请求获取数据
      function httpGetPromise(url) {
        return new Promise(function (resolve, reject) {
          const handler = function () {
            if (this.readyState !== 4) {
              return
            }
            if (this.status === 200) {
              resolve(this.response)
            } else {
              reject(new Error(this.statusText))
            }
          }
          const client = new XMLHttpRequest()
          client.open('GET', url)
          client.onreadystatechange = handler
          client.responseType = 'json'
          client.setRequestHeader('Accept', 'application/json')
          client.send()
        })
      }
    </script>
</head>

<body onload="init();">
<div id="mapgis-viewer" style="position: absolute; display: flex; width: 100%; height: 100%"></div>
</body>
</html>
