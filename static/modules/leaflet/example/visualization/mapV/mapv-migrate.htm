<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>迁移图</title>
    <!--引入mapv-->
    <script type="text/javascript" src="http://webclient.smaryun.com/static/libs/cdn/mapv/mapv.min.js"></script>
    <!--该库集成了leaflet与MapGIS IGServer for JavaScript脚本库-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/leaflet/leaflet.css"/>
    <script src="http://webclient.smaryun.com/static/libs/cdn/leaflet/leaflet.js"></script>
    <!--plugin库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-leaflet-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <!--css-->
    <script type="text/javascript">
      //使用严格模式
      'use strict'
      let timeData = []
      let data  = []
      const { WebTileLayer } = zondy.layer
      const { initializeCRS, initializeOptions } = zondy.leaflet.util
      // 初始化示例
      function init() {
        // 添加图层
        addLayer()
      }

      // 添加图层
      function addLayer() {
        // 构造一个网路瓦片图层对象
        const layer = new WebTileLayer({
          // 服务基地址
          url: 'http://t1.tianditu.com/DataServer?T=img_c&x={col}&y={row}&l={level}',
          // token名
          tokenKey: 'tk',
          // token值
          tokenValue: getTDTToken()
        })
        // 加载元数据
        layer.load().then(function () {
          // 构造Leaflet地图视图的初始化参数
          const crs = initializeCRS(layer)
          const mapViewOptions = {
            crs: crs,
            center: [31.147781205532336,112.21905099757561],
            zoom: 4
          }
          // 构造Leaflet地图视图对象
          const map = L.map('mapgis-viewer', mapViewOptions)
          // 构造Leaflet瓦片图层的初始化参数
          const layerOptions = initializeOptions(layer)
          // 添加Leaflet瓦片图层到地图视图中
          new zondy.leaflet.layer.WebTileLayer(layer.url, layerOptions).addTo(map)
          // 添加MapV图层
          addMapVLayer(map)
        })

        // 添加MapV图层
        function addMapVLayer(map) {
          function curive(fromPoint, endPoint, n) {
            var delLng = (endPoint.lng - fromPoint.lng) / n
            var delLat = (endPoint.lat - fromPoint.lat) / n

            for (var i = 0; i < n; i++) {
              var pointNLng = fromPoint.lng + delLng * i
              var pointNLat = fromPoint.lat + delLat * i
              timeData.push({
                geometry: {
                  type: 'Point',
                  coordinates: [pointNLng, pointNLat]
                },
                count: 1,
                time: i
              })
            }
          }
          // 构造数据
          httpGetPromise(
            'http://webclient.smaryun.com:8200/Vector/csv/migrate/qianxi-time.csv'
          ).then((rs) => {
            let items = rs.split('|')
            for (let i = 0; i < items.length; i++) {
              let itemArr = items[i].split(/\n/)
              for (let k = 0; k < itemArr.length; k++) {
                if (!!itemArr[k]) {
                  let item = itemArr[k].split(/\t/)
                  if (item[0] === '起点城市' || item[0] === '迁出城市') {
                    var cityBegin = item[1]
                  }
                  if (
                    item[0] !== '起点城市' ||
                    (item[0] !== '迁出城市' && item.length > 1)
                  ) {
                    let cityCenter1 = mapv.utilCityCenter.getCenterByCityName(
                      item[0].replace(/市|省/, '')
                    )
                    let cityCenter2 = mapv.utilCityCenter.getCenterByCityName(
                      cityBegin.replace(/市|省/, '').trim()
                    )
                    if (cityCenter1) {
                      if (Math.random() > 0.7) {
                        curive(cityCenter2, cityCenter1, 50)
                      }
                      data.push({
                        geometry: {
                          type: 'LineString',
                          coordinates: [
                            [cityCenter1.lng, cityCenter1.lat],
                            [cityCenter2.lng, cityCenter2.lat]
                          ]
                        },
                        count: 100 * Math.random()
                      })
                    }
                  }
                }
              }
            }
            // 构建对应的dataset
            let dataSet1 = new mapv.DataSet(data)
            // 设置对应的参数
            // https://github.com/huiyan-fe/mapv/blob/master/API.md
            let options1 = {
              trokeStyle: 'rgba(55, 50, 250, 0.3)',
              globalCompositeOperation: 'lighter',
              shadowColor: 'rgba(55, 50, 250, 0.5)',
              methods: {
                click: function (item) {}
              },
              gradient: {
                0: 'rgba(55, 50, 250, 0)',
                1: 'rgba(55, 50, 250, 1)'
              },
              lineWidth: 0.2,
              draw: 'intensity'
            }

            // 添加MapV图层
            new zondy.leaflet.layer.MapVLayer(map, dataSet1, options1).addTo(
              map
            );
            // 构建对应的dataset
            let dataSet2 = new mapv.DataSet(timeData)
            let options2 = {
              fillStyle: 'rgba(255, 250, 250, 0.9)',
              size: 0.5,
              animation: {
                type: 'time',
                stepsRange: {
                  start: 0,
                  end: 50
                },
                trails: 1,
                duration: 5
              },
              draw: 'simple'
            }
            // 添加MapV图层
            new zondy.leaflet.layer.MapVLayer(map, dataSet2, options2).addTo(
              map
            );
          })
        }
      }

      // 发送请求获取数据
      function httpGetPromise(url) {
        return new Promise(function (resolve, reject) {
          const handler = function () {
            if (this.readyState !== 4) {
              return
            }
            if (this.status === 200) {
              resolve(this.response)
            } else {
              reject(new Error(this.statusText))
            }
          }
          const client = new XMLHttpRequest()
          client.open('GET', url)
          client.onreadystatechange = handler
          client.responseType = 'text/csv'
          client.setRequestHeader('Accept', 'application/json')
          client.send()
        })
      }
    </script>
</head>

<body onload="init();">
<div
        id="mapgis-viewer"
        style="position: absolute; display: flex; width: 100%; height: 100%"
></div>
</body>
</html>
