<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>轨迹汇聚</title>
    <!--引入mapv-->
    <script type="text/javascript" src="http://webclient.smaryun.com/static/libs/cdn/mapv/mapv.min.js"></script>
    <!--该库集成了leaflet与MapGIS IGServer for JavaScript脚本库-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/leaflet/leaflet.css"/>
    <script src="http://webclient.smaryun.com/static/libs/cdn/leaflet/leaflet.js"></script>
    <!--plugin库-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-common.min.js"></script>
    <script src="http://webclient.smaryun.com/static/libs/cdn/zondyclient/webclient-leaflet-plugin.min.js"></script>
    <script src="http://webclient.smaryun.com/static/assets/js/TDT-token.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css"/>
    <!--css-->
    <script type="text/javascript">
      //使用严格模式
      'use strict'
      const { WebTileLayer } = zondy.layer
      const { initializeCRS, initializeOptions } = zondy.leaflet.util
      // 初始化示例
      function init() {
        // 添加图层
        addLayer()
      }

      // 添加图层
      function addLayer() {
        // 构造一个网路瓦片图层对象
        const layer = new WebTileLayer({
          // 服务基地址
          url: 'http://t1.tianditu.com/DataServer?T=img_c&x={col}&y={row}&l={level}',
          // token名
          tokenKey: 'tk',
          // token值
          tokenValue: getTDTToken()
        })
        // 加载元数据
        layer.load().then(function () {
          // 构造Leaflet地图视图的初始化参数
          const crs = initializeCRS(layer)
          const mapViewOptions = {
            crs: crs,
            center: [31.147781205532336,112.21905099757561],
            zoom: 4
          }
          // 构造Leaflet地图视图对象
          const map = L.map('mapgis-viewer', mapViewOptions)
          // 构造Leaflet瓦片图层的初始化参数
          const layerOptions = initializeOptions(layer)
          // 添加Leaflet瓦片图层到地图视图中
          new zondy.leaflet.layer.WebTileLayer(layer.url, layerOptions).addTo(map)
          // 添加MapV图层
          addMapVLayer(map)
        })

        // 添加MapV图层
        function addMapVLayer(map) {
          let randomCount = 500

          let node_data = {
            0: {
              x: 108.154518,
              y: 36.643346
            },
            1: {
              x: 121.485124,
              y: 31.235317
            }
          }

          let edge_data = [
            {
              source: '1',
              target: '0'
            }
          ]

          let citys = [
            '北京',
            '天津',
            '上海',
            '重庆',
            '石家庄',
            '太原',
            '呼和浩特',
            '哈尔滨',
            '长春',
            '沈阳',
            '济南',
            '南京',
            '合肥',
            '杭州',
            '南昌',
            '福州',
            '郑州',
            '武汉',
            '长沙',
            '广州',
            '南宁',
            '西安',
            '银川',
            '兰州',
            '西宁',
            '乌鲁木齐',
            '成都',
            '贵阳',
            '昆明',
            '拉萨',
            '海口'
          ]

          // 构造数据
          for (let i = 1; i < randomCount; i++) {
            let cityCenter = mapv.utilCityCenter.getCenterByCityName(
              citys[parseInt(Math.random() * citys.length)]
            )
            node_data[i] = {
              x: cityCenter.lng - 5 + Math.random() * 10,
              y: cityCenter.lat - 5 + Math.random() * 10
            }
            edge_data.push({
              source: ~~(i * Math.random()),
              target: '0'
            })
          }

          let fbundling = mapv
            .utilForceEdgeBundling()
            .nodes(node_data)
            .edges(edge_data)

          let results = fbundling()

          let data = []
          let timeData = []

          for (let i = 0; i < results.length; i++) {
            let line = results[i]
            let coordinates = []
            for (let j = 0; j < line.length; j++) {
              coordinates.push([line[j].x, line[j].y])
              timeData.push({
                geometry: {
                  type: 'Point',
                  coordinates: [line[j].x, line[j].y]
                },
                count: 1,
                time: j
              })
            }

            data.push({
              geometry: {
                type: 'LineString',
                coordinates: transformCoords(coordinates)
              }
            })

            function transformCoords(coordinates) {
              let coords = []
              coordinates.map(function (coordinate) {
                coords.push(coordinate)
              })
              return coords
            }
          }

          // 构建对应的dataset
          let dataSet1 = new mapv.DataSet(data)

          // 设置对应的参数
          // https://github.com/huiyan-fe/mapv/blob/master/API.md
          let options1 = {
            strokeStyle: 'rgba(55, 50, 250, 0.3)',
            globalCompositeOperation: 'lighter',
            shadowColor: 'rgba(55, 50, 250, 0.5)',
            shadowBlur: 10,
            lineWidth: 1.0,
            draw: 'simple'
          }

          // 构建对应的dataset
          let dataSet2 = new mapv.DataSet(timeData)

          let options2 = {
            fillStyle: 'rgba(255, 250, 250, 0.9)',
            globalCompositeOperation: 'lighter',
            size: 1.5,
            animation: {
              type: 'time',
              stepsRange: {
                start: 0,
                end: 100
              },
              trails: 1,
              duration: 5
            },
            draw: 'simple'
          }

          // 添加MapV图层
          new zondy.leaflet.layer.MapVLayer(map, dataSet1, options1).addTo(
            map
          );

          new zondy.leaflet.layer.MapVLayer(map, dataSet2, options2).addTo(
            map
          );
        }
      }
    </script>
</head>

<body onload="init();">
<div
        id="mapgis-viewer"
        style="position: absolute; display: flex; width: 100%; height: 100%"
></div>
</body>
</html>
