<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <title>聚合专题图（表达式）</title>
    <!-- 引入地图引擎库 -->
    <script include="engine:leaflet cesium" src="http://webclient.smaryun.com/static/libs/include-lib-local-upgrade.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"
    />
    <!--示例公共样式-->
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/css/style.css"
    />
    <script>
      'use strict'
      // 定义三维视图的主要类
      let map, view
      // 点、线、区要素图层
      let layerOfPoint, layerOfLine, layerOfRegion
      // 样式颜色是否随机的标识
      let isRandom = false
      // 当前加载图层的类型
      let currentLayerType = 'IGSFeature'
      // 获取构造函数
      const { renderer, symbol, Map, Color } = zondy
      const { SimpleRenderer, ClusterRenderer } = renderer
      const {
        SimpleMarkerSymbol,
        SimpleLineSymbol,
        SimpleFillSymbol,
        TextSymbol
      } = symbol
      const { GeoJSONLayer, IGSFeatureLayer, WFSLayer } = zondy.layer

      //获取点renderer
      function getRendererOfPoint() {
        // 聚合专题图
        return new ClusterRenderer({
          // 最小混合聚合数量。大于等于此值进行混合聚类，小于此值则优先以分组类型聚类。
          minHybridClusterCount: 50,
          // 聚类冲突策略
          deconflictionStrategy: "static",
          // 根据表达式设置聚类的样式
          // 表达式内目前可以支持的默认参数
          // 1.$is_same_group 类型为布尔型，表示聚类簇内是否同组
          // 2.$cluster_count 类型为数值型，表示聚类簇数目
          valueExpression: `when(
            $feature.FID >=0 and  $feature.FID < 300 and $is_same_group, '类型1'
           $feature.FID >=300 and  $feature.FID < 700 and $is_same_group, '类型2',
           $feature.FID >=700 and  $feature.FID < 1000 and $is_same_group, '类型3',
           $feature.FID >=1000 and  $feature.FID < 1300 and $is_same_group, '类型4',
           $feature.FID >=1300 and $is_same_group, '类型5',
            !$is_same_group, '合并样式'
          , '未分类样式')`,
          // 聚类参数
          clusterInfos: [
            // 聚类分段2
            {
              value: "类型1",
              // 聚类文字样式
              labelExpressionInfo: {
                expression: "'A_' + $cluster_count",
              },
              labelSymbol: new TextSymbol({
                // 文字颜色
                color: "#000000",
                // 文字大小
                font: {
                  size: 15,
                  family: "SimHei",
                },
                haloColor: "#ffffff",
                haloSize: 3,
              }),
              // 聚类符号样式
              symbol: new SimpleMarkerSymbol({
                // 符号颜色
                color: "rgba(241, 211, 87, 0.6)",
                // 符号大小
                size: 30,
                // 符号外边线样式
                outline: {
                  // 外边线颜色
                  color: "rgba(240, 194, 12, 0.6)",
                  // 外边线宽度
                  width: 5,
                },
              }),
            },
            // 聚类分段3
            {
              value: "类型2",
              // 聚类文字样式
              labelExpressionInfo: {
                expression: "'B_' + $cluster_count",
              },
              labelSymbol: new TextSymbol({
                // 文字颜色
                color: "#000000",
                // 文字大小
                font: {
                  size: 15,
                  family: "SimHei",
                },
                haloColor: "#ffffff",
                haloSize: 3,
              }),
              // 聚类符号样式
              symbol: new SimpleMarkerSymbol({
                // 符号颜色
                color: "rgba(253, 156, 115, 0.6)",
                // 符号大小
                size: 30,
                // 符号外边线样式
                outline: {
                  // 外边线颜色
                  color: "rgba(241, 128, 23, 0.6)",
                  // 外边线宽度
                  width: 5,
                },
              }),
            },
            {
              value: "类型3",
              // 聚类文字样式
              labelExpressionInfo: {
                expression: "'C_' + $cluster_count",
              },
              labelSymbol: new TextSymbol({
                // 文字颜色
                color: "#000000",
                // 文字大小
                font: {
                  size: 15,
                  family: "SimHei",
                },
                haloColor: "#ffffff",
                haloSize: 3,
              }),
              // 聚类符号样式
              symbol: new SimpleMarkerSymbol({
                // 符号颜色
                color: "rgba(37,158,82,0.6)",
                // 符号大小
                size: 30,
                // 符号外边线样式
                outline: {
                  // 外边线颜色
                  color: "rgba(181,208,197,1)",
                  // 外边线宽度
                  width: 5,
                },
              }),
            },
            {
              value: "类型4",
              // 聚类文字样式
              labelExpressionInfo: {
                expression: "'D_' + $cluster_count",
              },
              labelSymbol: new TextSymbol({
                // 文字颜色
                color: "#000000",
                // 文字大小
                font: {
                  size: 15,
                  family: "SimHei",
                },
                haloColor: "#ffffff",
                haloSize: 3,
              }),
              // 聚类符号样式
              symbol: new SimpleMarkerSymbol({
                // 符号颜色
                color: "rgba(227,33,33,0.6)",
                // 符号大小
                size: 30,
                // 符号外边线样式
                outline: {
                  // 外边线颜色
                  color: "rgba(166,87,87, 0.6)",
                  // 外边线宽度
                  width: 5,
                },
              }),
            },
            {
              value: "类型5",
              // 聚类文字样式
              labelExpressionInfo: {
                expression: "'E_' + $cluster_count",
              },
              labelSymbol: new TextSymbol({
                // 文字颜色
                color: "#000000",
                // 文字大小
                font: {
                  size: 15,
                  family: "SimHei",
                },
                haloColor: "#ffffff",
                haloSize: 3,
              }),
              // 聚类符号样式
              symbol: new SimpleMarkerSymbol({
                // 符号颜色
                color: "rgba(178,149,202, 0.6)",
                // 符号大小
                size: 30,
                // 符号外边线样式
                outline: {
                  // 外边线颜色
                  color: "rgba(199,56,188 , 0.6)",
                  // 外边线宽度
                  width: 5,
                },
              }),
            },
            {
              value: "合并样式",
              // 聚类文字样式
              labelExpressionInfo: {
                expression: "'H_' + $cluster_count",
              },
              labelSymbol: new TextSymbol({
                // 文字颜色
                color: "#000000",
                // 文字大小
                font: {
                  size: 15,
                  family: "SimHei",
                },
                haloColor: "#ffffff",
                haloSize: 3,
              }),
              // 聚类符号样式
              symbol: new SimpleMarkerSymbol({
                // 符号颜色
                color: "rgba(140, 206, 226, 0.6)",
                // 符号大小
                size: 30,
                // 符号外边线样式
                outline: {
                  // 外边线颜色
                  color: "rgba(57, 121, 204, 0.6)",
                  // 外边线宽度
                  width: 5,
                },
              }),
            },
          ],
          defaultLabelSymbol: new TextSymbol({
            // 文字颜色
            color: "#000000",
            // 文字大小
            font: {
              size: 15,
              family: "SimHei",
            },
            haloColor: "#ffffff",
            haloSize: 3,
          }),
          defaultSymbol: new SimpleMarkerSymbol({
            // 符号颜色
            color: "rgba(240, 194, 12, 0.6)",
            // 符号大小
            size: 30,
            // 符号外边线样式
            outline: {
              // 外边线颜色
              color: "rgba(241, 211, 87, 0.6)",
              // 外边线宽度
              width: 5,
            },
          }),
          defaultLabelExpressionInfo: {
            expression: "'M_' + $cluster_count",
          },
        });
      }

      //获取线renderer
      function getRendererOfLine() {
        return new SimpleRenderer({
          symbol: new SimpleLineSymbol({
            //线符号颜色
            color: isRandom ? randomColor() : '#F17D30',
            width: 2
          })
        })
      }

      //获取区renderer
      function getRendererOfRegion() {
        return new SimpleRenderer({
          symbol: new SimpleFillSymbol({
            color: isRandom ? randomColor() : '#2578B499',
            outline: new SimpleLineSymbol({
              color: isRandom ? randomColor() : '#2578B4',
              width: 1
            })
          })
        })
      }

      // IGSFeature点要素
      function addIGSFeatureLayerOfPoint() {
        const renderer = getRendererOfPoint()
        // 分段1图层
        layerOfPoint = new IGSFeatureLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer',
          sublayerId: '1-0',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfPoint)
        // 图层加载完毕
        layerOfPoint.on('layerview-created', function (result) {
          view.flyTo({
            extent: result.layer.extent
          })
          console.log('点加载完毕:', result.layer)
        })
      }

      // IGSFeature线要素
      function addIGSFeatureLayerOfLine() {
        const renderer = getRendererOfLine()
        layerOfLine = new IGSFeatureLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer',
          sublayerId: '2-23',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfLine)
      }

      // IGSFeature区要素
      function addIGSFeatureLayerOfRegion() {
        const renderer = getRendererOfRegion()
        layerOfRegion = new IGSFeatureLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer',
          sublayerId: '0',
          renderer: renderer
        })
        //加载图层
        map.add(layerOfRegion)
      }

      // IGSFeature点、线、区要素
      function addIGSFeatureLayer(featureType = 'all') {
        switch (featureType) {
          case 'region':
            addIGSFeatureLayerOfRegion()
            break
          case 'line':
            addIGSFeatureLayerOfLine()
            break
          case 'point':
            addIGSFeatureLayerOfPoint()
            break
          case 'all':
          default:
            addIGSFeatureLayerOfRegion()
            addIGSFeatureLayerOfLine()
            addIGSFeatureLayerOfPoint()
            break
        }
      }

      // 通过type加载图层
      function addLayer(featureType = 'all') {
        switch (currentLayerType) {
          case 'IGSFeature':
            addIGSFeatureLayer(featureType)
            break
          default:
            break
        }
      }

      // 切换点要素专题图样式
      function changeStyleOfPoint() {
        layerOfPoint.renderer.symbol.outline = new SimpleLineSymbol({
          //线符号颜色
          color: randomColor(),
          //线宽
          width: 4
        })
      }

      // 切换线要素专题图样式
      function changeStyleOfLine() {
        isRandom = true
        layerOfLine.renderer.symbol.color = randomColor()
      }

      // 切换区要素专题图样式
      function changeStyleOfRegion() {
        layerOfRegion.renderer.symbol.color = randomColor()
      }

      // 销毁多个图层
      function removeAllLayer() {
        map.removeMany([layerOfPoint, layerOfLine, layerOfRegion])
      }

      // 随机颜色值
      function randomColor() {
        return new zondy.Color(
          parseInt(Math.random() * 255),
          parseInt(Math.random() * 255),
          parseInt(Math.random() * 255),
          0.6
        )
      }

      //初始化视图
      function initViewer() {
        // 初始化图层管理容器
        map = new Map()
        // 初始化地图视图对象
        view = createView('mapgis-viewer', map)
      }

      //初始化示例UI操作
      function initUI() {
        layui.use(function () {
          var layer = layui.layer,
            $ = layui.jquery,
            form = layui.form

          //切换加载类型
          form.on('select(layerType)', function (data) {
            isRandom = false
            currentLayerType = data.value
            // 矢量瓦片图层没有点切换样式
            if (currentLayerType === 'IGSVectorTile') {
              document.getElementById('button-point').style.display = 'none'
            } else {
              document.getElementById('button-point').style.display =
                'inline-block'
            }
            // 销毁多个图层
            removeAllLayer()
            // 加载图层
            addLayer()
          })
        })
      }

      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        //添加专题图
        addIGSFeatureLayer()
        // 初始化UI操作
        initUI()
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-viewer" style="position: absolute; width: 100%; height: 100%"></div>
    <div class="layui-panel layui-panel-right">
      <form class="layui-form" action="">
        <div class="layui-form-item">
          <label class="layui-form-label">加载方式</label>
          <div class="layui-input-block layui-input-block-select">
            <select id="layerType" name="layerType" lay-filter="layerType">
              <option value="IGSFeature">IGSFeature</option>
              <option value="WFS">WFS</option>
              <option value="GeoJSON">GeoJSON</option>
            </select>
          </div>
        </div>
        <div class="layui-form-item change-feature-item">
          <label class="layui-form-label">切换要素样式</label>
          <div class="layui-input-block">
            <button
              type="button"
              class="layui-btn layui-btn-normal"
              id="button-point"
              onclick="changeStyleOfPoint()"
            >
              点
            </button>
            <button
              type="button"
              class="layui-btn layui-btn-normal"
              onclick="changeStyleOfLine()"
            >
              线
            </button>
            <button
              type="button"
              class="layui-btn layui-btn-normal"
              onclick="changeStyleOfRegion()"
            >
              区
            </button>
          </div>
        </div>
      </form>
    </div>
    <style type="text/css">
      .layui-panel-right {
        width: 345px;
        z-index: 999;
      }

      .change-feature-item {
        margin-top: 10px;
      }

      .layui-form-label {
        width: 86px;
      }
    </style>
  </body>
</html>
