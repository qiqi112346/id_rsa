<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <title>专题图显隐</title>
    <!-- 引入地图引擎库 -->
    <script src="http://webclient.smaryun.com/static/libs/include-lib-local-upgrade.js"></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css"
    />
    <!--示例公共样式-->
    <link
      rel="stylesheet"
      href="http://webclient.smaryun.com/static/libs/css/style.css"
    />
    <script>
      'use strict'
      // 定义三维视图的主要类
      let map, view
      // 矢量瓦片图层
      let igsMapImageLayer
      // 样式颜色是否随机的标识
      let isRandom = false
      // 点、线、区要素图层
      let layerOfPoint, layerOfLine, layerOfRegion
      // 获取构造函数
      const { renderer, Map, Color } = zondy
      const { ClassBreakRenderer } = renderer
      const { SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol } = zondy.symbol
      const { IGSMapImageLayer } = zondy.layer

      //获取点renderer
      function getRendererOfPoint() {
        return new ClassBreakRenderer({
          //字段名
          field: 'population',
          //默认样式
          defaultSymbol: new SimpleMarkerSymbol({
            //填充颜色
            color: isRandom ? randomColor() : new Color(178, 223, 138, 0.6),
            //点半径
            size: 25,
            //外边线样式
            outline: {
              //线颜色
              color: isRandom ? randomColor() : new Color(178, 223, 138, 1),
              //线宽
              width: 1
            }
          }),
          //分段专题图字段样式
          classBreakInfos: [
            {
              //分段最小值
              minValue: 0,
              //分段最大值
              maxValue: 4000000,
              // 设置分段是否显示
              visible: false,
              //匹配到该值后的样式，更多样式详见：《SimpleMarkerSymbol》
              symbol: new SimpleMarkerSymbol({
                //填充颜色
                color: isRandom ? randomColor() : new Color(76, 161, 46, 0.6),
                //点半径
                size: 25,
                //外边线样式
                outline: new SimpleLineSymbol({
                  //线颜色
                  color: isRandom ? randomColor() : new Color(76, 161, 46, 1),
                  //线宽
                  width: 1
                })
              })
            },
            {
              //分段最小值
              minValue: 4000000,
              //分段最大值
              maxValue: 8000000,
              //匹配到该值后的样式，更多样式详见：《SimpleMarkerSymbol》
              symbol: new SimpleMarkerSymbol({
                //填充颜色
                color: isRandom ? randomColor() : new Color(228, 67, 45, 0.6),
                //点半径
                size: 25,
                //外边线样式
                outline: new SimpleLineSymbol({
                  //线颜色
                  color: isRandom ? randomColor() : new Color(228, 67, 45, 1),
                  //线宽
                  width: 1
                })
              })
            }
          ]
        })
      }

      //获取线renderer
      function getRendererOfLine() {
        return new ClassBreakRenderer({
          field: 'osm_id',
          //匹配到该值后的样式
          defaultSymbol: new SimpleLineSymbol({
            // 填充符号颜色
            color: isRandom ? randomColor() : new Color(37, 120, 180, 1),
            //线宽
            width: 2
          }),
          //分段专题图字段样式
          classBreakInfos: [
            {
              // 分段最大值
              minValue: 100000000,
              // 分段最大值
              maxValue: 200000000,
              // 设置分段是否显示
              visible: false,
              //匹配到该值后的样式，更多样式详见：《SimpleLineSymbol》
              symbol: new SimpleLineSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(228, 67, 45, 1),
                //线宽
                width: 2
              })
            },
            {
              // 分段最小值
              minValue: 200000000,
              // 分段最大值
              maxValue: 300000000,
              //匹配到该值后的样式，更多样式详见：《SimpleLineSymbol》
              symbol: new SimpleLineSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(178, 223, 138, 1),
                //线宽
                width: 2
              })
            }
          ]
        })
      }

      //获取区renderer
      function getRendererOfRegion() {
        return new ClassBreakRenderer({
          field: 'GDP2016',
          //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
          defaultSymbol: new SimpleFillSymbol({
            // 填充符号颜色
            color: isRandom ? randomColor() : new Color(130, 135, 247, 0.6),
            // 外边线样式
            outline: new SimpleLineSymbol({
              // 线符号颜色
              color: isRandom ? randomColor() : new Color(130, 135, 247, 1),
              // 线宽
              width: 1
            })
          }),
          //分段专题图字段样式
          classBreakInfos: [
            {
              // 分段最大值
              minValue: 0,
              // 分段最大值
              maxValue: 100,
              // 设置分段是否显示
              visible: false,
              //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
              symbol: new SimpleFillSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(248, 191, 111, 0.6),
                // 外边线样式
                outline: new SimpleLineSymbol({
                  //线符号颜色
                  color: isRandom ? randomColor() : new Color(248, 191, 111, 1),
                  //线宽
                  width: 1
                })
              })
            },
            {
              // 分段最小值
              minValue: 100,
              // 分段最大值
              maxValue: 200,
              //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
              symbol: new SimpleFillSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(130, 247, 254, 0.6),
                // 外边线样式
                outline: new SimpleLineSymbol({
                  // 线符号颜色
                  color: isRandom ? randomColor() : new Color(130, 247, 254, 1),
                  // 线宽
                  width: 1
                })
              })
            },
            {
              // 分段最小值
              minValue: 200,
              // 分段最大值
              maxValue: 500,
              //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
              symbol: new SimpleFillSymbol({
                // 填充符号颜色
                color: isRandom ? randomColor() : new Color(231, 147, 146, 0.6),
                // 外边线样式
                outline: new SimpleLineSymbol({
                  // 线符号颜色
                  color: isRandom ? randomColor() : new Color(231, 147, 146, 1),
                  // 线宽
                  width: 1
                })
              })
            }
          ]
        })
      }

      // // 添加专题图图层
      // function addThemLayer() {
      //   igsMapImageLayer = new IGSMapImageLayer({
      //     // 服务基地址
      //     url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/MapServer',
      //     // 设置子图层专题图
      //     sublayers: [
      //       {
      //         // 子图层id
      //         id: 0,
      //         // 设置单值专题图渲染器
      //         renderer: getRendererOfRegion()
      //       }
      //     ]
      //   })

      //   // 添加图层
      //   map.add(igsMapImageLayer)

      //   // 图层加载完毕事件
      //   igsMapImageLayer.on('layerview-created', (result) => {
      //     console.log('加载完毕', result.layer)
      //     view.flyTo({
      //       extent: result.layer.extent
      //     })
      //   })
      // }

      // 随机颜色值
      function randomColor() {
        return new Color(
          parseInt(Math.random() * 255),
          parseInt(Math.random() * 255),
          parseInt(Math.random() * 255),
          0.6
        )
      }

      //初始化三维球体
      function initViewer() {
        // 初始化图层管理容器
        map = new Map()
        // 初始化地图视图对象
        view = createView('mapgis-viewer', map)
      }

      //地图初始化函数
      function init() {
        //初始化三维球体
        initViewer()
        //添加专题图
        addThemLayer()
      }

      // 添加专题图图层
      function addThemLayer() {
        igsMapImageLayer = new IGSMapImageLayer({
          // 服务基地址
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/MapServer',
          httpMethod: 'POST'
        })

        // 添加图层
        map.add(igsMapImageLayer)

        // 图层加载完毕事件
        igsMapImageLayer.on('layerview-created', (result) => {
          console.log('加载完毕', result.layer)
          layerOfPoint = igsMapImageLayer.findSublayerById(5)
          layerOfLine = igsMapImageLayer.findSublayerById('2-23')
          layerOfRegion = igsMapImageLayer.findSublayerById(0)
          // 设置点图层的专题图
          layerOfPoint.renderer = getRendererOfPoint()
          // 设置线图层的专题图
          layerOfLine.renderer = getRendererOfLine()
          // 设置区图层的专题图
          layerOfRegion.renderer = getRendererOfRegion()
          view.flyTo({
            extent: result.layer.extent
          })
        })
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-viewer" style="position: absolute; width: 100%; height: 100%"></div>
  </body>
</html>
