<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>图形图层 - 自定义坐标系</title>
    <!-- 引入地图引擎库 -->
    <script
            src="http://webclient.smaryun.com/static/libs/include-lib-local-upgrade.js"
    ></script>
    <!--示例中面板、按钮等，第三方layui的js库与css样式-->
    <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
    <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css" />
    <!--示例公共样式-->
    <link
            rel="stylesheet"
            href="http://webclient.smaryun.com/static/libs/css/style.css"
    />
    <script type="text/javascript">
      //使用严格模式
      'use strict'
      // 定义二维视图的主要类

      let map, view, layer, layerOpacity = 1
      const {
        IGSTileLayer,
        GraphicsLayer
      } = zondy.layer
      const { Map, Feature, Color, SpatialReference } = zondy
      const { Point, LineString, Polygon } = zondy.geometry
      const { SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol } = zondy.symbol

      // 初始化地图
      function init() {
        // 初始化地图视图
        initView()
        // 初始化示例UI
        initUI()
        // 添加瓦片图层
        addIGSTileLayer()
        // 添加图形图层
        addLayer()
      }

      // 初始二维地图
      function initView() {
        // 初始化图层管理容器
        map = new Map()
        // 初始化地图视图对象
        view = createView('mapgis-viewer', map)
        // 获取地图引擎类型
        const engineType = localStorage.getItem('engine-type', 'cesium')
        // 针对三维进行特殊处理
        if (engineType === 'cesium'){
          // 获取三维场景视图对象
          const viewer = view.getInnerView()
          // 判断是否支持图像渲染像素化处理
          if(Cesium.FeatureDetection.supportsImageRenderingPixelated()){
            // 使得该值和浏览器保持一致，文字或者图形的渲染结果会更加平滑
            viewer.resolutionScale = window.devicePixelRatio
          }
          // 开启抗锯齿，文字或者图形的渲染结果会更加平滑
          viewer.scene.fxaa = true
          viewer.scene.postProcessStages.fxaa.enabled = true
        }
      }

      // 添加瓦片图层
      function addIGSTileLayer() {
        const igsTileLayer = new IGSTileLayer({
          url: 'http://webclient.smaryun.com:8089/igs/rest/services/Tile/武汉市_4547_custom_1-10/TileServer'
        })
        map.add(igsTileLayer)
        igsTileLayer.on('layerview-created', (result) => {
          view.flyTo({
            extent: result.layer.extent
          })
        })
      }

      // 添加图形图层
      function addLayer() {
        // 如果layer存在，先删除图层
        if (layer) {
          deleteLayer()
        }
        // 创建Graphics图层对象
        layer = new GraphicsLayer({
          // 要素集合
          graphics: [],
          // 图层透明度
          opacity: layerOpacity,
        })
        // 添加图层对象到地图文档中
        map.add(layer)
        // 添加几何要素
        addFeature()
      }

      // 添加几何要素
      function addFeature() {
        // 创建点几何要素
        const feature1 = new Feature({
          // 创建几何对象
          geometry: new Point({
            coordinates: [537454.8331283073, 3393933.865],
            // 使用非4326坐标系时，请指定坐明确的坐标系参数，支持设置WKID或者WKT
            spatialReference: new SpatialReference({
              wkid: 4547
            })
          }),
          // 设置几何样式
          symbol: new SimpleMarkerSymbol({
            // 设置填充颜色
            color: new Color(0, 0, 255, 1),
            // 设置半径，单位像素
            size: 15,
            // 设置外边线样式
            outline: new SimpleLineSymbol({
              // 设置外边线颜色
              color: new Color(255, 0, 0, 1),
              // 设置外边线宽度，单位像素
              width: 2
            })
          })
        })
        // 添加要素
        layer.add(feature1)

        // 创建线几何要素
        const feature2 = new Feature({
          // 创建线几何对象
          geometry: new LineString({
            coordinates: [
              [567454.8331283073, 3423933.865],
              [567454.8331283073, 3393933.865]
            ],
            // 使用非4326坐标系时，请指定坐明确的坐标系参数，支持设置WKID或者WKT
            spatialReference: new SpatialReference({
              wkid: 4547
            })
          }),
          // 设置线的符号
          symbol: new SimpleLineSymbol({
            // 设置线颜色
            color: new Color(0, 0, 255, 1),
            // 设置线宽，单位像素
            width: 4
          })
        })
        // 添加要素
        layer.add(feature2)

        // 创建区几何要素
        const feature3 = new Feature({
          geometry: new Polygon({
            coordinates: [
              [
                [517454.8331283073, 3423933.865],
                [517454.8331283073, 3393933.865],
                [497454.8331283073, 3393933.865],
                [517454.8331283073, 3423933.865],
              ]
            ],
            // 使用非4326坐标系时，请指定坐明确的坐标系参数，支持设置WKID或者WKT
            spatialReference: new SpatialReference({
              wkid: 4547
            })
          }),
          // 设置符号样式
          symbol: new SimpleFillSymbol({
            // 设置填充颜色
            color: new Color(0, 255, 0, 0.5),
            // 设置外边线样式
            outline: new SimpleLineSymbol({
              // 设置外边线颜色
              color: new Color(255, 0, 0, 1),
              // 设置外边线宽度，单位像素
              width: 2
            })
          })
        })
        // 添加要素
        layer.add(feature3)
      }

      // 删除图层
      function deleteLayer() {
        map.remove(layer)
      }

      // 显隐图层
      function toggleLayer() {
        layer.visible = !layer.visible
      }

      //初始化示例UI操作
      function initUI() {
        layui.use(function () {
          layui.slider.render({
            elem: "#moveStep",
            value: 100,
            min: 0,
            max: 100,
            step: 1,
            theme: 'rgb(21, 134, 238)',
            //自定义提示文本
            setTips: function (value) {
              layerOpacity = value / 100
              return value + '%';
            },
            change: function (value) {
              layer.opacity = layerOpacity
            }
          });
        })
      }
    </script>
</head>

<body onload="init();">
<!--  视图容器div  -->
<div id="mapgis-viewer" style="position: absolute; width: 100%; height: 100%"></div>
<!--  示例UI  -->
    <div class="layui-panel layui-panel-right graphics-layer-panel">
    <form class="layui-form" action="">
        <div class="layui-form-item">
            <label class="layui-form-label" style="width: 100px;">图层透明度</label>
            <div class="layui-input-block sample-slider" style="width: 160px;">
                <div id="moveStep"></div>
            </div>
        </div>
        <div class="line"></div>
        <div class="layui-form-item">
            <button type="button" class="layui-btn" onclick="addLayer()">添加图层</button>
            <button type="button" class="layui-btn" onclick="deleteLayer()" style="margin-left: 6px">删除图层</button>
            <button type="button" class="layui-btn" onclick="toggleLayer()" style="margin-left: 6px">显隐图层</button>
        </div>
    </form>
</div>
</body>
</html>
