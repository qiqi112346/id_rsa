<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>要素图层-服务端过滤</title>
  <!-- 引入地图引擎库 -->
  <script src="http://webclient.smaryun.com/static/libs/include-lib-local-upgrade.js"></script>
  <!--示例中面板、按钮等，第三方layui的js库与css样式-->
  <script src="http://webclient.smaryun.com/static/libs/cdn/layui/layui.js"></script>
  <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/cdn/layui/css/layui.css" />
  <!--示例公共样式-->
  <link rel="stylesheet" href="http://webclient.smaryun.com/static/libs/css/style.css" />
  <script type="text/javascript">
    //使用严格模式
    'use strict'
    // 定义二维视图的主要类

    let map, view, layer, layerOpacity = 1,
      renderer = null,
      definitionExpression = undefined, filterGeometry, url = "http://webclient.smaryun.com:8089/igs/rest/services/Map/湖北省4326/FeatureServer/0"
    const {
      IGSFeatureLayer
    } = zondy.layer
    const { SimpleRenderer, UniqueValueRenderer, ClassBreakRenderer } = zondy.renderer
    const { SimpleLineSymbol, SimpleFillSymbol, PictureMarkerSymbol, PictureFillSymbol } =
      zondy.symbol
    const { Polygon, MultiPolygon, Extent, Circle } = zondy.geometry
    const { Map, SpatialReference, Color , ElevationInfo} = zondy

    // 初始化地图
    function init() {
      // 初始化地图视图
      initView()
      // 初始化示例UI
      initUI()
      // 添加要素图层
      addLayer()
    }

    // 初始二维地图
    function initView() {
      // 初始化图层管理容器
      map = new Map()
      // 初始化地图视图对象
      view = createView('mapgis-viewer', map)
    }

    // 添加瓦片图层
    function addLayer() {
      // 如果layer存在，先删除图层
      if (layer) {
        deleteLayer()
      }
      // 设置默认专题图
      setSimpleRenderer()
      // 创建要素图层
      layer = new IGSFeatureLayer({
        // 服务基地址
        url: url,
        // 图层透明度
        opacity: layerOpacity,
        // 渲染器
        renderer:renderer,
        // 由于没有设置坐标点高度，因此将高度模式设置为贴地模式，避免被地形压盖
        elevationInfo: new ElevationInfo({
          mode: 'OnTheGround'
        })
      })
      // 添加图层
      map.add(layer)
      // 图层添加完毕后，跳转到图层范围内
      layer.on('layerview-created', (result) => {
        view.flyTo({
          extent: result.layer.extent
        })
      })
    }

    // 获取图层构造参数
    function getParams() {
      // 设置图层初始化参数
      let options = {
        // 服务基地址
        url: url,
        // 图层透明度
        opacity: layerOpacity
      }

      // 设置Renderer
      options.renderer = renderer

      // 设置服务端过滤
      options.serverFilter = {
      }

      // 空间过滤
      if (filterGeometry) {
        options.serverFilter.geometry = filterGeometry
        options.serverFilter.distance =  parseFloat(document.getElementById('distance').value)
        options.serverFilter.units = document.getElementById('distanceUnit').value
        options.serverFilter.spatialRelation = document.getElementById('spatialRelation').value
      }

      // FID过滤
      const objectIdsValue = document.getElementById('objectIds').value
      if (objectIdsValue) {
        options.serverFilter.objectIds = objectIdsValue.split(',')
      }

      // 属性过滤
      const where = document.getElementById('where').value
      if (where) {
        options.serverFilter.where = where
      }
      return options
    }

    // 设置单值专题图参数
    function setUniqueRenderer() {
      // 请求变为post
      renderer = new UniqueValueRenderer({
        //字段名
        field: 'NAME',
        // 默认样式
        defaultSymbol: new SimpleFillSymbol({
          // 设置填充颜色
          color: 'rgba(102,159,118,0.5)',
          // 外边线颜色
          outline: new SimpleLineSymbol({
            // 设置填充颜色
            color: 'rgba(58,91,67,0.1)',
            // 外边线宽度
            width: 3,
            // 线样式,默认'solid',可选"dash"|"dash-dot"|"dot"|"long-dash"|"long-dash-dot"|"long-dash-dot-dot"|"none"|"short-dash"|"short-dash-dot"|"short-dash-dot-dot"|"short-dot"|"solid"
            style: 'solid'
          }),
          // 填充样式，默认"solid",可选"backward-diagonal"|"cross"|"diagonal-cross"|"forward-diagonal"|"horizontal"|"none"|"solid"|"vertical"
          style: 'solid'
        }),
        // 字段表达式信息
        //单值专题图字段样式
        uniqueValueInfos: [
          {
            //指定字段值1
            value: '武汉市',
            // 是否可视化单值信息
            visible: true,
            // 匹配到该值后的样式
            symbol: new PictureFillSymbol({
              // 设置图片数据
              url: 'http://webclient.smaryun.com/static/assets/logo/mapgis_logo_blue.png',
              // 简单填充符号宽度，默认为12，单位像素
              width: 12,
              // 简单填充符号高度，默认为12，单位像素
              height: 12,
              // x方向偏移，默认为0，单位像素
              xoffset: 0,
              // y方向偏移，默认为0，单位像素
              yoffset: 0,
              // x方向拉伸，取值在0-1之间
              xscale: 1,
              // y方向拉伸，取值在0-1之间
              yscale: 1
            })
          },
          {
            //指定字段值2
            value: '天门市',
            // 是否可视化单值信息
            visible: true,
            //匹配到该值后的样式
            symbol: new SimpleFillSymbol({
              // 设置填充颜色
              color: 'rgba(220,203,35,0.5)',
              // 外边线颜色
              outline: new SimpleLineSymbol({
                // 设置填充颜色
                color: 'rgba(255,128,0,0.5)',
                // 外边线宽度
                width: 3,
                // 线样式,默认'solid',可选"dash"|"dash-dot"|"dot"|"long-dash"|"long-dash-dot"|"long-dash-dot-dot"|"none"|"short-dash"|"short-dash-dot"|"short-dash-dot-dot"|"short-dot"|"solid"
                style: 'solid'
              }),
              // 填充样式，默认"solid",可选"backward-diagonal"|"cross"|"diagonal-cross"|"forward-diagonal"|"horizontal"|"none"|"solid"|"vertical"
              style: 'solid'
            })
          }
        ]
      })
    }

    // 设置统一专题图参数
    function setSimpleRenderer() {
      renderer = new SimpleRenderer({
        symbol: new SimpleFillSymbol({
          color: '#2578B499',
          outline: new SimpleLineSymbol({
            color: '#2578B4',
            width: 1
          })
        })
      })
    }

    // 设置分段专题图参数
    function setClassBreakRenderer() {
      renderer = new ClassBreakRenderer({
        field: 'GDP2016',
        //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
        defaultSymbol: new PictureFillSymbol({
          // 设置图片数据
          url: 'http://webclient.smaryun.com/static/assets/logo/mapgis_logo_blue.png',
          // 简单填充符号宽度，默认为12，单位像素
          width: 12,
          // 简单填充符号高度，默认为12，单位像素
          height: 12,
          // x方向偏移，默认为0，单位像素
          xoffset: 0,
          // y方向偏移，默认为0，单位像素
          yoffset: 0,
          // x方向拉伸，取值在0-1之间
          xscale: 1,
          // y方向拉伸，取值在0-1之间
          yscale: 1
        }),
        //分段专题图字段样式
        classBreakInfos: [
          {
            // 分段最大值
            minValue: 0,
            // 分段最大值
            maxValue: 100,
            //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
            symbol: new PictureFillSymbol({
              // 设置图片数据
              url: 'http://webclient.smaryun.com/static/assets/logo/mapgis_logo_blue.png',
              // 简单填充符号宽度，默认为12，单位像素
              width: 12,
              // 简单填充符号高度，默认为12，单位像素
              height: 12,
              // x方向偏移，默认为0，单位像素
              xoffset: 0,
              // y方向偏移，默认为0，单位像素
              yoffset: 0,
              // x方向拉伸，取值在0-1之间
              xscale: 1,
              // y方向拉伸，取值在0-1之间
              yscale: 1
            })
          },
          {
            // 分段最小值
            minValue: 100,
            // 分段最大值
            maxValue: 200,
            //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
            symbol: new SimpleFillSymbol({
              // 填充符号颜色
              color: new Color(130, 247, 254, 0.6),
              // 外边线样式
              outline: new SimpleLineSymbol({
                // 线符号颜色
                color: new Color(130, 247, 254, 1),
                // 线宽
                width: 1
              })
            })
          },
          {
            // 分段最小值
            minValue: 200,
            // 分段最大值
            maxValue: 500,
            //匹配到该值后的样式，更多样式详见：《SimpleFillSymbol》
            symbol: new SimpleFillSymbol({
              // 填充符号颜色
              color: new Color(231, 147, 146, 0.6),
              // 外边线样式
              outline: new SimpleLineSymbol({
                // 线符号颜色
                color: new Color(231, 147, 146, 1),
                // 线宽
                width: 1
              })
            })
          }
        ]
      })
    }

    // 设置裁剪多边形
    function getPolygonClip() {
      return new Polygon({
        coordinates: [
          [
            [111.36341, 29.032578],
            [113, 30],
            [114.13094, 29.032578],
            [114.13094, 31.273224],
            [111.36341, 31.273224],
            [111.36341, 29.032578]
          ]
        ]
      })
    }

    // 设置裁剪多边形
    function getMultiPolygonClip() {
      return new MultiPolygon({
        coordinates: [
          [
            [
              [113.5, 30.5],
              [114, 30.5],
              [114, 31],
              [113.5, 31],
              [113.5, 30.5]
            ]
          ],
          [
            [
              [111.5, 30.5],
              [112, 30.5],
              [112, 31],
              [111.5, 31],
              [111.5, 30.5]
            ]
          ]
        ]
      })
    }

    // 设置裁剪多边形
    function getExtentClip() {
      return new Extent({
        xmin: 110,
        xmax: 114,
        ymin: 29.5,
        ymax: 31
      })
    }

    // 设置裁剪多边形
    function getCircleClip() {
      return new Circle({
        // 设置圆的中心点
        center: [113.2, 30.5],
        // 设置圆的半径，单位米
        radius: 100000,
        // 设置圆转多边形时分割点的数量
        numberOfPoints: 200
      })
    }

    // 重置图层
    function resetLayer() {
      // 删除图层
      map.remove(layer)
      // 设置图层初始化参数
      const options = getParams()
      // 创建图层
      layer = new IGSFeatureLayer(options)
      // 添加图层
      map.add(layer)
    }

    //初始化示例UI操作
    function initUI() {
      layui.use(function () {
        const form = layui.form
        // 客户端filterGeometry
        form.on('select(geometryFilter)', function (data) {
          if (data.value === 'polygon') {
            // 设置裁剪多边形
            filterGeometry = getPolygonClip()
            // 重置图层
            resetLayer()
          } else if (data.value === 'multiPolygon') {
            // 设置裁剪多边形
            filterGeometry = getMultiPolygonClip()
            // 重置图层
            resetLayer()
          } else if (data.value === 'extent') {
            // 设置裁剪多边形
            filterGeometry = getExtentClip()
            // 重置图层
            resetLayer()
          } else if (data.value === 'circle') {
            // 设置裁剪多边形
            filterGeometry = getCircleClip()
            // 重置图层
            resetLayer()
          } else {
            // 不设置客户端裁剪
            filterGeometry = undefined
            // 重置图层
            resetLayer()
          }
        })

        // 切换专题图
        form.on('select(renderer)', function (data) {
          if (data.value === 'simpleRenderer') {
            // 设置统一专题图
            setSimpleRenderer()
            // 重置图层
            resetLayer()
          } else if (data.value === 'uniqueValueRenderer') {
            // 设置单值专题图
            setUniqueRenderer()
            // 重置图层
            resetLayer()
          } else if (data.value === 'classBreakRenderer') {
            // 设置分段专题图
            setClassBreakRenderer()
            // 重置图层
            resetLayer()
          } else {
            // 不设置专题图
            sublayers = undefined
            // 重置图层
            resetLayer()
          }
        })


      })
    }
  </script>
  <style>
    .layui-input-block-select {
      width: 186px;
    }
  </style>
</head>

<body onload="init();">
  <!--  视图容器div  -->
  <div id="mapgis-viewer" style="position: absolute; width: 100%; height: 100%"></div>
  <!--  示例UI  -->
  <div class="layui-panel layui-panel-right map-image-layer-panel">
    <form class="layui-form" action="">
      <div class="layui-form-item">
        <label class="layui-form-label">设置专题图</label>
        <div class="layui-input-block layui-input-block-select">
          <select id="renderer" name="renderer" lay-filter="renderer">
            <option value="simpleRenderer">统一渲染器</option>
            <option value="uniqueValueRenderer">单值渲染器</option>
            <option value="classBreakRenderer">分段渲染器</option>
          </select>
        </div>
      </div>

      <div class="layui-form-item" style="margin-bottom: 10px">
        <label class="layui-form-label">空间过滤几何</label>
        <div class="layui-input-block layui-input-block-select">
          <select id="geometryFilter" name="geometryFilter" lay-filter="geometryFilter">
            <option value="none">无</option>
            <option value="polygon">多边形(单区)</option>
            <option value="multiPolygon">多边形(多区)</option>
            <option value="extent">矩形</option>
            <option value="circle">圆形</option>
          </select>
        </div>
      </div>


      <div class="layui-form-item" style="margin-bottom: 10px">
        <label class="layui-form-label">空间关系</label>
        <div class="layui-input-block layui-input-block-select">
          <select id="spatialRelation" name="spatialRelation" lay-filter="spatialRelation">
            <option value="Intersects">相交</option>
            <option value="EnvelopeIntersects">外包矩形相交</option>
            <option value="Contains">包含</option>
            <option value="Disjoint">相离</option>
          </select>
        </div>
      </div>

      <div class="layui-form-item" style="margin-bottom: 10px">
        <label class="layui-form-label">缓冲距离</label>
        <div class="layui-input-block layui-input-block-select">
          <select id="distance" name="distance" lay-filter="distance">
            <option value="0.1">0.1</option>
            <option value="100">100</option>
            <option value="1000">1000</option>
            <option value="10000">10000</option>
          </select>
        </div>
      </div>

      <div class="layui-form-item" style="margin-bottom: 10px">
        <label class="layui-form-label">缓冲距离单位</label>
        <div class="layui-input-block layui-input-block-select">
          <select id="distanceUnit" name="distanceUnit" lay-filter="distanceUnit">
            <option value="meters">米</option>
            <option value="kilometers">千米</option>
            <option value="miles">英里</option>
          </select>
        </div>
      </div>


      <div class="layui-form-item">
        <label class="layui-form-label">属性过滤</label>
        <div class="layui-input-block" style="margin-bottom: 6px">
          <input id="where" value="" autocomplete="off" class="layui-input" placeholder="Name = '武汉市'" />
        </div>
      </div>

      <div class="layui-form-item">
        <label class="layui-form-label">FID过滤</label>
        <div class="layui-input-block" style="margin-bottom: 6px">
          <input id="objectIds" value="" autocomplete="off" class="layui-input" placeholder="1,2" />
        </div>
      </div>

      <div class="layui-form-item">
        <button type="button" class="layui-btn" style="float: right; width: auto; margin-top: 10px"
          onclick="resetLayer()">
          重置图层
        </button>
      </div>
    </form>
  </div>
</body>

</html>
