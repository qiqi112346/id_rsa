<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <title>动效设置</title>
    <link
      rel="stylesheet"
      href="https://cdn.bootcdn.net/ajax/libs/font-awesome/6.2.0/css/all.min.css"
      integrity="sha384-SOnAn/m2fVJCwnbEYgD4xzrPtvsXdElhOVvR8ND1YjB5nhGNwwf7nBQlhfAwHAZC"
      crossorigin="anonymous"
    />
    <!--引入行业标绘脚本库-->
    <script
      include="panel,2D"
      src="./static/libs/include-plot-local.js"
    ></script>

    <script>
      'use strict'

      //地图初始化函数
      function init() {
        /**
         * ***********************地图框架部分***************************
         */

        const view = window.initView('content')

        setTimeout(() => {
          // localStorage.setItem('engine-type','mapboxgl')
          // const v = window.parent.document.getElementById('frame-run-button')
          // v.click()
        }, 6000)

        /**
         * ***********************行业标绘库部分***************************
         */

        const zondy = window.zondy
        const Plot = zondy.plot
        const {
          PlotLayer2D,
          PlotLayer2DGroup,
          SymbolManager,
          TimeLine,
          DrawTool,
          PlotRegister,
          PlotUtilBase,
          FabricLayer
        } = Plot

        const symbolUrl = `http://webclient.smaryun.com:8200/Plot/plot-sample/symbolLibs/标号库a/symbolLib.json`
        const symbolOptions = {
          fontURL: `http://webclient.smaryun.com:8200/Plot/plot-sample/fonts/`,
          baseUrl: `http://webclient.smaryun.com:8200/Plot/plot-sample/symbolLibs/标号库a/`
        }

        let layer1,
          layer2,
          plotLayer2DGroup,
          timeline,
          drawTool,
          plotEditor,
          currentPlot
        // 获取overlay图层
        const canvas = new FabricLayer(view, PlotLayer2DGroup)
        // 创建符号管理器
        const manager = new SymbolManager(symbolUrl, symbolOptions)
        // 请求获取符号库
        manager.getSymbols().then(() => {
          // 创建二维图层组
          plotLayer2DGroup = canvas.getFabricCanvas()
          // 创建二维图层
          layer1 = new PlotLayer2D()
          // 开启图层可编辑
          layer1.editable = true
          // 添加图层
          plotLayer2DGroup.addLayer(layer1)
          // 创建时间轴
          $.getJSON(
            `http://webclient.smaryun.com:8200/Plot/plot-sample/scripts/abc.json`,
            (t) => {
              timeline = new TimeLine(plotLayer2DGroup, {})
              timeline.fromJSON(t)
              // 设置默认动画
              timeline.addAnimationObject({
                animationName: '动画1',
                featureIds: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
                duration: 500,
                easing: 'Linear',
                delay: 0,
                endDelay: 0,
                loop: 10000,
                timelineOffset: 0,
                animationType: 'visible-animation'
              })
              timeline.addAnimationObject({
                animationName: '动画2',
                featureIds: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
                duration: 3000,
                easing: 'Linear',
                delay: 0,
                endDelay: 0,
                loop: 10000,
                timelineOffset: 0,
                animationType: 'grow-animation'
              })
              timeline.addAnimationObject({
                animationName: '动画3',
                featureIds: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
                duration: 500,
                easing: 'Linear',
                delay: 0,
                endDelay: 0,
                loop: 10000,
                timelineOffset: 0,
                animationType: 'scale-animation'
              })
              // 开始动画
              setTimeout(() => {
                timeline.play()
              }, 2000)
            }
          )
          layer1.pickPlot = (plot) => {
            currentPlot = plot
          }

          const rePlot = layer1.addGeoJSONObject({
            type: 'Feature',
            featureId: '44f7b761-2c93-40e7-917d-cc61a58a4175',
            properties: {
              show: true,
              symbolId: '56',
              nodeStyles: {
                path12770: {
                  strokeStyle: 'rgba(255,0,0,1)'
                }
              },
              dimModAttitude: '1',
              dimModHeight: 3000
            },
            geometry: {
              type: 'MultiPoint',
              coordinates: [[117.18944441797595, 34.2390284961602]]
            }
          })
          rePlot.then((plot) => {
            currentPlot = plot
          })

          // 添加动画对象
          layer1.addGeoJSONObject({
            type: 'Feature',
            properties: {
              show: true,
              featureId: '85ecc668-eec4-4476-9c27-2f1fc4780a6d',
              symbolId: '39',
              symbolName: '撤离线'
            },
            geometry: {
              type: 'MultiPoint',
              coordinates: [
                [117.3701360274617, 34.15566255198262],
                [117.26718426641384, 34.103216223599446],
                [117.1508839238758, 34.08738778399195]
              ]
            }
          })
          layer1.pickPlot = (plot) => {
            currentPlot = plot
          }
        })
        /**
         * ***********************ui部分***************************
         */
        const panel = new window.webclientPlot.PlotPanel('plot-show-table', {
          titleText: '动效设置',
          panelWidth: 280
        })
        const contentBody = panel.getBody()
        contentBody.style.display = 'flex'
        contentBody.style.flexDirection = 'column'

        const items = [
          {
            children: [
              {
                name: '添加闪烁动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 500,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'blink-animation'
                    })
                  }
                }
              },
              {
                name: '添加显隐动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 500,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'visible-animation'
                    })
                  }
                }
              }
            ]
          },
          {
            children: [
              {
                name: '添加属性动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 4000,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'attribute-animation',
                      attrsItem: {
                        attrName: 'dimModHeight',
                        value: [3000, 2000, 6000, 3000]
                      }
                    })
                  }
                }
              },
              {
                name: '添加路径动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 3000,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationCoords: [
                        [117.3701360274617, 34.15566255198262],
                        [117.26718426641384, 34.103216223599446],
                        [117.1508839238758, 34.08738778399195]
                      ],
                      animationType: 'path-animation'
                    })
                  }
                }
              }
            ]
          },
          {
            children: [
              {
                name: '添加比例动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 500,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'scale-animation'
                    })
                  }
                }
              },
              {
                name: '添加生长动画',
                action: () => {
                  if (currentPlot) {
                    const uuid = currentPlot.getElement().getFeatureId()
                    timeline.addAnimationObject({
                      animationName: '动画2',
                      featureIds: uuid,
                      duration: 3000,
                      easing: 'Linear',
                      delay: 0,
                      endDelay: 0,
                      loop: 10000,
                      timelineOffset: 0,
                      animationType: 'grow-animation'
                    })
                  }
                }
              }
            ]
          },
          {
            name: '重置动画',
            action: () => {
              timeline.restore()
            }
          },
          {
            name: '播放动画',
            action: () => {
              timeline.restore()
              timeline.play()
            }
          },
          {
            name: '暂停动画',
            action: () => {
              timeline.pause()
            }
          },
          {
            name: '清空动画',
            action: () => {
              timeline.pause()
              timeline.clear()
            }
          }
        ]

        items.forEach((item) => {
          const f = (v) => {
            const div = document.createElement('div')
            div.setAttribute('class', 'list-item')
            div.innerText = v.name
            div.addEventListener('click', v.action.bind(this))
            return div
          }
          const list = document.createElement('div')
          list.setAttribute('class', 'listdom')
          if (item.children) {
            item.children.forEach((t) => {
              list.appendChild(f(t))
            })
          } else {
            list.appendChild(f(item))
          }
          contentBody.appendChild(list)
        })
      }
    </script>
  </head>

  <body onload="init()">
    <div id="mapgis-viewer">
      <div id="content" style="position: relative">
        <div id="plot-show-table"></div>
      </div>
    </div>
  </body>
  <style>
    #mapgis-viewer {
      width: 100%;
      height: 100vh;
      display: flex;
      position: relative;
    }
    #content {
      height: 100%;
      flex: 6.5;
      position: relative;
    }
    #plot-show-table {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 999;
    }
    #plot-show-table .listdom {
      font-family: Arial;
      margin-bottom: 5px;
      width: 100%;
      border-color: #1970fc;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    #plot-show-table .listdom .btn,
    .span {
      display: block;
      padding: 5px 12px;
      font-size: 13px;
      font-weight: 400;
      line-height: 1.53846154;
      text-align: center;
      white-space: nowrap;
      cursor: pointer;
      color: #fff;
      background-color: #3a85c6;
      user-select: none;
      border: 1px solid transparent;
      border-radius: 4px;
      width: 100%;
      box-sizing: border-box;
    }
    #plot-show-table .listdom .input {
      opacity: 0;
      display: block;
      padding: 5px 12px;
      font-size: 13px;
      font-weight: 400;
      line-height: 1.53846154;
      text-align: center;
      white-space: nowrap;
      cursor: pointer;
      color: #fff;
      background-color: #3a85c6;
      user-select: none;
      border: 1px solid transparent;
      border-radius: 4px;
      width: 100%;
      box-sizing: border-box;
    }
    #plot-show-table .listdom .list-item {
      flex: 1;
      height: 100%;
      padding: 5px 12px;
      border: 1px solid transparent;
      border-radius: 4px;
      background-color: #3a85c6;
      cursor: pointer;
      color: #fff;
      box-sizing: border-box;
      margin: 1px;
      text-align: center;
    }
  </style>
</html>
